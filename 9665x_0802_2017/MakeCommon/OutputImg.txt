#----------------------------------------------------------------------
# Local variable to determine create library or binary file
#----------------------------------------------------------------------
OUTPUT_FILE = BIN

#----------------------------------------------------------------------
# include make common and make option files
#----------------------------------------------------------------------
include $(MAKE_COMMON_DIR)/MakeOption.txt
include $(MAKE_COMMON_DIR)/MakeCommon.txt

#----------------------------------------------------------------------

#----------------------------------------------------------------------
# SSLCFG parameters
#----------------------------------------------------------------------
ifeq "$(SSLCFG)" ""
  SSLCFG := axtls_none
endif

#----------------------------------------------------------------------
# get ThirdParty libraries for both debug and release
#----------------------------------------------------------------------
SYMBOL_NETWORK := ""
ifeq "$(USE_ECOS_KERNEL)" "ON"
rwildcard = $(foreach d,$(wildcard $1*),$(call rwildcard,$d/,$2) $(filter $(subst *,%,$2),$d))

LIB_ECOS_BASE_DIR = $(ROOT_DIR)/ThirdParty
LIB_ECOS = $(call rwildcard,$(LIB_ECOS_BASE_DIR)/,*.a)

#Remove all network releated driver then add what you want
LIB_ECOS_NET_ALL += ecos-nvtwifi
LIB_ECOS_NET_ALL += devs_eCos-rtl ecos-rtkwifi rtkcmd rtkwps
LIB_ECOS_NET_ALL += devs_eCos-brcm ecos-brcmwifi devs_eCos-brcmdhd brcmcmd brcmwps
LIB_ECOS_NET_ALL += devs_eCos-nt18202 ecos-ntkwifi ntkwpa ntkcmd
LIB_ECOS_FILTER_OUT = $(addsuffix %,$(addprefix ../../ThirdParty/, $(LIB_ECOS_NET_ALL)))
LIB_ECOS := $(filter-out $(LIB_ECOS_FILTER_OUT), $(LIB_ECOS))

LIB_ECOS_WIFI_NVT = $(call rwildcard,$(LIB_ECOS_BASE_DIR)/ecos-nvtwifi/,*.a)

ifeq "$(NETWORK)" "NETWORK_SDIO_EVB_WIFI_NVT"
LIB_ECOS_SELECT_WIFI_DIR = devs_eCos-nt18202
LIB_ECOS_MUST_WIFI_DIR = ecos-nvtwifi ecos-ntkwifi ntkwpa ntkcmd
else ifeq "$(NETWORK)" "NETWORK_SDIO_EVB_WIFI"
LIB_ECOS_SELECT_WIFI_DIR = devs_eCos-rtl$(WIFIMDL)es
LIB_ECOS_MUST_WIFI_DIR = ecos-nvtwifi ecos-rtkwifi  rtkcmd rtkwps
else ifeq "$(NETWORK)" "NETWORK_SDIO_EVB_WIFI_BRCM"
LIB_ECOS_SELECT_WIFI_DIR = devs_eCos-brcm$(WIFIBRCMMDL)
LIB_ECOS_MUST_WIFI_DIR = ecos-nvtwifi devs_eCos-brcmdhd brcmcmd brcmwps ecos-brcmwifi
endif

LIB_ECOS_SELECT_WIFI_LIB = $(call rwildcard,$(LIB_ECOS_BASE_DIR)/$(LIB_ECOS_SELECT_WIFI_DIR)/,*.a)
LIB_ECOS_MUST_WIFI_LIB = $(foreach d,$(LIB_ECOS_MUST_WIFI_DIR), $(call rwildcard,$(LIB_ECOS_BASE_DIR)/$d/,*.a))
LIB_ECOS += $(LIB_ECOS_WIFI_NVT) $(LIB_ECOS_SELECT_WIFI_LIB) $(LIB_ECOS_MUST_WIFI_LIB)

#get ssl library by config
LIB_ECOS_SSLCFG_ALL    := $(wildcard $(LIB_ECOS_BASE_DIR)/axtls/lib/*.a)
LIB_ECOS_SSLCFG        := $(wildcard $(LIB_ECOS_BASE_DIR)/axtls/lib/lib$(SSLCFG).a)
LIB_ECOS_TMP2 := $(filter-out $(LIB_ECOS_SSLCFG_ALL), $(LIB_ECOS) )
LIB_ECOS := $(LIB_ECOS_TMP2) $(LIB_ECOS_SSLCFG) 

#There are two eCos .o not in archive
ALL_OBJ_R += $(wildcard $(LIB_ECOS_BASE_DIR)/eCos/lib/*.o)
ALL_OBJ_D += $(wildcard $(LIB_ECOS_BASE_DIR)/eCos/lib/*.o)

ifeq "$(NETWORK)" "NETWORK_SPI_EVB_ETHERNET"
SYMBOL_NETWORK      := if_ax88796_devtab_entry spi_nt96650_bus_init
endif
ifeq "$(NETWORK)" "NETWORK_SDIO_EVB_WIFI"
SYMBOL_NETWORK      := cyg_sdio_devtab_entry sdio_initial rltk819x_wlan0_netdev0 rltk819x_wlan_init wlan0_main
endif
ifeq "$(NETWORK)" "NETWORK_SDIO_EVB_WIFI_BRCM"
SYMBOL_NETWORK      := cyg_sdio_devtab_entry sdio_initial dhd_ecos_fop_dump_nv_info
endif
ifeq "$(NETWORK)" "NETWORK_SDIO_EVB_WIFI_NVT"
SYMBOL_NETWORK      := cyg_sdio_devtab_entry sdio_initial nt18202_netdev_entry nt18202_netdev_init nvt_main nvtdiag nvt_wpa_supplicant_init nvtwsupp_main wpa_cli_main ifconfig_main iwpriv_main
endif

endif

#----------------------------------------------------------------------
# include the libraries
#----------------------------------------------------------------------
#
# get Debug LIBs
#
LIB_APP_DIR_D = $(ARC_BASE_DIR)/App/Debug
LIB_COM_DIR_D = $(ARC_BASE_DIR)/Common/Debug
LIB_DRV_DIR_D = $(ARC_BASE_DIR)/Drv/Debug
LIB_LIB_DIR_D = $(ARC_BASE_DIR)/Lib/Debug

# get App/AppExt libraries
LIB_APP_D := $(wildcard $(LIB_APP_DIR_D)/*.a)

# get Common libraries
LIB_COM_D := $(wildcard $(LIB_COM_DIR_D)/*.a)

# get Drv/DrvExt libraries
LIB_DRV_ALL_D       := $(wildcard $(LIB_DRV_DIR_D)/*.a)

LIB_SENSOR_ALL_D    := $(wildcard $(LIB_DRV_DIR_D)/CMOS*.a)
LIB_SENSOR_D        := $(wildcard $(LIB_DRV_DIR_D)/$(SENSOR)_D.a)
LIB_SENSOR2_D       := $(wildcard $(LIB_DRV_DIR_D)/$(SENSOR_2)_D.a)

LIB_MODELEXT_ALL_D  := $(wildcard $(LIB_DRV_DIR_D)/MODELEXT*.a)
LIB_MODELEXT_D      := $(wildcard $(LIB_DRV_DIR_D)/$(MODELEXT)_D.a)

LIB_LCD_ALL_D       := $(wildcard $(LIB_DRV_DIR_D)/Disp_*_LCD1_*.a)
LIB_LCD_D           := $(wildcard $(LIB_DRV_DIR_D)/$(LCD)_D.a)

LIB_LCD2_ALL_D      := $(wildcard $(LIB_DRV_DIR_D)/Disp_*_LCD2_*.a)
LIB_LCD2_D          := $(wildcard $(LIB_DRV_DIR_D)/$(LCD2)_D.a)

LIB_LENSDRV_ALL_D   := $(wildcard $(LIB_DRV_DIR_D)/LENSDRV*.a)
LIB_LENSDRV_D       := $(wildcard $(LIB_DRV_DIR_D)/$(LENSDRV)_D.a)

LIB_LENSMOTOR_ALL_D := $(wildcard $(LIB_DRV_DIR_D)/LENSMOTOR*.a)
LIB_LENSMOTOR_D     := $(wildcard $(LIB_DRV_DIR_D)/$(LENSMOTOR)_D.a)

LIB_IRRX_ALL_D	:= $(wildcard $(LIB_DRV_DIR_D)/IrRx*.a)
LIB_IRRX_D	:= $(wildcard $(LIB_DRV_DIR_D)/$(IRRX)_D.a)

LIB_GYRO_ALL_D	:= $(wildcard $(LIB_DRV_DIR_D)/Gyro*.a)
LIB_GYRO_D	:= $(wildcard $(LIB_DRV_DIR_D)/$(GYROEXT)_D.a)

LIB_GSENSOR_ALL_D	:= $(wildcard $(LIB_DRV_DIR_D)/GSensor*.a)
LIB_GSENSOR_D	:= $(wildcard $(LIB_DRV_DIR_D)/$(GSENSOREXT)_D.a)

LIB_DRV_D := $(filter-out $(LIB_SENSOR_ALL_D) $(LIB_MODELEXT_ALL_D) $(LIB_LCD_ALL_D) $(LIB_LCD2_ALL_D) $(LIB_LENSDRV_ALL_D) $(LIB_LENSMOTOR_ALL_D)$(LIB_GSENSOR_D) $(LIB_IRRX_D) $(LIB_GYRO_D), $(LIB_DRV_ALL_D))


# get slide-effect libraries except default effect
LIB_SLIDE_ALL_D     := $(wildcard $(LIB_LIB_DIR_D)/SlideEffect*.a)
LIB_SLIDE_DEFAULT_D := $(filter %SlideEffect_Default_D.a, $(LIB_SLIDE_ALL_D))
LIB_SLIDE_D         := $(filter-out $(LIB_SLIDE_DEFAULT_D), $(LIB_SLIDE_ALL_D))

# get format-parsing libraries
LIB_PARSER_ALL_D    := $(wildcard $(LIB_LIB_DIR_D)/PARSER*.a)
LIB_PARSER_DEFAULT_D:= $(filter %PARSER_Default_D.a, $(LIB_PARSER_ALL_D))
LIB_PARSER_D        := $(filter-out $(LIB_PARSER_DEFAULT_D), $(LIB_PARSER_ALL_D))

# get LIBs in App (except capture library), AppExt
# and LIB module (except driver and slide-effect libraries)
LIB_LIB_ALL_D       := $(filter-out $(LIB_PARSER_ALL_D) $(LIB_SLIDE_ALL_D), $(wildcard $(LIB_LIB_DIR_D)/*.a))

# get Lib/LibExt libraries
LIB_AF_ALL_D        := $(wildcard $(LIB_LIB_DIR_D)/AF*.a)
LIB_AF_D            := $(wildcard $(LIB_LIB_DIR_D)/$(AF)_D.a)
LIB_AFBASIC_D       := $(filter %AFTASK_D.a %AFALG_D.a, $(LIB_AF_ALL_D))

LIB_CAF_ALL_D       := $(wildcard $(LIB_LIB_DIR_D)/CAF*.a)
LIB_CAF_D           := $(wildcard $(LIB_LIB_DIR_D)/$(CAF)_D.a)

LIB_AE_ALL_D        := $(wildcard $(LIB_LIB_DIR_D)/AE_*.a)
LIB_AE_D            := $(wildcard $(LIB_LIB_DIR_D)/$(AE)_D.a)

LIB_AWB_ALL_D       := $(wildcard $(LIB_LIB_DIR_D)/AWB_*.a)
LIB_AWB_D           := $(wildcard $(LIB_LIB_DIR_D)/$(AWB)_D.a)

LIB_FLASHLIGHT_ALL_D:= $(wildcard $(LIB_LIB_DIR_D)/FLASHLIGHT_*.a)
LIB_FLASHLIGHT_D    := $(wildcard $(LIB_LIB_DIR_D)/$(FLASHLIGHT)_D.a)

LIB_IPL_ALL_D       := $(wildcard $(LIB_LIB_DIR_D)/IPL*.a)
LIB_IPL_D           := $(wildcard $(LIB_LIB_DIR_D)/$(IPP)_D.a)
LIB_IPL_CAL_D       := $(wildcard $(LIB_LIB_DIR_D)/$(IPP)_CAL*.a)
LIB_IPLCOM_D        := $(wildcard $(LIB_LIB_DIR_D)/IPL_COMMON_D.a)
LIB_IPLDISP_D       := $(wildcard $(LIB_LIB_DIR_D)/IPL_DISPLAY_D.a)
LIB_IPLDISP2_D      := $(wildcard $(LIB_LIB_DIR_D)/IPL_DISPLAY2_D.a)
LIB_IPLCAL_D        := $(wildcard $(LIB_LIB_DIR_D)/IPL_CALIBRATION_D.a)
LIB_IPLCALRW_D      := $(wildcard $(LIB_LIB_DIR_D)/IPL_CAL_RW_D.a)
LIB_OT_D            := $(wildcard $(LIB_LIB_DIR_D)/ObjTrackingAlg_D.a)

LIB_MD_ALL_D        := $(wildcard $(LIB_LIB_DIR_D)/MD*.a)
LIB_MD_D            := $(wildcard $(LIB_LIB_DIR_D)/$(MD)_D.a)
LIB_MD_ALG_D        := $(filter %MDAlg_D.a, $(LIB_MD_ALL_D))

LIB_IE_ALL_D        := $(wildcard $(LIB_LIB_DIR_D)/IE*.a)
LIB_IE_D            := $(wildcard $(LIB_LIB_DIR_D)/$(IE)_D.a)

LIB_LIB_D           := $(filter-out $(LIB_AF_ALL_D) $(LIB_CAF_ALL_D) $(LIB_AE_ALL_D) $(LIB_AWB_ALL_D) $(LIB_FLASHLIGHT_ALL_D) $(LIB_IPL_ALL_D) $(LIB_MD_ALL_D) $(LIB_IE_ALL_D), $(LIB_LIB_ALL_D))

#
# get Release LIBs
#
LIB_APP_DIR_R = $(ARC_BASE_DIR)/App/Release
LIB_COM_DIR_R = $(ARC_BASE_DIR)/Common/Release
LIB_DRV_DIR_R = $(ARC_BASE_DIR)/Drv/Release
LIB_LIB_DIR_R = $(ARC_BASE_DIR)/Lib/Release

# get App/AppExt libraries
LIB_APP_R := $(wildcard $(LIB_APP_DIR_R)/*.a)

# get Common libraries
LIB_COM_R := $(wildcard $(LIB_COM_DIR_R)/*.a)

# get Drv/DrvExt libraries
LIB_DRV_ALL_R       := $(wildcard $(LIB_DRV_DIR_R)/*.a)

LIB_SENSOR_ALL_R    := $(wildcard $(LIB_DRV_DIR_R)/CMOS*.a)
LIB_SENSOR_R        := $(wildcard $(LIB_DRV_DIR_R)/$(SENSOR).a)
LIB_SENSOR2_R       := $(wildcard $(LIB_DRV_DIR_R)/$(SENSOR_2).a)

LIB_MODELEXT_ALL_R  := $(wildcard $(LIB_DRV_DIR_R)/MODELEXT*.a)
LIB_MODELEXT_R      := $(wildcard $(LIB_DRV_DIR_R)/$(MODELEXT).a)

LIB_LCD_ALL_R       := $(wildcard $(LIB_DRV_DIR_R)/Disp_*_LCD1_*.a)
LIB_LCD_R           := $(wildcard $(LIB_DRV_DIR_R)/$(LCD).a)

LIB_LCD2_ALL_R      := $(wildcard $(LIB_DRV_DIR_R)/Disp_*_LCD2_*.a)
LIB_LCD2_R          := $(wildcard $(LIB_DRV_DIR_R)/$(LCD2).a)

LIB_LENSDRV_ALL_R   := $(wildcard $(LIB_DRV_DIR_R)/LENSDRV*.a)
LIB_LENSDRV_R       := $(wildcard $(LIB_DRV_DIR_R)/$(LENSDRV).a)

LIB_LENSMOTOR_ALL_R := $(wildcard $(LIB_DRV_DIR_R)/LENSMOTOR*.a)
LIB_LENSMOTOR_R     := $(wildcard $(LIB_DRV_DIR_R)/$(LENSMOTOR).a)

LIB_IRRX_ALL_R      := $(wildcard $(LIB_DRV_DIR_R)/IrRx*.a)
LIB_IRRX_R	:= $(wildcard $(LIB_DRV_DIR_R)/$(IRRX).a)

LIB_GYRO_ALL_R := $(wildcard $(LIB_DRV_DIR_R)/Gyro_*.a)
LIB_GYRO_R     := $(wildcard $(LIB_DRV_DIR_R)/$(GYROEXT).a)

LIB_GSENSOR_ALL_R := $(wildcard $(LIB_DRV_DIR_R)/GSensor_*.a)
LIB_GSENSOR_R     := $(wildcard $(LIB_DRV_DIR_R)/$(GSENSOREXT).a)

LIB_DRV_R := $(filter-out $(LIB_SENSOR_ALL_R) $(LIB_MODELEXT_ALL_R) $(LIB_LCD_ALL_R) $(LIB_LCD2_ALL_R) $(LIB_LENSDRV_ALL_R) $(LIB_LENSMOTOR_ALL_R) $(LIB_IRRX_ALL_R) $(LIB_GYRO_ALL_R) $(LIB_GSENSOR_ALL_R), $(LIB_DRV_ALL_R))

# get slide-effect libraries except default effect
LIB_SLIDE_ALL_R     := $(wildcard $(LIB_LIB_DIR_R)/SlideEffect*.a)
LIB_SLIDE_DEFAULT_R := $(filter %SlideEffect_Default.a, $(LIB_SLIDE_ALL_R))
LIB_SLIDE_R         := $(filter-out $(LIB_SLIDE_DEFAULT_R), $(LIB_SLIDE_ALL_R))

# get format-parsing libraries
LIB_PARSER_ALL_R    := $(wildcard $(LIB_LIB_DIR_R)/PARSER*.a)
LIB_PARSER_DEFAULT_R:= $(filter %PARSER_Default.a, $(LIB_PARSER_ALL_R))
LIB_PARSER_R        := $(filter-out $(LIB_PARSER_DEFAULT_R), $(LIB_PARSER_ALL_R))

# get LIBs in App (except capture library), AppExt
# and LIB module (except driver and slide-effect libraries)
LIB_LIB_ALL_R       := $(filter-out $(LIB_PARSER_ALL_R) $(LIB_SLIDE_ALL_R), $(wildcard $(LIB_LIB_DIR_R)/*.a))

# get Lib/LibExt libraries
LIB_AF_ALL_R        := $(wildcard $(LIB_LIB_DIR_R)/AF*.a)
LIB_AF_R            := $(wildcard $(LIB_LIB_DIR_R)/$(AF).a)
LIB_AFBASIC_R       := $(filter %AFTASK.a %AFALG.a, $(LIB_AF_ALL_R))

LIB_CAF_ALL_R       := $(wildcard $(LIB_LIB_DIR_R)/CAF*.a)
LIB_CAF_R           := $(wildcard $(LIB_LIB_DIR_R)/$(CAF).a)

LIB_AE_ALL_R        := $(wildcard $(LIB_LIB_DIR_R)/AE_*.a)
LIB_AE_R            := $(wildcard $(LIB_LIB_DIR_R)/$(AE).a)

LIB_AWB_ALL_R       := $(wildcard $(LIB_LIB_DIR_R)/AWB_*.a)
LIB_AWB_R           := $(wildcard $(LIB_LIB_DIR_R)/$(AWB).a)

LIB_FLASHLIGHT_ALL_R:= $(wildcard $(LIB_LIB_DIR_R)/FLASHLIGHT_*.a)
LIB_FLASHLIGHT_R    := $(wildcard $(LIB_LIB_DIR_R)/$(FLASHLIGHT).a)

LIB_IPL_ALL_R       := $(wildcard $(LIB_LIB_DIR_R)/IPL*.a)
LIB_IPL_R           := $(wildcard $(LIB_LIB_DIR_R)/$(IPP).a)
LIB_IPL_CAL_R       := $(wildcard $(LIB_LIB_DIR_R)/$(IPP)_CAL*.a)
LIB_IPLCOM_R        := $(wildcard $(LIB_LIB_DIR_R)/IPL_COMMON.a)
LIB_IPLDISP_R       := $(wildcard $(LIB_LIB_DIR_R)/IPL_DISPLAY.a)
LIB_IPLDISP2_R      := $(wildcard $(LIB_LIB_DIR_R)/IPL_DISPLAY2.a)
LIB_IPLCAL_R        := $(wildcard $(LIB_LIB_DIR_R)/IPL_CALIBRATION.a)
LIB_IPLCALRW_R      := $(wildcard $(LIB_LIB_DIR_R)/IPL_CAL_RW.a)
LIB_OT_R            := $(wildcard $(LIB_LIB_DIR_R)/ObjTrackingAlg.a)

LIB_MD_ALL_R        := $(wildcard $(LIB_LIB_DIR_R)/MD*.a)
LIB_MD_R            := $(wildcard $(LIB_LIB_DIR_R)/$(MD).a)
LIB_MD_ALG_R        := $(filter %MDAlg.a, $(LIB_MD_ALL_R))


LIB_IE_ALL_R        := $(wildcard $(LIB_LIB_DIR_R)/IE*.a)
LIB_IE_R            := $(wildcard $(LIB_LIB_DIR_R)/$(IE).a)


LIB_LIB_R           := $(filter-out $(LIB_AF_ALL_R) $(LIB_CAF_ALL_R) $(LIB_AE_ALL_R) $(LIB_AWB_ALL_R) $(LIB_FLASHLIGHT_ALL_R) $(LIB_IPL_ALL_R) $(LIB_MD_ALL_R) $(LIB_IE_ALL_R), $(LIB_LIB_ALL_R))

# get external AE AWB algorithm library by different setting
ifeq "$(EXTERNAL_AA)" "ON"
LIB_EXT_AEAWB_D := $(wildcard $(LIBEX_BASE_DIR_D)/$(EXT2A).a)
LIB_EXT_AEAWB_R := $(wildcard $(LIB_LIB_DIR_R)/$(EXT2A).a)
else
LIB_EXT_AEAWB_D :=
LIB_EXT_AEAWB_R :=
endif


# get total libraries for Debug & Release mode; note we cannot get string of LIB_R from LIB_D, or vice versa,
# because we may build Debug and Release output separately, the library of one mode maybe not exist, and cause
# the link problem. So, while adding/deleting libraries, please be patient to do it for Debug and Release mode both.

LIB_R := \
    $(LIB_APP_R) \
    $(LIB_COM_R) \
    $(LIB_DRV_R) \
    $(LIB_SENSOR_R) \
    $(LIB_SENSOR2_R) \
    $(LIB_MODELEXT_R) \
    $(LIB_LCD_R) \
    $(LIB_LCD2_R) \
    $(LIB_LENSDRV_R) \
    $(LIB_LENSMOTOR_R) \
    $(LIB_IRRX_R) \
    $(LIB_GYRO_R) \
    $(LIB_GSENSOR_R) \
    $(LIB_LIB_R) \
    $(LIB_SLIDE_R) \
    $(LIB_SLIDE_DEFAULT_R) \
    $(LIB_PARSER_R) \
    $(LIB_PARSER_DEFAULT_R) \
    $(LIB_CAF_R) \
    $(LIB_AF_R) \
    $(LIB_AFBASIC_R) \
    $(LIB_AE_R) \
    $(LIB_AWB_R) \
    $(LIB_FLASHLIGHT_R) \
    $(LIB_IPL_R) \
    $(LIB_IPLCAL_R) \
    $(LIB_IPLCOM_R) \
    $(LIB_IPLDISP_R) \
    $(LIB_IPLDISP2_R) \
    $(LIB_IPLCALRW_R) \
    $(LIB_IPL_CAL_R) \
    $(LIB_MD_R) \
    $(LIB_MD_ALG_R) \
    $(LIB_IE_R) \
    $(LIB_OT_R) \
    $(LIB_EXT_AEAWB_R)

LIB_D := \
    $(LIB_APP_D) \
    $(LIB_COM_D) \
    $(LIB_DRV_D) \
    $(LIB_SENSOR_D) \
    $(LIB_SENSOR2_D) \
    $(LIB_MODELEXT_D) \
    $(LIB_LCD_D) \
    $(LIB_LCD2_D) \
    $(LIB_LENSDRV_D) \
    $(LIB_LENSMOTOR_D) \
    $(LIB_IRRX_D) \
    $(LIB_GYRO_D) \
    $(LIB_GSENSOR_D) \
    $(LIB_LIB_D) \
    $(LIB_SLIDE_D) \
    $(LIB_SLIDE_DEFAULT_D) \
    $(LIB_PARSER_D) \
    $(LIB_PARSER_DEFAULT_D) \
    $(LIB_CAF_D) \
    $(LIB_AF_D) \
    $(LIB_AFBASIC_D) \
    $(LIB_AE_D) \
    $(LIB_AWB_D) \
    $(LIB_FLASHLIGHT_D) \
    $(LIB_IPL_D) \
    $(LIB_IPLCAL_D) \
    $(LIB_IPLCOM_D) \
    $(LIB_IPLDISP_D) \
    $(LIB_IPLDISP2_D) \
    $(LIB_IPLCALRW_D) \
    $(LIB_IPL_CAL_D) \
    $(LIB_MD_D) \
    $(LIB_MD_ALG_D) \
    $(LIB_IE_D) \
    $(LIB_OT_D) \
    $(LIB_EXT_AEAWB_D)

# If some libraries only available in Release mode, add these libraries in Debug mode too.
LIB_D += $(filter-out $(subst Debug/,Release/,$(LIB_D:_D.a=.a)),$(LIB_R))

# Append eCos library to both Debug and Release mode
# (We don't have debug mode's eCos library)
LIB_R += $(LIB_ECOS)
LIB_D += $(LIB_ECOS)

#----------------------------------------------------------------------
# set the make outputs
#----------------------------------------------------------------------
# for debug target
IMAGE_D = $(IMG_DEBUG)/$(PRJ_NAME)_D.axf
BIN_D   = $(IMG_DEBUG)/$(BIN_NAME).bin
MAP_D   = $(IMG_DEBUG)/$(PRJ_NAME)_D.txt
MAP2_D   = $(IMG_DEBUG)/$(PRJ_NAME)_ldmap_D.txt
SYM_D   = $(IMG_DEBUG)/$(PRJ_NAME)_D.sym
DASM_D  = $(IMG_DEBUG)/$(PRJ_NAME)_dasm_D.txt

# for release target
IMAGE_R = $(IMG_RELEASE)/$(PRJ_NAME).axf
BIN_R   = $(IMG_RELEASE)/$(BIN_NAME).bin
MAP_R   = $(IMG_RELEASE)/$(PRJ_NAME).txt
MAP2_R   = $(IMG_RELEASE)/$(PRJ_NAME)_ldmap.txt
SYM_R   = $(IMG_RELEASE)/$(PRJ_NAME).sym
DASM_R  = $(IMG_RELEASE)/$(PRJ_NAME)_dasm.txt

#----------------------------------------------------------------------
# if enable LDS_MAP
#----------------------------------------------------------------------
ifeq "$(LDS_MAP)" "ON"
LDMAP_D = -Map $(MAP2_D)
LDMAP_R = -Map $(MAP2_R)
endif

#----------------------------------------------------------------------
# set the warning/error log file option
#----------------------------------------------------------------------
log_file = log_Prj.txt

# 0: Standard input (stdin), 1: Standard output (stdout), 2: Standard error (stderr)
# 2>>$(log_file) means redirect standard error to $(log_file)
# 2>>/dev/null means redirect standard error to NULL (Don't display error message)
ifeq "$(LOG_ERR)" "ON"
LOG_OPTION = 2>>$(log_file)
endif

#----------------------------------------------------------------------
# set robustness checking log file
#----------------------------------------------------------------------
lint_file       = lint_Prj.txt
lintopt_file    = options_Prj.lnt
lintsum_file    = lintsum_Prj.txt

#----------------------------------------------------------------------
# set the make targets
#----------------------------------------------------------------------
build_D: make_debug_begin prepare_log $(IMAGE_D) $(BIN_D)
build_R: make_release_begin prepare_log $(IMAGE_R) $(BIN_R)

ifeq "$(ISOLATE_DEP)" "ON"
build_DEP: make_dep_begin $(SRC) $(ASM) $(ALL_DEP)
endif

build_LINT: make_lint_begin $(LINT_FILE)

prepare_log:
	@$(LOG_OPTION)

ifeq "$(ARCH)" "MIPS"

libgcc_path     = $(shell $(CC) -EL -msoft-float -print-libgcc-file-name)
libgcc_dir_el   = $(shell dirname "$(libgcc_path)")
libstdc_path    = $(shell $(CC) -EL -msoft-float -print-file-name=libstdc++.a)
libstdc_dir_el  = $(shell dirname "$(libstdc_path)")

#Replace string existing in lds file
LD_REPLACE_VAR  = sed -e's/$$SYMBOL_NETWORK/$(SYMBOL_NETWORK)/g' -e's/$$MODELEXT/$(MODELEXT)/g' -e's/$$LCD/$(LCD)/g' -e's/$$SENSOR/$(SENSOR)/g' -e's/$$LENSDRV/$(LENSDRV)/g' -e's/$$LENSMOTOR/$(LENSMOTOR)/g' -e's/$$GSENSOREXT/$(GSENSOREXT)/g' -e's/$$IPP/$(IPP)/g' $(SCATTER)
#The folder, the working space to fill the full path into lds file
LD_DIR_WORKING_D= $(IMG_BASE_DIR)/Debug/ObjectLds
#Generate the working folder and temp lds file called replace.lds
LD_REPLACE_LDS_D= $(shell mkdir -p $(LD_DIR_WORKING_D)) $(shell $(OBJDUMP) -h $(LIB_D) $(LD_LIB_D) | grep ".version.info" > tmp_awk1) $(shell $(LD_REPLACE_VAR) > $(LD_DIR_WORKING_D)/replace.lds)
#The real lds file replaced of using by linker
LD_PATH_LDS_D   = $(LD_DIR_WORKING_D)/$(basename $(SCATTER))_D.lds
#Here have some steps as following to get a some files explained below,
#Step 1: Generate temp lds file
#Step 2: export the contents of $(LIB_D) into libs.txt
#Step 3: export the contents of $(ALL_OBJ_D) into objs.txt
#Step 4: Give mips-nvt.exe libs.txt, objs.txt and replace.lds to get ld_ext.d, ld_lib.txt, ld_lib_ban.txt and real lds file for linker.
#  Where,
#    ld_ext.d is a decency file depends on .o used in lds file
#    ld_lib_ban is a list of .a files to ban, because linker should use the .a file after extracting .o.
#    real lds file is replaced by full path.
LD_DFILE_D      = $(LD_REPLACE_LDS_D) $(shell echo $(LIB_D) > $(LD_DIR_WORKING_D)/libs.txt ) $(shell echo $(ALL_OBJ_D) > $(LD_DIR_WORKING_D)/objs.txt ) $(shell $(LDNVT) --lds-dst=$(LD_PATH_LDS_D) --lds-dir=$(LD_DIR_WORKING_D) --lds-src=$(LD_DIR_WORKING_D)/replace.lds --libs-src=$(LD_DIR_WORKING_D)/libs.txt --objs-src=$(LD_DIR_WORKING_D)/objs.txt --objs-dir=$(OBJ_DEBUG)) $(LD_DIR_WORKING_D)/ld_ext.d
#Getting the contents of ld_lib.txt
LD_LIB_D        = $(shell cat $(LD_DIR_WORKING_D)/ld_lib.txt 2>>/dev/null)
#Getting the contents of ld_lib_ban.txt
LD_LIB_BAN_D    = $(shell cat $(LD_DIR_WORKING_D)/ld_lib_ban.txt 2>>/dev/null)
tmp_awk2        = $(shell awk -F" " '{print $$2}' tmp_awk1 | awk -F"." '{print $$5}')
tmp_awk3        = $(addsuffix _LIBRARY_VERSION_INFO, $(tmp_awk2))

ifeq "$(MAKECMDGOALS)" "debug"
include $(LD_DFILE_D)
endif

create_link_script = @echo Modify link script for $(2) ...\
	&& echo "EXTERN($(tmp_awk3))" >> $(1) \
	&& cat $(1) | sed s/"^.*NVTWIFI_TAG\*\/"/"\ \ \ \ \ \ \ \ \ ..\/..\/ThirdParty\/ecos-nvtwifi\/lib\/libnvtwifi.a(\ .text*\ .data* \ .rodata* \.rodata1* \.reginfo*)\ \/\*NVTWIFI_TAG\*\/"/ > $(1)_tmp \
	&& mv $(1)_tmp $(1) \
	&& cat $(1) | sed s/"^.*WIFI_ADAPTOR_TAG\*\/"/"\ \ \ \ \ \ \ \ \ ..\/..$(3)(\ .text*\ .data* \ .rodata* \.rodata1* \.reginfo*)\ \/\*WIFI_ADAPTOR_TAG\*\/"/ > $(1)_tmp \
	&& mv $(1)_tmp $(1) \
	&& cat $(1) | sed s/"^.*WIFI_LINK_TAG1\*\/"/"\ \ \ \ \ \ \ \ ..\/..$(4)(\ .text*\ .data* \ .rodata* \.rodata1* \.reginfo*)\ \/\*WIFI_LINK_TAG1\*\/"/ > $(1)_tmp \
	&& mv $(1)_tmp $(1) \
	&& $(if $(5), cat $(1) | sed s/"^.*WIFI_LINK_TAG2\*\/"/"\ \ \ \ \ \ \ \ ..\/..$(5)(\ .text*\ .data*\ .data1*\ .rodata*\ .rodata1* \.reginfo*)\ \/\*WIFI_LINK_TAG2\*\/"/ > $(1)_tmp, echo "") \
	&& $(if $(5), mv $(1)_tmp $(1), echo "") \
	&& $(if $(6), cat $(1) | sed s/"^.*WIFI_LINK_TAG3\*\/"/"\ \ \ \ \ \ \ \ ..\/..$(6)(\ .text*\ .data*\ .data1*\ .rodata*\ .rodata1* \.reginfo*)\ \/\*WIFI_LINK_TAG3\*\/"/ > $(1)_tmp, echo "") \
	&& $(if $(6), mv $(1)_tmp $(1), echo "") \
	&& $(if $(7), cat $(1) | sed s/"^.*WIFI_LINK_TAG4\*\/"/"\ \ \ \ \ \ \ \ ..\/..$(7)(\ .text*\ .data*\ .data1*\ .rodata*\ .rodata1* \.reginfo*)\ \/\*WIFI_LINK_TAG4\*\/"/ > $(1)_tmp, echo "") \
	&& $(if $(7), mv $(1)_tmp $(1), echo "")
	
ifeq "$(NETWORK)" "NETWORK_SDIO_EVB_WIFI_BRCM"
BRCM_CONF = $(subst +, ,$(WIFIBRCMMDL))
BRCM_FW = $(word 1, $(BRCM_CONF))
BRCM_NV = $(word 2, $(BRCM_CONF))
endif

$(IMAGE_D): $(SRC) $(ASM) $(ALL_OBJ_D) $(LIB_D) $(LD_LIB_D)
	$(shell mv *.o $(IMG_BASE_DIR)/Debug/ObjectCode 2>>/dev/null)
	@echo '-o $@ $(ALL_OBJ_D)'> ld_d.tmp
	@echo '--start-group $(LD_LIB_D) $(filter-out $(LD_LIB_BAN_D),$(LIB_D)) --end-group -Bstatic -EL --gc-sections -T $(LD_PATH_LDS_D) -L "$(libgcc_dir_el)" -L"$(libstdc_dir_el)" -lstdc++ -lgcc $(LDMAP_D)' >> ld_d.tmp
ifeq "$(USE_ECOS_KERNEL)" "ON"
ifeq "$(NETWORK)" "NETWORK_SDIO_EVB_WIFI"
	@$(call create_link_script, $(LD_PATH_LDS_D),$(WIFIMDL),\/ThirdParty\/ecos-rtkwifi\/lib\/librtkwifi.a,\/ThirdParty\/devs_eCos-rtl$(WIFIMDL)es\/lib\/lib$(WIFIMDL)wlan.a,\/ThirdParty\/devs_eCos-rtl$(WIFIMDL)es\/lib\/lib$(WIFIMDL)wrapper.a,\/ThirdParty\/rtkcmd\/lib\/librtkcmd.a)
else ifeq "$(NETWORK)" "NETWORK_SDIO_EVB_WIFI_BRCM"
	@$(call create_link_script, $(LD_PATH_LDS_D),$(WIFIMDL),\/ThirdParty\/ecos-brcmwifi\/lib\/libbrcmwifi.a,\/ThirdParty\/devs_eCos-brcm$(WIFIMDL)\/lib\/lib$(WIFIMDL).a,\/ThirdParty\/devs_eCos-brcm$(WIFIBRCMMDL)\/lib\/lib$(BRCM_NV)nv.a,\/ThirdParty\/devs_eCos-brcm$(WIFIBRCMMDL)\/lib\/lib$(BRCM_FW)fw.a,\/ThirdParty\/brcmcmd\/lib\/libbrcmtest.a)
else
	@echo "Linking ..." \
	&& echo "EXTERN($(tmp_awk3))" >> $(LD_PATH_LDS_D)
endif
else
	@echo "Linking ..." \
	&& echo "EXTERN($(tmp_awk3))" >> $(LD_PATH_LDS_D)
endif
	@echo Creating image $@ ... \
	&& $(LD) @ld_d.tmp $(LOG_OPTION) \
	&& $(OBJDUMP) -x -h -t $@ > $(MAP_D) \
	&& $(NM) -n $@ > tmp_sym_d \
	&& grep -v '\( [aNUw] \)\|\(__crc_\)\|\( \$[adt]\)' tmp_sym_d > $(SYM_D) \
	&& rm -f tmp_sym_d \
	&& rm -f ld_d.tmp \
	&& rm -f tmp_awk1

$(BIN_D): $(IMAGE_D)
ifeq "$(MULTI_REGIONS)" "ON"
	@echo Creating executable $@ ... \
	&& $(FE) --gap-fill=0xff -O binary $< $@ \
	&& mv $(IMG_DEBUG)/SPECIAL_RO $(BIN_D)
else
	@echo Creating executable $@ ... \
	&& $(FE) --gap-fill=0xff -O binary $< $@
endif
ifeq "$(LDS_MAP)" "ON"
	@echo Generate LDS map file $(MAP2_D): ok
endif
ifeq "$(AXF_DIS)" "ON"
	@echo Translate AXF $< to disassembly... \
	&& $(OBJDUMP) -D -mmips:isa32r2 $(IMAGE_D) > $(DASM_D)
endif

	@echo Encrypt binary file $@ ... \
	&& $(EBIN) $(EBIN_METHOD) $(BIN_D) $(EBIN_BADDR) $(EBIN_MNAME) $(EBIN_PSTR)
ifeq "$(FW_COMPRESS)" "ON"
ifeq "$(FW_PARTIAL_COMPRESS)" "ON"
	@$(BFC) c lz $(BIN_D) tmp 1 0x30C 0x68 0x78 0x6E $(NAND_BLK_SIZE)\
	&& cp -f tmp $(BIN_D) \
	&& rm -f tmp
else
	@$(BFC) c lz $(BIN_D) tmp 0 0 \
	&& cp -f tmp $(BIN_D) \
	&& rm -f tmp
endif
endif

ifeq "$(COPY_BIN_2_STG)" "ON"
ifneq "$(NVT_STG_PATH)" ""
	@-echo Copy \""$(BIN_D)\"" to $(NVT_STG_PATH) ... \
	&& cp -f $(BIN_D) $(NVT_STG_PATH)$(notdir $(BIN_D))
endif
endif

#Please refer LD_DIR_WORKING_D for getting explanation. Ohters are in the same way.
LD_DIR_WORKING_R= $(IMG_BASE_DIR)/Release/ObjectLds
LD_REPLACE_LDS_R= $(shell mkdir -p $(LD_DIR_WORKING_R)) $(shell $(OBJDUMP) -h $(LIB_R) $(LD_LIB_R) | grep ".version.info" > tmp_awk1) $(shell $(LD_REPLACE_VAR) > $(LD_DIR_WORKING_R)/replace.lds)
LD_PATH_LDS_R   = $(LD_DIR_WORKING_R)/$(basename $(SCATTER))_R.lds
LD_DFILE_R      = $(LD_REPLACE_LDS_R) $(shell echo $(LIB_R) > $(LD_DIR_WORKING_R)/libs.txt ) $(shell echo $(ALL_OBJ_R) > $(LD_DIR_WORKING_R)/objs.txt ) $(shell $(LDNVT) --lds-dst=$(LD_PATH_LDS_R) --lds-dir=$(LD_DIR_WORKING_R) --lds-src=$(LD_DIR_WORKING_R)/replace.lds --libs-src=$(LD_DIR_WORKING_R)/libs.txt --objs-src=$(LD_DIR_WORKING_R)/objs.txt --objs-dir=$(OBJ_RELEASE)) $(LD_DIR_WORKING_R)/ld_ext.d
LD_LIB_R        = $(shell cat $(LD_DIR_WORKING_R)/ld_lib.txt 2>>/dev/null)
LD_LIB_BAN_R    = $(shell cat $(LD_DIR_WORKING_R)/ld_lib_ban.txt 2>>/dev/null)
tmp_awk2        = $(shell awk -F" " '{print $$2}' tmp_awk1 | awk -F"." '{print $$5}')
tmp_awk3        = $(addsuffix _LIBRARY_VERSION_INFO, $(tmp_awk2))

ifeq "$(MAKECMDGOALS)" "release"
include $(LD_DFILE_R)
endif

$(IMAGE_R): $(SRC) $(ASM) $(ALL_OBJ_R) $(LIB_R) $(LD_LIB_R)
	$(shell mv *.o $(IMG_BASE_DIR)/Release/ObjectCode 2>>/dev/null)
	@echo '-o $@ $(ALL_OBJ_R) '> ld_r.tmp
	@echo '--start-group $(LD_LIB_R) $(filter-out $(LD_LIB_BAN_R),$(LIB_R)) --end-group -Bstatic -EL --gc-sections -T $(LD_PATH_LDS_R) -L "$(libgcc_dir_el)" -L"$(libstdc_dir_el)" -lstdc++ -lgcc $(LDMAP_R)' >> ld_r.tmp
ifeq "$(USE_ECOS_KERNEL)" "ON"
ifeq "$(NETWORK)" "NETWORK_SDIO_EVB_WIFI"
	@$(call create_link_script, $(LD_PATH_LDS_R),$(WIFIMDL),\/ThirdParty\/ecos-rtkwifi\/lib\/librtkwifi.a,\/ThirdParty\/devs_eCos-rtl$(WIFIMDL)es\/lib\/lib$(WIFIMDL)wlan.a,\/ThirdParty\/devs_eCos-rtl$(WIFIMDL)es\/lib\/lib$(WIFIMDL)wrapper.a,\/ThirdParty\/rtkcmd\/lib\/librtkcmd.a)
else ifeq "$(NETWORK)" "NETWORK_SDIO_EVB_WIFI_BRCM"
	@$(call create_link_script, $(LD_PATH_LDS_R),$(WIFIMDL),\/ThirdParty\/ecos-brcmwifi\/lib\/libbrcmwifi.a,\/ThirdParty\/devs_eCos-brcm$(WIFIMDL)\/lib\/lib$(WIFIMDL).a,\/ThirdParty\/devs_eCos-brcm$(WIFIBRCMMDL)\/lib\/lib$(BRCM_NV)nv.a,\/ThirdParty\/devs_eCos-brcm$(WIFIBRCMMDL)\/lib\/lib$(BRCM_FW)fw.a,\/ThirdParty\/brcmcmd\/lib\/libbrcmtest.a)
else
	@echo "Linking ..." \
	&& echo "EXTERN($(tmp_awk3))" >> $(LD_PATH_LDS_R)
endif
else
	@echo "Linking ..." \
	&& echo "EXTERN($(tmp_awk3))" >> $(LD_PATH_LDS_R)
endif
	@echo Creating image $@ ... \
	&& $(LD) @ld_r.tmp $(LOG_OPTION) \
	&& $(OBJDUMP) -x -h -t $@ > $(MAP_R) \
	&& $(NM) -n $@ > tmp_sym_r \
	&& grep -v '\( [aNUw] \)\|\(__crc_\)\|\( \$[adt]\)' tmp_sym_r > $(SYM_R) \
	&& rm -f tmp_sym_r \
	&& rm -f ld_r.tmp \
	&& rm -f tmp_awk1

$(BIN_R): $(IMAGE_R)
ifeq "$(MULTI_REGIONS)" "ON"
	@echo Creating executable $@ ... \
	&& $(FE) --gap-fill=0xff -O binary $< $@ \
	&& mv $(IMG_RELEASE)/SPECIAL_RO $(BIN_R)
else
	@echo Creating executable $@ ... \
	&& $(FE) --gap-fill=0xff -O binary $< $@
endif

ifeq "$(LDS_MAP)" "ON"
	@echo Generate LDS map file $(MAP2_R): ok
endif
ifeq "$(AXF_DIS)" "ON"
	@echo Translate AXF $< to disassembly... \
	&& $(OBJDUMP) -D -mmips:isa32r2 $(IMAGE_R) > $(DASM_R)
endif
	@echo Encrypt binary file $@ ... \
	&& $(EBIN) $(EBIN_METHOD) $(BIN_R) $(EBIN_BADDR) $(EBIN_MNAME) $(EBIN_PSTR)
ifeq "$(FW_COMPRESS)" "ON"
ifeq "$(FW_PARTIAL_COMPRESS)" "ON"
	@$(BFC) c lz $(BIN_R) tmp 1 0x30C 0x68 0x78 0x6E $(NAND_BLK_SIZE)\
	&& cp -f tmp $(BIN_R) \
	&& rm -f tmp
else
	@$(BFC) c lz $(BIN_R) tmp 0 0 \
	&& cp -f tmp $(BIN_R) \
	&& rm -f tmp
endif
endif

ifeq "$(COPY_BIN_2_STG)" "ON"
ifneq "$(NVT_STG_PATH)" ""
	@-echo Copy \""$(BIN_R)\"" to $(NVT_STG_PATH) ... \
	&& cp -f $(BIN_R) $(NVT_STG_PATH)$(notdir $(BIN_R))
endif
endif
endif

ifeq "$(ARCH)" "ARM"

$(IMAGE_D): $(SRC) $(ASM) $(ALL_OBJ_D) $(LIB_D)
	@echo Linking ... \
	&& echo Creating image $@ ... \
	&& $(LD) -keep clk_chang* -o $@ $(ALL_OBJ_D) $(LIB_D) -info totals -map -scatter $(SCATTER) -list $(MAP_D) $(LOG_OPTION)

$(BIN_D): $(IMAGE_D)
ifeq "$(MULTI_REGIONS)" "ON"
	@echo Creating executable $@ ... \
	&& $(FE) -output $(IMG_DEBUG) -bin $< \
	&& mv $(IMG_DEBUG)/SPECIAL_RO $(BIN_D)
else
	@echo Creating executable $@ ... \
	&& $(FE) -output $@ -bin $<
endif

#----------------------------------------------------------------------
# AXF to disassmebly code
# Command Line:> make AXF_DIS="ON" release
#----------------------------------------------------------------------
ifeq "$(AXF_DIS)" "ON"
	@echo Translate AXF $< to disassembly... \
	&& $(FE) -c -s -o $(IMG_DEBUG)/outfile.lst $<
endif
	@echo Encrypt binary file $@ ... \
	&& $(EBIN) $(EBIN_METHOD) $(BIN_D) $(EBIN_BADDR) $(EBIN_MNAME) $(EBIN_PSTR)
ifeq "$(FW_COMPRESS)" "ON"
ifeq "$(FW_PARTIAL_COMPRESS)" "ON"
	@$(BFC) c lz $(BIN_D) tmp 1 0x30C 0x68 0x78 0x6E $(NAND_BLK_SIZE)\
	&& cp -f tmp $(BIN_D) \
	&& rm -f tmp
else
	@$(BFC) c lz $(BIN_D) tmp 0 0 \
	&& cp -f tmp $(BIN_D) \
	&& rm -f tmp
endif
endif

ifeq "$(COPY_BIN_2_STG)" "ON"
ifneq "$(NVT_STG_PATH)" ""
	@-echo Copy \""$(BIN_D)\"" to $(NVT_STG_PATH) ... \
	&& cp -f $(BIN_D) $(NVT_STG_PATH)$(notdir $(BIN_D))
endif
endif

$(IMAGE_R): $(SRC) $(ASM) $(ALL_OBJ_R) $(LIB_R)
	@echo Linking ... \
	&& echo Creating image $@ ... \
	&& $(LD) -keep clk_chang* -o $@ $(ALL_OBJ_R) $(LIB_R) -info sizes,totals -map -scatter $(SCATTER) -list $(MAP_R) $(LOG_OPTION)

$(BIN_R): $(IMAGE_R)
ifeq "$(MULTI_REGIONS)" "ON"
	@echo Creating executable $@ ... \
	&& $(FE) -output $(IMG_RELEASE) -bin $< \
	&& mv $(IMG_RELEASE)/SPECIAL_RO $(BIN_R)
else
	@echo Creating executable $@ ... \
	&& $(FE) -output $@ -bin $<
endif

#----------------------------------------------------------------------
# AXF to disassmebly code
# Command Line:> make AXF_DIS="ON" release
#----------------------------------------------------------------------
ifeq "$(AXF_DIS)" "ON"
	@echo Translate AXF $< to disassembly... \
	&& $(FE) -c -s -o $(IMG_RELEASE)/outfile.lst $<
endif
	@echo Encrypt binary file $@ ... \
	&& $(EBIN) $(EBIN_METHOD) $(BIN_R) $(EBIN_BADDR) $(EBIN_MNAME) $(EBIN_PSTR)
ifeq "$(FW_COMPRESS)" "ON"
ifeq "$(FW_PARTIAL_COMPRESS)" "ON"
	@$(BFC) c lz $(BIN_R) tmp 1 0x30C 0x68 0x78 0x6E $(NAND_BLK_SIZE)\
	&& cp -f tmp $(BIN_R) \
	&& rm -f tmp
else
	@$(BFC) c lz $(BIN_R) tmp 0 0 \
	&& cp -f tmp $(BIN_R) \
	&& rm -f tmp
endif
endif

ifeq "$(COPY_BIN_2_STG)" "ON"
ifneq "$(NVT_STG_PATH)" ""
	@-echo Copy \""$(BIN_R)\"" to $(NVT_STG_PATH) ... \
	&& cp -f $(BIN_R) $(NVT_STG_PATH)$(notdir $(BIN_R))
endif
endif
endif
	@cp $(BIN_R) $(IMG_RELEASE)/$(BIN_NAME_T).bin

.PHONY:
rm_log:
ifeq "$(CLEAN_LOG)" "ON"
	@-rm -f $(log_file)
endif

clean:
	@-echo Clean $(basename $(notdir $(IMAGE_R))) ... \
	&& rm -rf --no-preserve-root $(IMG_BASE_DIR) $(log_file) $(lint_file)

ifeq "$(ISOLATE_DEP)" "ON"
all: rm_log
	@make dep
	@make debug
	@make release

rebuild:
	@make clean
	@make dep
	@make debug
	@make release

dep: build_DEP
else
rebuild: clean build_D build_R
endif

debug: rm_log build_D

release: rm_log build_R

rm_lint_log:
	@-rm -f $(lint_file)

lint: rm_lint_log build_LINT

option: make_option_begin

lintclean:
	@-echo Clean Lint $(basename $(notdir $(IMAGE_R))) checking data ... \
	&& rm -rf --no-preserve-root $(LINT_DIR) $(lint_file)

ice:
	@-echo Modifying IceMode_D.bat ...
	sed -i 's/\(^start sde\-insight[\=[:space:]_\.[:alnum:]\-]*\)\(\%CurrentDIR\%\/\).*/\\1\\2$(subst /,\/,$(IMAGE_D))/g' IceMode_D.bat
	@-echo Modifying Debug_D.bat...
	sed -i 's/\(^start sde\-insight[\=[:space:]_\.[:alnum:]\-]*\)\(\%CurrentDIR\%\/\).*/\\1\\2$(subst /,\/,$(IMAGE_D))/g' Debug_D.bat
	@-echo Modifying IceMode_R.bat ...
	sed -i 's/\(^start sde\-insight[\=[:space:]_\.[:alnum:]\-]*\)\(\%CurrentDIR\%\/\).*/\\1\\2$(subst /,\/,$(IMAGE_R))/g' IceMode_R.bat
	@-echo Modifying Debug_R.bat ...
	sed -i 's/\(^start sde\-insight[\=[:space:]_\.[:alnum:]\-]*\)\(\%CurrentDIR\%\/\).*/\\1\\2$(subst /,\/,$(IMAGE_R))/g' Debug_R.bat
	@-echo Modifying LoadCode.ttl ...
	sed -i 's/\(^sendln .\/\)[[:alnum:]\]*\.bin \(.*\)/\\1$(BIN_NAME).bin \\2/g' LoadCode.ttl
	sed -i 's/\(^send .\/\)[[:alnum:]\]*_Data\(.*\)/\\1$(PRJ_NAME)_Data\\2/g' LoadCode.ttl