/**
    Ctrl IMX322LQJ_TVP5150_CARDV_FFFF.

    @file       IPL_CtrlIMX322LQJ_TVP5150_CARDV_FFFF.c
    @ingroup    mISYSAlg
    @note       Nothing (or anything need to be mentioned).

    Copyright   Novatek Microelectronics Corp. 2011.  All rights reserved.
*/
#include "IPL_GC2023P_TVP5150_CARDV_FFFF_Int.h"
#include "IPL_CalRW.h"
#include "../../DevCamCAL/IPL_GC2023P_EVB_FF_CAL_DATA/IPL_Cal_DataPassing_GC2023P_EVB_FF_Int.h"
#include "debug.h"

//note: do not delete
//avoid compiler optimize "weak function"
#define IMX322_OB_OFFSET   0xee
WEAK_DUMMY_CALL(CTRL1, CMD)
WEAK_DUMMY_CALL(CTRL2, D2D)

void IPL_SIESetOB_FCB(UINT32 Id, SieFuncEn *FuncEn, SIE_INTE_EN *InteEn, SIE_UPDATE *Update, SIE_OBAVG *OBAvg, SIE_OBSUB *OBSub)
{
    SENSOR_INFO SenInfo;

    Sensor_GetStatus(IPL_UTI_CONV2_SEN_ID(Id), IPL_AlgGetUIInfo2(Id, IPL_SEL_PRVSENMODE), &SenInfo);

    if (IPL_CtrlGetInfor(Id, IPLCTRL_PRVAUTO_OB_EN) == DISABLE)
    {
        //OBSub->Offset = 0xF8;  //iso100: 0xa0, iso1600: 0x90  //0xE8 @lydia
        OBSub->Offset = IMX322_OB_OFFSET;//0xF0;  //iso100: 0xa0, iso1600: 0x90  //0xE8 @lydia
        //OBSub->Offset = 0xFF;
        OBSub->DtGain = 0x20;
        *FuncEn |= OBSubSelEn;
        *Update |= (SIE_OBOFS_ | SIE_SubFEn);
    }
    else
    {
        OBAvg->StartPix.x = SenInfo.Mode->OB.TopWin[0];
        OBAvg->StartPix.y = SenInfo.Mode->OB.TopWin[1];
        OBAvg->SizeH = (SenInfo.Mode->OB.TopWin[2] - SenInfo.Mode->OB.TopWin[0]);
        OBAvg->SizeV = (SenInfo.Mode->OB.TopWin[3] - SenInfo.Mode->OB.TopWin[1]);
        OBAvg->AvgActThres = 0x80;
        OBSub->Offset = 0;
        OBSub->DtGain = 0x20;
        *FuncEn |= (OBSubSelEn | OBAvgEn);
        *Update |= (SIE_OBOFS_ | SIE_OBAVG_ | SIE_SubFEn);
    }
}

void IPL_SIESetSMR_FCB(UINT32 Id, SieFuncEn *FuncEn, SIE_INTE_EN *InteEn, SIE_UPDATE *Update, UINT32 *SmrActThres, SIE_SMR **Smr)
{
    if (IPL_CtrlGetInfor(Id, IPLCTRL_PRVAUTO_SMR_EN) == ENABLE)
    {
        *SmrActThres = 0x80;
        *FuncEn |= SMREn;
        *Update |= (SIE_SMR_ | SIE_SubFEn);
    }
    else
    {
        *Smr = NULL;
        *FuncEn &= ~SMREn;
        *Update |= SIE_SubFEn;
    }
}

void IPL_SIESetCA_FCB(UINT32 Id, SieFuncEn *FuncEn, SIE_INTE_EN *InteEn, SIE_UPDATE *Update, SIE_CACC *cacc)
{
    if (IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CA_EN) == ENABLE)
    {
        if (IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CA_TYPE) == IPLCTRL_CA_TYPE_32BIT)
        {
            cacc->CAPack = _32BIT;
        }
        else if (IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CA_TYPE) == IPLCTRL_CA_TYPE_64BIT)
        {
            cacc->CAPack = _64BIT;
        }
        cacc->CA_WIN.Start.x = 0;
        cacc->CA_WIN.Start.y = 0;
        cacc->CA_WIN.WinNum_X = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CA_WINXNUM);
        cacc->CA_WIN.WinNum_Y = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CA_WINYNUM);
        cacc->CA_WIN.SizeH = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_PRVCROP_SIZE_H);
        cacc->CA_WIN.SizeV = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_PRVCROP_SIZE_V);
        *FuncEn |= CACCEn;
        *Update |= (SIE_CA_ | SIE_SubFEn);
    }
    else
    {
        *FuncEn &= ~CACCEn;
        *Update |= SIE_SubFEn;
    }
}

void IPL_SIESetCAVIG_FCB(UINT32 Id, SieFuncEn *FuncEn, SIE_UPDATE *Update, SIE_CA_VIG **cavig)
{
    DBG_ERR("CA VIG Setting not ready\r\n");
    *cavig = NULL;
    //*FuncEn |= VIGEn;
    //*Update |= (SIE_VIG_ | SIE_SubFEn);
}

#define harryisgod2
#ifdef harryisgod2

UINT32 EcsTbl[65][65]=
{
#if 1  //50%
0x295aca6a, 0x277a2a4b, 0x24b97624, 0x22a8f609, 0x210879ec, 0x1f4815d7, 0x1e07b9c3, 0x1d176db8, 0x1bf729a9, 0x1b26e59c, 0x1a66b192, 0x19b68186, 0x1916597d, 0x18762d74, 0x17e6096d, 0x1765e167, 0x16e5c95f, 0x1685a95a, 0x16158d54, 0x15e5754f, 0x1565654a, 0x15355147, 0x14f53d43, 0x14c53140, 0x14851d3b, 0x1455153b, 0x14350937, 0x14250535, 0x1404f934, 0x13f4f534, 0x13d4f130, 0x13d4f131, 0x13c4ed31, 0x13c4f131, 0x13c4ed30, 0x13e4f131, 0x13f4f932, 0x1404fd33, 0x14250535, 0x14551135, 0x14651939, 0x1495253a, 0x14e5353f, 0x15154542, 0x15655545, 0x15d56d48, 0x1625814c, 0x16859951, 0x16d5b556, 0x1745d15c, 0x17d5f162, 0x18761569, 0x18f63975, 0x19b6697c, 0x1a469184, 0x1b26c58a, 0x1c36fd95, 0x1d1741a3, 0x1e5785b8, 0x1fb7ddc8, 0x20c845d6, 0x2288b1ee, 0x24592a06, 0x2619a61f, 0x27aa1235,
0x287a7a5b, 0x2679fa3e, 0x2409621c, 0x2218d200, 0x20a85de8, 0x1f27f9d2, 0x1dd7a1c5, 0x1cb759b1, 0x1bd719a2, 0x1ad6dd98, 0x1a16a58c, 0x19867583, 0x18d64579, 0x18261d71, 0x1795f568, 0x1715d564, 0x16d5b95c, 0x16459957, 0x15f58551, 0x15856d4c, 0x15455548, 0x14f54544, 0x14c53140, 0x1485213e, 0x1455153b, 0x14250938, 0x14050135, 0x13e4f534, 0x13c4ed33, 0x13b4e930, 0x1394e930, 0x13a4e530, 0x13a4e52e, 0x1384e530, 0x13a4e52e, 0x13a4e92f, 0x13c4ed30, 0x13d4f131, 0x1404f932, 0x14250134, 0x14450d37, 0x14751d39, 0x14b5293c, 0x14e5353e, 0x15354942, 0x15855d45, 0x15d5714b, 0x16458d4e, 0x16b5a954, 0x1725c55a, 0x17b5e560, 0x18260567, 0x18d62d6e, 0x19765575, 0x1a26817f, 0x1ad6b589, 0x1bb6f195, 0x1cb72da2, 0x1df775b2, 0x1f27cdc1, 0x206825d2, 0x21f895e8, 0x24090202, 0x25e98a1a, 0x27d9ea2d,
0x273a5251, 0x25e9c632, 0x23b93210, 0x2198a9f9, 0x201841dd, 0x1ea7ddcd, 0x1d5785bb, 0x1c973dad, 0x1b56f9a0, 0x1a76b993, 0x19d68989, 0x19365d81, 0x18963176, 0x17f6096e, 0x1765e567, 0x1705c160, 0x1685a158, 0x15f58953, 0x15a5714d, 0x15655d49, 0x14f54545, 0x14b53142, 0x1485213e, 0x1445153a, 0x14250537, 0x13f4fd36, 0x13c4f133, 0x13b4e931, 0x1394e130, 0x1364d92e, 0x1364d92e, 0x1364d52d, 0x1374d52d, 0x1354d52c, 0x1354d52c, 0x1374d92d, 0x1384dd2e, 0x1394e530, 0x13c4e930, 0x13e4f532, 0x14250134, 0x14450d36, 0x14651938, 0x14b5293b, 0x14f53940, 0x15654d44, 0x15a56146, 0x15f57d4b, 0x16659551, 0x16d5b157, 0x1755d15d, 0x17d5f164, 0x1886196a, 0x19164172, 0x19d66d7c, 0x1a66a185, 0x1b66d592, 0x1c57159c, 0x1d775daa, 0x1ea7adbd, 0x1fd809cb, 0x217865e1, 0x2318ddfb, 0x25395610, 0x26d9c227,
0x26da0244, 0x25099230, 0x22f9020b, 0x212881f0, 0x1f681dd9, 0x1e07b5c8, 0x1d4765b4, 0x1c171da9, 0x1b06e199, 0x1a16a58d, 0x19867184, 0x18d64578, 0x18261972, 0x1795f568, 0x1705d163, 0x16b5ad5b, 0x16259555, 0x15c5794e, 0x15656149, 0x15054946, 0x14c53542, 0x1475253d, 0x1445153a, 0x14150537, 0x13d4f534, 0x13b4ed32, 0x1394e130, 0x1384d92e, 0x1364d52c, 0x1344cd2b, 0x1334c92a, 0x1334c92a, 0x1324c52a, 0x1324c929, 0x1314c929, 0x1334c92a, 0x1344d12b, 0x1354d52b, 0x1384dd2d, 0x13b4e52e, 0x13e4f130, 0x1404f933, 0x14350936, 0x14651938, 0x14d5293c, 0x14f53d40, 0x15655144, 0x15b56948, 0x1615854d, 0x16859d53, 0x16f5bd58, 0x1785e160, 0x18260168, 0x18c62d6e, 0x19865577, 0x1a268581, 0x1b36bd8d, 0x1bf6f999, 0x1ce741a5, 0x1e3789b5, 0x1f67e5c5, 0x210845db, 0x2288b1ee, 0x24893204, 0x26198a1a,
0x2619e63b, 0x24b96a22, 0x2268da06, 0x20a85dec, 0x1f17f9d6, 0x1db79dc1, 0x1ca74db1, 0x1b8705a2, 0x1aa6c595, 0x19d69189, 0x1936597f, 0x18863175, 0x17d6096d, 0x1765e165, 0x16d5bd60, 0x16559d57, 0x15e58153, 0x1575694d, 0x15255147, 0x14e53942, 0x1485253e, 0x1445153a, 0x14150537, 0x13d4f533, 0x13a4e930, 0x1384dd2e, 0x1364d52c, 0x1344cd2b, 0x1324c92a, 0x1314c128, 0x1304bd27, 0x1304b926, 0x12f4b927, 0x12f4bd27, 0x12f4b927, 0x1304bd27, 0x1314c128, 0x1334c928, 0x1354d12b, 0x1364d92b, 0x1394e52f, 0x13c4ed30, 0x1404fd33, 0x14450d35, 0x14751d39, 0x14c5313e, 0x15354541, 0x15755945, 0x15d5754b, 0x16459150, 0x16c5ad56, 0x1745cd5c, 0x17d5f163, 0x1876196b, 0x19264173, 0x19f66d7f, 0x1ab6a988, 0x1ba6e595, 0x1cb729a1, 0x1da771b1, 0x1ef7c9c1, 0x206825d2, 0x221895e8, 0x23b90600, 0x25396e10,
0x2539aa32, 0x23b94a15, 0x21d8b1fb, 0x203845e4, 0x1eb7d9cd, 0x1d5781ba, 0x1c3731a9, 0x1b46f19d, 0x1a46ad8f, 0x19967984, 0x18d6497a, 0x18261970, 0x1785f168, 0x1715d161, 0x1685ad5a, 0x16159154, 0x15a5714d, 0x15455947, 0x14e54142, 0x1495293f, 0x1455153b, 0x14150536, 0x13d4f935, 0x1394e932, 0x1364dd2f, 0x1344d12b, 0x1314c92a, 0x12f4c127, 0x12e4b927, 0x12d4b124, 0x12c4b125, 0x12c4ad24, 0x12c4a923, 0x12b4ad23, 0x12b4ad24, 0x12d4b123, 0x12e4b525, 0x1304bd26, 0x1324c128, 0x1334c929, 0x1354d52a, 0x1384e12e, 0x13c4ed30, 0x1404fd33, 0x14450d36, 0x14951d3b, 0x14e5353e, 0x15354941, 0x15a56547, 0x15f57d4b, 0x16859d51, 0x16e5bd59, 0x1785dd60, 0x18260566, 0x18d62d6f, 0x19965979, 0x1a469182, 0x1b36c98f, 0x1c27099c, 0x1d4755aa, 0x1e87adba, 0x1ff809cd, 0x219861e2, 0x2348d9f5, 0x24d93604,
0x24d98224, 0x23490e0d, 0x212899f2, 0x1f9821dd, 0x1e37bdc5, 0x1d1769b4, 0x1be71da7, 0x1af6d598, 0x1a169d8d, 0x19366581, 0x18963577, 0x17e6096d, 0x1755e564, 0x16d5c15f, 0x1665a155, 0x15d58151, 0x1575654b, 0x15054d46, 0x14c53141, 0x14651d3c, 0x14150937, 0x13e4f935, 0x1394ed31, 0x1354dd2e, 0x1334d12b, 0x1314c529, 0x12f4bd28, 0x12d4b525, 0x12c4ad25, 0x12b4a923, 0x12a4a522, 0x1294a122, 0x1294a122, 0x1284a122, 0x1294a122, 0x12a4a922, 0x12a4a923, 0x12d4ad24, 0x12e4b926, 0x1314c127, 0x1344c929, 0x1364d52b, 0x13a4e12e, 0x13c4f131, 0x14050134, 0x14551137, 0x14b5293c, 0x15153d40, 0x15555545, 0x15d5714b, 0x16458d51, 0x16b5b156, 0x1765d15d, 0x17e5f164, 0x18861d6c, 0x19364d76, 0x19f6817f, 0x1ae6b58c, 0x1be6f997, 0x1cd741a7, 0x1e3791b8, 0x1f87edc9, 0x20c849db, 0x22d8b1f0, 0x24391204,
0x24594a1a, 0x22a8ee06, 0x20e879ec, 0x1f2809d6, 0x1dd7a1c0, 0x1ca74db0, 0x1b8705a0, 0x1aa6c195, 0x19c68586, 0x18f6557c, 0x18262172, 0x1785f569, 0x1705d162, 0x1685b159, 0x16158d55, 0x15a5714e, 0x15455948, 0x14d53d42, 0x1485253d, 0x14351139, 0x13f4fd36, 0x13b4ed32, 0x1374dd2e, 0x1334d12c, 0x1314c529, 0x12f4b927, 0x12c4b125, 0x12a4a523, 0x1294a123, 0x12849d21, 0x1264991f, 0x12649920, 0x1264951f, 0x1264951f, 0x1254951f, 0x12749920, 0x12849d20, 0x12a4a521, 0x12c4ad23, 0x12d4b524, 0x1304c126, 0x1324c929, 0x1364d52b, 0x13a4e52f, 0x13e4f531, 0x14250534, 0x14751939, 0x14d5313d, 0x15454942, 0x15a56148, 0x1615814d, 0x1665a153, 0x1705c15a, 0x1795e561, 0x18360d69, 0x18e63971, 0x19b66d7c, 0x1aa6a587, 0x1b96e193, 0x1c972da2, 0x1da77db1, 0x1ef7cdc5, 0x20a835d2, 0x221895ee, 0x2398edfb,
0x23b93e17, 0x2218ce02, 0x205851e8, 0x1ed7e5d2, 0x1d778dbd, 0x1c6739ab, 0x1b46f19e, 0x1a46ad8e, 0x19767985, 0x18a64176, 0x18161170, 0x1765e966, 0x16d5c55e, 0x1665a157, 0x15f58550, 0x1575654b, 0x15054945, 0x14b53140, 0x1455193b, 0x14050535, 0x13c4f132, 0x1384e130, 0x1354d52c, 0x1324c52a, 0x12e4b927, 0x12c4ad24, 0x12a4a522, 0x12849d21, 0x1274991f, 0x1264911e, 0x1244911e, 0x12448d1d, 0x12348d1d, 0x1234891d, 0x12348d1d, 0x12548d1e, 0x1254951e, 0x1274991f, 0x12949d20, 0x12b4a922, 0x12e4b124, 0x1304c126, 0x1334cd29, 0x1374d52c, 0x13b4e92f, 0x13f4fd32, 0x14450d37, 0x14a5253d, 0x15053d3f, 0x15755946, 0x15d5714b, 0x16559151, 0x16d5b556, 0x1765d95d, 0x17f5fd67, 0x18a6296f, 0x19665d78, 0x1a569183, 0x1b46cd91, 0x1c1719a1, 0x1d5761ae, 0x1ed7b9c0, 0x203811d4, 0x21b881e2, 0x2318cdf7,
0x22f90e10, 0x2198adf9, 0x203839e2, 0x1e87d5cb, 0x1d4779b8, 0x1be725a6, 0x1ae6e199, 0x1a169d8c, 0x1946657f, 0x18863177, 0x17b60569, 0x1735d964, 0x16b5b55a, 0x16259555, 0x15b5754d, 0x15455949, 0x14d53d42, 0x1475253e, 0x14350d38, 0x13d4f935, 0x1394e930, 0x1354d52e, 0x1324c92a, 0x12f4b927, 0x12b4ad24, 0x1294a522, 0x12749921, 0x1254911f, 0x12348d1e, 0x1234891c, 0x1214851c, 0x1224811b, 0x1214811b, 0x1214811b, 0x1214811b, 0x1224851b, 0x1234891c, 0x12448d1e, 0x1264951f, 0x12949d20, 0x12a4a922, 0x12d4b124, 0x1314c127, 0x1344d12a, 0x1384dd2d, 0x13c4f130, 0x14150534, 0x14751d39, 0x14d5313e, 0x15454944, 0x15a56949, 0x1625854d, 0x16b5a555, 0x1735c95b, 0x17d5ed64, 0x18861d6a, 0x19365174, 0x1a06817f, 0x1ad6bd8e, 0x1c17059c, 0x1d274daa, 0x1e57a1ba, 0x1f8805cb, 0x21785de1, 0x2288b1ec,
0x22a8ea09, 0x21288df5, 0x1f9819db, 0x1e37b5c5, 0x1d075db4, 0x1b8711a3, 0x1ab6c995, 0x19e68d88, 0x18f6517e, 0x18361d72, 0x1785f168, 0x1705c960, 0x1675a959, 0x15f58551, 0x1575654c, 0x15154945, 0x14a53141, 0x1455193b, 0x13f50136, 0x13b4ed32, 0x1364d92f, 0x1334c92b, 0x12f4bd27, 0x12b4b125, 0x1294a122, 0x12749920, 0x1244911f, 0x12348d1d, 0x1214811c, 0x11f47d1b, 0x11e4791a, 0x11e47919, 0x11e47519, 0x11e47919, 0x11e47918, 0x11f4791a, 0x1204811a, 0x1224851c, 0x12348d1c, 0x1254951e, 0x12849d20, 0x12b4a922, 0x12d4b925, 0x1314c527, 0x1354d12a, 0x1384e52f, 0x13e4f932, 0x14350d37, 0x14b5253b, 0x15054140, 0x15555945, 0x15d5754c, 0x16659552, 0x16f5b558, 0x1785e160, 0x18260968, 0x18f63571, 0x19c6717f, 0x1ab6a988, 0x1ba6f196, 0x1c9739a6, 0x1df785b4, 0x1f47ddc6, 0x20e841db, 0x221899ec,
0x2218da00, 0x20e875f0, 0x1f4805d6, 0x1df7a1be, 0x1ca745b0, 0x1b56f9a0, 0x1a76b592, 0x19867986, 0x18b64179, 0x17f6116f, 0x1765e165, 0x16c5bd5f, 0x16359956, 0x15d5754f, 0x15455d49, 0x14d53d43, 0x1485253e, 0x14250d38, 0x13c4f534, 0x1384e530, 0x1344d12b, 0x1314c529, 0x12d4b526, 0x1294a924, 0x12649920, 0x1244911e, 0x1224851c, 0x1204811a, 0x11f47919, 0x11e47519, 0x11d47118, 0x11d47117, 0x11c46d17, 0x11d46d17, 0x11c47117, 0x11d47118, 0x11e47518, 0x11f47d1a, 0x1204811b, 0x12348d1d, 0x1254911e, 0x1294a120, 0x12c4ad23, 0x12f4b926, 0x1334c929, 0x1384d92c, 0x13c4ed30, 0x14050134, 0x14651938, 0x14d5313e, 0x15555144, 0x15b56949, 0x16458d50, 0x16b5ad56, 0x1765d15d, 0x17f5fd68, 0x18a6296e, 0x19865d7a, 0x1a469d85, 0x1b86dd93, 0x1c6725a2, 0x1da779b2, 0x1f17cdc5, 0x208829d7, 0x21d879e6,
0x21f8a9f5, 0x20a859e6, 0x1ed7f1d2, 0x1da78dbd, 0x1c6739ab, 0x1b36e99b, 0x1a36a98f, 0x19566981, 0x18a63976, 0x17d6016c, 0x1735d563, 0x16a5b15b, 0x16058d53, 0x15a56d4c, 0x15254d47, 0x14b53541, 0x1455193c, 0x14050137, 0x13a4ed32, 0x1354d92e, 0x1314c92b, 0x12e4b927, 0x12a4a924, 0x12849d22, 0x1244911f, 0x1214851c, 0x1204811a, 0x11e47919, 0x11d47118, 0x11b46d17, 0x11a46916, 0x11a46515, 0x11a46515, 0x11a46514, 0x11b46515, 0x11a46915, 0x11c46d16, 0x11d47118, 0x11f47919, 0x1214851a, 0x12348d1c, 0x1274951e, 0x1294a120, 0x12c4b124, 0x1304c126, 0x1354d12a, 0x1394e52e, 0x13e4f933, 0x14450d36, 0x14a5293b, 0x15154141, 0x15756147, 0x16057d4d, 0x1685a153, 0x1715c55c, 0x17d5f164, 0x1886196d, 0x19465176, 0x1a168d84, 0x1b26cd8f, 0x1c2711a0, 0x1d5765b0, 0x1e87b5c0, 0x201821d2, 0x21286de2,
0x21b899f5, 0x20383de4, 0x1e87d5cd, 0x1d2781bb, 0x1bf72da7, 0x1ad6dd99, 0x19e6998d, 0x18f65d81, 0x18562975, 0x1795f968, 0x1705cd61, 0x1665a55a, 0x15e58551, 0x1585654b, 0x14f54545, 0x1495293f, 0x1435113a, 0x13e4f934, 0x1384e530, 0x1344d12c, 0x12f4bd29, 0x12c4b125, 0x1284a123, 0x1254951f, 0x1224891d, 0x1204811b, 0x11d47919, 0x11d46d18, 0x11b46916, 0x11946514, 0x11846114, 0x11845d13, 0x11845d14, 0x11845d14, 0x11845d13, 0x11946114, 0x11946515, 0x11b46915, 0x11d47117, 0x11f47919, 0x1214811a, 0x12448d1d, 0x1264991f, 0x12a4a522, 0x12e4b525, 0x1324c928, 0x1384d92c, 0x13c4f130, 0x14150935, 0x14851d3a, 0x14e5393e, 0x15655545, 0x15d5754b, 0x16559553, 0x16f5bd59, 0x1785e160, 0x1836116a, 0x19264175, 0x19c67980, 0x1ae6bd8e, 0x1be6fd9c, 0x1d1751aa, 0x1e67adbe, 0x1ff801cf, 0x210851df,
0x20c881f2, 0x1fb829e1, 0x1e37c5cb, 0x1ce765b5, 0x1bb715a6, 0x1ab6cd95, 0x19b68d86, 0x18e6517a, 0x18261d71, 0x1785ed68, 0x16d5c55e, 0x16559955, 0x15b57950, 0x15455948, 0x14d53d43, 0x1475213c, 0x14050537, 0x13c4f133, 0x1354dd2e, 0x1304c52a, 0x12d4b927, 0x12a4a924, 0x12649920, 0x12348d1d, 0x1204811c, 0x11e47519, 0x11c46d18, 0x11946916, 0x11846114, 0x11745912, 0x11645912, 0x11645512, 0x11545111, 0x11545111, 0x11645511, 0x11645512, 0x11745d12, 0x11946114, 0x11b46515, 0x11d47117, 0x11f47919, 0x1214851b, 0x1244911d, 0x12849d20, 0x12c4ad23, 0x1314c126, 0x1354d12b, 0x13b4e52f, 0x13f4fd33, 0x14551138, 0x14b52d3d, 0x15354942, 0x15b56948, 0x16258d4f, 0x16c5ad56, 0x1765d55f, 0x18060168, 0x18c63572, 0x19b66d7c, 0x1a66ad8c, 0x1b86f199, 0x1cb73daa, 0x1e0791ba, 0x1f67edc9, 0x208839dd,
0x20886dee, 0x1f8821db, 0x1e07b1c6, 0x1cb755b2, 0x1b9705a2, 0x1a76bd92, 0x19967d85, 0x18b6417b, 0x17e60d6f, 0x1735e165, 0x16b5b55e, 0x16159155, 0x15a5714d, 0x15355148, 0x14c53542, 0x1445193b, 0x13f50135, 0x1394e931, 0x1334d12c, 0x12f4c129, 0x12c4b125, 0x1284a122, 0x1244911f, 0x1214851d, 0x11f47919, 0x11d47118, 0x11a46515, 0x11846114, 0x11745913, 0x11645112, 0x11445110, 0x11444d11, 0x11444d10, 0x11344d10, 0x11444d10, 0x11545111, 0x11545512, 0x11745913, 0x11946114, 0x11b46916, 0x11d47117, 0x11f47d1a, 0x1234891c, 0x1264951f, 0x12a4a522, 0x12e4b525, 0x1334c929, 0x1384d92d, 0x13c4f131, 0x14350936, 0x1495213b, 0x15053d41, 0x15755d47, 0x1605814e, 0x16a5a555, 0x1735cd5d, 0x17d5f566, 0x18862970, 0x1966657b, 0x1a66a189, 0x1b86e597, 0x1c772da3, 0x1dd781b7, 0x1f47d5c6, 0x205825d7,
0x20585dea, 0x1f6811d7, 0x1dd7a5c3, 0x1c5749b1, 0x1b66f9a0, 0x1a56b18e, 0x19667182, 0x18963576, 0x17c6056c, 0x1735d563, 0x1695ad5a, 0x15f58951, 0x1585654b, 0x14f54945, 0x1485293f, 0x1435113a, 0x13c4f534, 0x1364e12f, 0x1314cd2a, 0x12e4b927, 0x1294a923, 0x12549920, 0x1224891d, 0x11f47d1a, 0x11d47119, 0x11a46916, 0x11846114, 0x11745913, 0x11545111, 0x11344d10, 0x1124490f, 0x1124450f, 0x1124410f, 0x1114450e, 0x1124450e, 0x1134490e, 0x11344d10, 0x11545111, 0x11745913, 0x11946113, 0x11b46d16, 0x11e47518, 0x1214811a, 0x12448d1d, 0x12949d20, 0x12c4ad23, 0x1314c127, 0x1354d12b, 0x13c4e930, 0x14150134, 0x1485193a, 0x14d53940, 0x15655545, 0x15e5754b, 0x16659951, 0x1705c15b, 0x1795ed64, 0x18861d6d, 0x19365577, 0x1a368d84, 0x1b26d596, 0x1c571da2, 0x1da775b0, 0x1ef7c5c1, 0x1ff819d2,
0x201851e4, 0x1f17f9d4, 0x1da799c0, 0x1c6741ae, 0x1b36e99b, 0x1a16a58d, 0x19366180, 0x18462974, 0x17a5f96a, 0x1705cd60, 0x1665a558, 0x15d58151, 0x15555d4a, 0x14e53d44, 0x14751d3e, 0x14050537, 0x13b4ed33, 0x1354d92e, 0x1304c52a, 0x12b4b126, 0x1274a123, 0x1244911f, 0x1204811c, 0x11e47919, 0x11c46d18, 0x11946115, 0x11745913, 0x11445111, 0x11344910, 0x1114450e, 0x1114410e, 0x1104410d, 0x11043d0c, 0x11043d0d, 0x11043d0e, 0x1104410e, 0x1114450e, 0x11344d10, 0x11545512, 0x11745d13, 0x11946514, 0x11c47116, 0x11f47919, 0x1234891c, 0x1264951f, 0x12a4a523, 0x1304bd26, 0x1324cd29, 0x1384e12d, 0x13f4f932, 0x14551538, 0x14c5313d, 0x15254944, 0x15d5694a, 0x16459151, 0x16e5b558, 0x1785e562, 0x1836116b, 0x19064575, 0x1a068582, 0x1ae6c990, 0x1c1715a1, 0x1d4765b0, 0x1eb7bdc1, 0x1fb801d2,
0x201835e1, 0x1ed7f1d2, 0x1d7785bd, 0x1c172daa, 0x1af6dd98, 0x1a06998a, 0x19165d7f, 0x18362575, 0x1785f16a, 0x16d5c55e, 0x16459d58, 0x15a57550, 0x15355549, 0x14c53542, 0x14651d3d, 0x13f50136, 0x1394e530, 0x1334d12d, 0x12f4bd2a, 0x12a4ad24, 0x12649922, 0x12248d1d, 0x11f47d1b, 0x11d47118, 0x11946516, 0x11745913, 0x11545512, 0x11344d10, 0x1114450f, 0x11043d0e, 0x10f4390c, 0x10e4390b, 0x10e4350c, 0x10f4390b, 0x10f4390c, 0x10f4390c, 0x1114410c, 0x1124450e, 0x11344d10, 0x11545111, 0x11745d13, 0x11b46915, 0x11d47518, 0x1224851b, 0x1244911d, 0x1294a121, 0x12d4b125, 0x1334c528, 0x1374d92d, 0x13c4f131, 0x14350d36, 0x14b5293c, 0x15254142, 0x15a56549, 0x16258550, 0x16b5ad56, 0x1765d960, 0x18260968, 0x18e63d75, 0x19c67982, 0x1ac6bd8d, 0x1be7059c, 0x1d1751ad, 0x1e67adbd, 0x1f27edcf,
0x1fd831dd, 0x1e67ddd0, 0x1d177dba, 0x1be71da6, 0x1ad6d995, 0x19e6918a, 0x18f6557a, 0x18161d72, 0x1765e568, 0x16b5b95d, 0x16259154, 0x15a5714d, 0x15154946, 0x14952d40, 0x1435113b, 0x13d4f935, 0x1384e130, 0x1324c92b, 0x12d4b528, 0x1284a524, 0x12549120, 0x1214851c, 0x11d47519, 0x11b46917, 0x11845d15, 0x11545513, 0x11344910, 0x1114450e, 0x11043d0d, 0x10e4390c, 0x10e4350b, 0x10d4310a, 0x10d4310a, 0x10c4310a, 0x10d4310a, 0x10d4350b, 0x10e4390c, 0x11043d0c, 0x1124450e, 0x11344d10, 0x11645512, 0x11946113, 0x11d46d17, 0x11f4791a, 0x1234891c, 0x1264991e, 0x12b4a924, 0x1304c126, 0x1364d52b, 0x13c4ed2f, 0x14150535, 0x14851d3b, 0x15053d40, 0x15855d47, 0x16057d4d, 0x1695a555, 0x1735d15c, 0x17f5fd66, 0x18a63172, 0x19a66d7e, 0x1a76a988, 0x1b96f59b, 0x1ce741a9, 0x1e3799b8, 0x1f27e1c9,
0x1f8819dd, 0x1e67cdcd, 0x1d176db8, 0x1ba715a6, 0x1a76c996, 0x19b68588, 0x18c6457c, 0x17f61570, 0x1745e166, 0x1695b55c, 0x16058d53, 0x1585694d, 0x14f54546, 0x1495293f, 0x1415093a, 0x13a4f134, 0x1354dd2f, 0x1314c52a, 0x12c4b126, 0x1274a122, 0x12348d1f, 0x12047d1b, 0x11c47119, 0x11946516, 0x11745913, 0x11444d11, 0x1124450f, 0x1104410d, 0x10e4350c, 0x10d4310a, 0x10c42d09, 0x10b42909, 0x10b42909, 0x10b42909, 0x10b42d09, 0x10b42d09, 0x10d4310b, 0x10f4390b, 0x1104410c, 0x1124490f, 0x11545110, 0x11845d13, 0x11a46915, 0x11d47518, 0x1214811b, 0x1254951e, 0x12a4a522, 0x12f4b925, 0x1334cd2a, 0x13a4e52f, 0x1404fd33, 0x14651938, 0x14e5353f, 0x15655545, 0x15d5754b, 0x16759d54, 0x1715c55d, 0x17d5f565, 0x18a62971, 0x1976617c, 0x1a569d87, 0x1b86e597, 0x1ca73da7, 0x1e0791b8, 0x1f27cdc5,
0x1f680ddb, 0x1e27bdc9, 0x1ce761b5, 0x1b8705a3, 0x1a76bd93, 0x19967985, 0x18a64178, 0x17d6096d, 0x1725d965, 0x1665a95b, 0x15f58551, 0x1565614c, 0x14e53d44, 0x1465213e, 0x13f50538, 0x13a4ed33, 0x1344d52e, 0x12f4bd29, 0x12a4ad24, 0x12549921, 0x1224891d, 0x11d4791a, 0x11b46d17, 0x11746115, 0x11545112, 0x11244910, 0x1104410e, 0x10e4390c, 0x10c4310b, 0x10b42d09, 0x10a42908, 0x10a42907, 0x10942507, 0x10942107, 0x10a42507, 0x10a42908, 0x10b42908, 0x10d4310a, 0x10e4390c, 0x1104410e, 0x11344910, 0x11745512, 0x11946114, 0x11c47117, 0x11f47d1a, 0x1244911d, 0x1284a120, 0x12d4b124, 0x1324c928, 0x1374dd2e, 0x13f4f931, 0x14451137, 0x14c5313e, 0x15454d44, 0x15b5714a, 0x16559551, 0x1705bd5a, 0x17a5ed62, 0x1876216e, 0x19565979, 0x1a369986, 0x1b56e195, 0x1c972da5, 0x1dd781b7, 0x1ed7c1c6,
0x1f2805d7, 0x1e37b1c5, 0x1cb755b4, 0x1b6705a1, 0x1a56b593, 0x19667582, 0x18863578, 0x17b6016d, 0x1705d163, 0x1665a55a, 0x15e57d51, 0x15455949, 0x14d53943, 0x14551d3d, 0x14050137, 0x1384e531, 0x1334d12c, 0x12e4b928, 0x1294a524, 0x12549520, 0x1214851d, 0x11d47519, 0x11a46916, 0x11745914, 0x11444d11, 0x1124450f, 0x10f43d0c, 0x10d4350b, 0x10b42d0a, 0x10a42508, 0x10942107, 0x10842107, 0x10841d06, 0x10841d07, 0x10842106, 0x10942507, 0x10a42907, 0x10c42d09, 0x10e4350a, 0x11043d0c, 0x1124450e, 0x11545110, 0x11845d13, 0x11c46d16, 0x11f47919, 0x1224891c, 0x12849d20, 0x12c4b124, 0x1314c527, 0x1374d92d, 0x13c4f130, 0x14350936, 0x14b52d3e, 0x15254544, 0x15a56949, 0x16558d50, 0x16e5b95a, 0x1785e563, 0x18661d6d, 0x19365177, 0x1a569185, 0x1b46d595, 0x1c9721a3, 0x1da779b4, 0x1ea7b1c6,
0x1f17e5d2, 0x1df7adc3, 0x1c7749b2, 0x1b66f9a0, 0x1a56ad8f, 0x19666982, 0x18663177, 0x17a5f96b, 0x16f5c962, 0x1665a158, 0x15b57951, 0x15255549, 0x14c53142, 0x1445153c, 0x13d4f936, 0x1374e530, 0x1314cd2c, 0x12c4b528, 0x1284a123, 0x1234911f, 0x1204811c, 0x11c47119, 0x11846116, 0x11545513, 0x11244911, 0x1104410e, 0x10e4350c, 0x10b42d0a, 0x10a42508, 0x10842107, 0x10841d06, 0x10741905, 0x10641904, 0x10741905, 0x10741905, 0x10841d06, 0x10942107, 0x10a42907, 0x10c43109, 0x10e4390b, 0x1114410e, 0x11444d10, 0x11745912, 0x11946914, 0x11e47518, 0x1214851b, 0x1264991e, 0x12a4a923, 0x1304c127, 0x1354d52b, 0x13c4ed30, 0x14150535, 0x1485253b, 0x15054142, 0x15856148, 0x16258551, 0x16d5b158, 0x1775dd60, 0x1846116d, 0x19264976, 0x1a068d84, 0x1af6cd92, 0x1c3719a1, 0x1d876db2, 0x1e87adc0,
0x1eb7e5d4, 0x1dd7a1c1, 0x1c6745ae, 0x1b46f1a0, 0x1a26a58e, 0x19366583, 0x18862d75, 0x1795f96a, 0x16d5c560, 0x16459957, 0x15b57150, 0x15254d48, 0x14a53141, 0x1445113a, 0x13c4f935, 0x1364dd2f, 0x1314c52a, 0x12b4b126, 0x12749d22, 0x12248d1e, 0x11e47d1b, 0x11b46d18, 0x11846114, 0x11545111, 0x11244510, 0x10f4390d, 0x10d4310b, 0x10b42909, 0x10942108, 0x10841d06, 0x10741906, 0x10541504, 0x10641504, 0x10541503, 0x10641504, 0x10741904, 0x10741d06, 0x10942107, 0x10b42d08, 0x10d4350a, 0x11043d0c, 0x1124490f, 0x11545511, 0x11946514, 0x11d47117, 0x1224811a, 0x1254911d, 0x12a4a522, 0x12f4b925, 0x1344d12a, 0x13a4e92f, 0x14150135, 0x14751d3c, 0x15053d41, 0x15755d47, 0x16058550, 0x16c5a957, 0x1765d560, 0x18360d6b, 0x18f64177, 0x19f68584, 0x1ad6c590, 0x1c170da0, 0x1d4765b0, 0x1e57adbb,
0x1ed7e1cd, 0x1d8795c1, 0x1c573dad, 0x1b26ed9d, 0x1a069d8c, 0x19265d81, 0x18362975, 0x1775f16a, 0x16d5bd5f, 0x16259957, 0x15a56d4e, 0x15054946, 0x14852940, 0x1425113b, 0x13c4f134, 0x1354d92f, 0x12f4c12a, 0x12a4ad25, 0x12649921, 0x1214891d, 0x11e4791a, 0x11946917, 0x11645d14, 0x11444d12, 0x1114450f, 0x10e4390d, 0x10c42d0b, 0x10a42908, 0x10841d07, 0x10641905, 0x10641504, 0x10541104, 0x10441103, 0x10441103, 0x10441103, 0x10541504, 0x10641904, 0x10841d07, 0x10a42508, 0x10c42d0a, 0x10f4390c, 0x1114450e, 0x11545110, 0x11945d13, 0x11c46d16, 0x11f47d19, 0x12448d1d, 0x1294a121, 0x12d4b525, 0x1334cd2a, 0x13a4e12f, 0x1404fd33, 0x1465193a, 0x14e5393f, 0x15655946, 0x15e57d4e, 0x1685a957, 0x1735d55e, 0x1826056a, 0x18c64175, 0x19e67d81, 0x1ad6bd8e, 0x1be7099e, 0x1d275dae, 0x1e37a1bb,
0x1ea7d1cd, 0x1db795be, 0x1c2735ad, 0x1b26e59c, 0x1a169d8d, 0x18f6597f, 0x18261d73, 0x1785ed69, 0x16b5bd5e, 0x16159155, 0x15856d4e, 0x14f54545, 0x14852540, 0x1415093a, 0x13b4f133, 0x1344d52f, 0x12f4c12a, 0x12a4ad25, 0x12549921, 0x1214851d, 0x11d4751a, 0x11946917, 0x11645914, 0x11344d11, 0x1104410e, 0x10e4350c, 0x10b42909, 0x10942107, 0x10741906, 0x10641504, 0x10441104, 0x10440d03, 0x10440d02, 0x10340902, 0x10440d02, 0x10541103, 0x10541504, 0x10741d06, 0x10942107, 0x10c42d09, 0x10f4390b, 0x1114410d, 0x11444d10, 0x11745d12, 0x11b46916, 0x11e4791a, 0x12348d1c, 0x12749d20, 0x12d4b525, 0x1334c92a, 0x1384e12e, 0x13e4f933, 0x14551538, 0x14d53140, 0x15555545, 0x15d5794c, 0x16659d56, 0x1735cd5f, 0x17f60169, 0x18d63575, 0x19c67581, 0x1ad6b98e, 0x1be7059d, 0x1d0751ad, 0x1e2799ba,
0x1e67d1d0, 0x1d578dc0, 0x1c3731aa, 0x1ae6e19b, 0x19f6998a, 0x18f6557f, 0x18261d72, 0x1755e568, 0x16b5bd5e, 0x16159155, 0x1585654d, 0x14f54545, 0x1475253e, 0x14050939, 0x13a4ed32, 0x1344d52d, 0x12e4bd29, 0x1294a925, 0x12449520, 0x1204851d, 0x11d4711a, 0x11946516, 0x11645513, 0x11244910, 0x11043d0e, 0x10d4350c, 0x10a42909, 0x10842107, 0x10641905, 0x10541504, 0x10340d03, 0x10240902, 0x10240901, 0x10240902, 0x10340902, 0x10340d03, 0x10541103, 0x10641905, 0x10842107, 0x10b42908, 0x10d4350b, 0x11043d0c, 0x11344d0f, 0x11645912, 0x11a46515, 0x11e47919, 0x1224891c, 0x12849d20, 0x12c4b124, 0x1314c528, 0x1384dd2e, 0x13e4f532, 0x14451138, 0x14c5313e, 0x15455145, 0x15d5754c, 0x16759d55, 0x1725c95c, 0x17e5fd68, 0x18a63573, 0x1986757e, 0x1aa6b58d, 0x1bb6fd9b, 0x1d174daa, 0x1df799b8,
0x1e67c9cd, 0x1d5781be, 0x1c172dab, 0x1ad6dd98, 0x19d69188, 0x18d6557d, 0x18261971, 0x1765e568, 0x1685b55f, 0x16058d55, 0x1565654b, 0x14f54146, 0x1465213f, 0x13f50538, 0x1394e932, 0x1334d12d, 0x12d4b928, 0x1284a924, 0x12449120, 0x1204811b, 0x11c47119, 0x11846115, 0x11545113, 0x11144510, 0x10f4390d, 0x10c4310b, 0x10a42908, 0x10741d06, 0x10641505, 0x10441103, 0x10240902, 0x10240901, 0x10140501, 0x10240501, 0x10140501, 0x10340d02, 0x10441103, 0x10641504, 0x10841d06, 0x10a42908, 0x10c43109, 0x11043d0c, 0x11344910, 0x11645511, 0x11946514, 0x11d47518, 0x1214851c, 0x1274991f, 0x12b4ad23, 0x1314c128, 0x1364d92d, 0x13d4f531, 0x14450d37, 0x14b52d3e, 0x15354d45, 0x15c5714b, 0x16659955, 0x1715c55d, 0x17c5f967, 0x18963172, 0x1986697e, 0x1a76ad8a, 0x1bb6f999, 0x1ce74dad, 0x1e0785b7,
0x1e57c9cd, 0x1d5781bd, 0x1be725aa, 0x1ae6d598, 0x19c6918a, 0x18d6517e, 0x17f61972, 0x1735e166, 0x1695b15d, 0x16058554, 0x1565614c, 0x14e54144, 0x14751d3e, 0x13e50138, 0x1384e531, 0x1324cd2d, 0x12d4b928, 0x1284a124, 0x12349120, 0x11f4811c, 0x11b46d19, 0x11846115, 0x11445113, 0x11044510, 0x10e4390c, 0x10b42d0a, 0x10942508, 0x10741d06, 0x10541504, 0x10340d03, 0x10240902, 0x10140501, 0x10140500, 0x10140501, 0x10140500, 0x10240502, 0x10440d03, 0x10541103, 0x10741d05, 0x10942507, 0x10c4310a, 0x10f43d0c, 0x1124490e, 0x11545512, 0x11946515, 0x11d47118, 0x1204811b, 0x1264951f, 0x12b4ad22, 0x1314c127, 0x1354d52c, 0x13c4f131, 0x14350d37, 0x14b52d3d, 0x15254944, 0x15b56d4b, 0x16559955, 0x1705c15d, 0x17c5f167, 0x18962d72, 0x1976697f, 0x1a86a98c, 0x1ba6f598, 0x1d0745ab, 0x1da795b7,
0x1e67c5c8, 0x1d577dba, 0x1bd721a9, 0x1ad6d599, 0x19c68d89, 0x18e64d7d, 0x17f61171, 0x1735e166, 0x1685b15c, 0x15d58553, 0x15455d4a, 0x14e53d44, 0x14551d3d, 0x13f50137, 0x1374e532, 0x1324cd2c, 0x12d4b928, 0x1284a123, 0x12248d20, 0x11e47d1b, 0x11b46d19, 0x11745d15, 0x11444d12, 0x11044510, 0x10e4350d, 0x10b42d0b, 0x10942108, 0x10741906, 0x10541104, 0x10440903, 0x10240502, 0x10140101, 0x10040101, 0x10040100, 0x10140100, 0x10140901, 0x10340d02, 0x10441103, 0x10741905, 0x10842507, 0x10b42d09, 0x10f4390c, 0x1114450e, 0x11545511, 0x11946113, 0x11c47118, 0x1204811a, 0x1264951e, 0x12a4a924, 0x12f4bd26, 0x1354d52c, 0x13c4f131, 0x14350936, 0x1495293d, 0x15154542, 0x15b56d4a, 0x16459553, 0x1705bd5c, 0x17a5f164, 0x18962970, 0x1986657c, 0x1a46a989, 0x1ba6f19b, 0x1ce73daa, 0x1db781bb,
0x1e67c5c6, 0x1d1779bb, 0x1c1721a7, 0x1ab6d598, 0x19b68d88, 0x18e6497b, 0x17f6156f, 0x1735dd67, 0x1685ad5b, 0x15f58552, 0x1555614d, 0x14e53d45, 0x14551d3d, 0x13e4fd38, 0x1384e532, 0x1314cd2c, 0x12d4b527, 0x1284a124, 0x12248d1f, 0x11e47d1c, 0x11a46d18, 0x11745d15, 0x11345112, 0x1104410f, 0x10e4350c, 0x10b42d0b, 0x10942108, 0x10641906, 0x10541104, 0x10240903, 0x10140501, 0x10140101, 0x10040101, 0x10040100, 0x10040101, 0x10140501, 0x10340902, 0x10541103, 0x10741905, 0x10842107, 0x10c42d09, 0x10e4350c, 0x1114450e, 0x11545111, 0x11846114, 0x11d47117, 0x1214811a, 0x1254951e, 0x12a4a922, 0x12f4bd27, 0x1354d52b, 0x13c4f132, 0x14350936, 0x1485293d, 0x15254543, 0x15c56d4a, 0x16559553, 0x16e5c15b, 0x17b5f165, 0x18962d71, 0x1976657e, 0x1a66a58a, 0x1b96f199, 0x1ce73daa, 0x1dd781b5,
0x1e37bdc9, 0x1d477dba, 0x1bf721aa, 0x1ae6d197, 0x19b68d88, 0x18d6497d, 0x17d61171, 0x1735dd66, 0x1685ad5b, 0x15d58553, 0x15655d4b, 0x14d53944, 0x14751d3d, 0x13e50138, 0x1384e531, 0x1324c92c, 0x12d4b527, 0x1274a123, 0x12348d20, 0x11f4791b, 0x11a46918, 0x11645d15, 0x11344d11, 0x1104410f, 0x10d4350d, 0x10b42d0b, 0x10942107, 0x10641906, 0x10441104, 0x10240902, 0x10140501, 0x10040100, 0x10040101, 0x10040100, 0x10040100, 0x10140502, 0x10240902, 0x10441103, 0x10641904, 0x10942107, 0x10b42d09, 0x10e4390c, 0x1114450e, 0x11545111, 0x11846114, 0x11c46d17, 0x1204811a, 0x1244951f, 0x12a4a923, 0x12f4bd27, 0x1354d52b, 0x13c4f131, 0x14250536, 0x1485253d, 0x15254543, 0x15a5694a, 0x16459553, 0x1705bd5c, 0x17d5f165, 0x1886256e, 0x1956617d, 0x1a66a189, 0x1b96e999, 0x1cb73daa, 0x1db785b5,
0x1e27b1c8, 0x1d1779bb, 0x1bd725a7, 0x1ac6cd98, 0x19c68d88, 0x18c6497c, 0x17f61571, 0x1735dd65, 0x1685b15c, 0x15e58155, 0x1565614b, 0x14d53944, 0x14551d3e, 0x13f4fd38, 0x1374e532, 0x1314c92c, 0x12c4b528, 0x1284a123, 0x12348d20, 0x11e47d1c, 0x11a46d19, 0x11745d15, 0x11344d12, 0x1104410f, 0x10d4350d, 0x10b42d0a, 0x10842108, 0x10641506, 0x10441104, 0x10240902, 0x10140501, 0x10040101, 0x10040101, 0x10040101, 0x10040101, 0x10140501, 0x10340902, 0x10441103, 0x10641505, 0x10942107, 0x10b42d09, 0x10e4390c, 0x1114450e, 0x11545111, 0x11846114, 0x11c47117, 0x1204811b, 0x1254951e, 0x1294a523, 0x12f4bd27, 0x1344d52c, 0x13b4ed31, 0x14250936, 0x1495253d, 0x15154544, 0x15a5694b, 0x16359153, 0x16f5bd5b, 0x17a5f164, 0x1896296f, 0x1956617c, 0x1a66a58a, 0x1b86e998, 0x1cd73da9, 0x1db781b4,
0x1e27bdc6, 0x1d2779ba, 0x1bf71da7, 0x1ab6d598, 0x19c68d88, 0x18b6497d, 0x17f61170, 0x1745d966, 0x1685ad5d, 0x15f58555, 0x1555614d, 0x14d53d44, 0x1455193e, 0x13e50138, 0x1384e532, 0x1324c92c, 0x12c4b528, 0x1284a123, 0x12348d20, 0x11e47d1c, 0x11a46919, 0x11745d15, 0x11344d12, 0x1104410f, 0x10d4350c, 0x10b4290a, 0x10842107, 0x10541906, 0x10541104, 0x10240903, 0x10140501, 0x10040101, 0x10040100, 0x10040101, 0x10140101, 0x10140501, 0x10340902, 0x10541104, 0x10741905, 0x10a42107, 0x10b42d09, 0x10f4390c, 0x1114450e, 0x11545111, 0x11846114, 0x11c47118, 0x1204811b, 0x1254951f, 0x1294a923, 0x12f4bd27, 0x1354d52b, 0x13c4ed31, 0x14250936, 0x1495253c, 0x15254943, 0x15a5694b, 0x16259552, 0x16d5bd5b, 0x17b5f166, 0x1896296f, 0x1976657c, 0x1a56a58a, 0x1b96ed9b, 0x1cb73daa, 0x1da781b4,
0x1e57bdc6, 0x1d477dbd, 0x1bf721aa, 0x1ac6d597, 0x19d68d89, 0x18b64d7c, 0x17f61171, 0x1735e166, 0x1695b15e, 0x15f58553, 0x15455d4c, 0x14d53d45, 0x14551d3e, 0x13e50138, 0x1374e932, 0x1324c92c, 0x12c4b529, 0x1284a123, 0x12248d20, 0x11f47d1c, 0x11a46d18, 0x11745d16, 0x11345113, 0x1104410f, 0x10e4350d, 0x10b42d0b, 0x10842109, 0x10741906, 0x10441105, 0x10240d03, 0x10140502, 0x10040101, 0x10040100, 0x10040101, 0x10140501, 0x10140502, 0x10340d02, 0x10541104, 0x10741906, 0x10942507, 0x10c42d09, 0x10e4390c, 0x1114450e, 0x11545111, 0x11846114, 0x11c47118, 0x1204811b, 0x1254951f, 0x12a4a522, 0x12f4bd27, 0x1354d52c, 0x13b4ed31, 0x14350936, 0x1485293c, 0x15154542, 0x15a5694a, 0x16459553, 0x16f5bd5c, 0x17a5ed66, 0x18762d72, 0x1976657d, 0x1a66a58a, 0x1b86ed99, 0x1cb741aa, 0x1dd789b7,
0x1e67cdc8, 0x1d7781bd, 0x1be725aa, 0x1ad6d598, 0x19c68d8a, 0x18e6517c, 0x17f61571, 0x1725e166, 0x1685b15c, 0x16058956, 0x1555614d, 0x14d53d45, 0x14651d3e, 0x13e50139, 0x1394e533, 0x1334cd2d, 0x12d4b929, 0x1284a124, 0x12248d20, 0x11f47d1d, 0x11b47119, 0x11746116, 0x11445113, 0x11144110, 0x10e4390d, 0x10b42d0b, 0x10942509, 0x10741907, 0x10541105, 0x10340d03, 0x10240502, 0x10140502, 0x10040101, 0x10040101, 0x10140502, 0x10240902, 0x10340d03, 0x10541504, 0x10741d06, 0x10a42508, 0x10c4310b, 0x10f4390d, 0x1114450f, 0x11545512, 0x11946114, 0x11c47118, 0x1214811b, 0x1264951f, 0x1294a922, 0x1304c127, 0x1354d52b, 0x13b4f131, 0x14350937, 0x1495293c, 0x15154944, 0x15a56d4b, 0x16659153, 0x1705c15a, 0x17d5f166, 0x18862972, 0x1966657d, 0x1a86ad8c, 0x1ba6f199, 0x1ca741aa, 0x1dd781b5,
0x1e87c9c9, 0x1d7789c1, 0x1c172dab, 0x1af6d598, 0x19e6918a, 0x18d6517d, 0x18161572, 0x1745e568, 0x1685b55c, 0x16058d54, 0x1565654d, 0x14f54146, 0x14652540, 0x13f50539, 0x13a4e933, 0x1334d12d, 0x12e4b929, 0x1294a525, 0x12449121, 0x11f4811d, 0x11c47119, 0x11846116, 0x11445113, 0x11144510, 0x10e4390f, 0x10c4310c, 0x10942509, 0x10741d08, 0x10541506, 0x10340d04, 0x10240903, 0x10240502, 0x10140502, 0x10140501, 0x10140502, 0x10240903, 0x10441104, 0x10641505, 0x10741d07, 0x10a42508, 0x10c4310b, 0x10f43d0d, 0x1114490f, 0x11545513, 0x11946515, 0x11d47519, 0x1214851b, 0x12549520, 0x12a4a923, 0x1304c127, 0x1344d92c, 0x13c4f132, 0x14350d37, 0x14a5293d, 0x15354943, 0x15a56d4b, 0x16559953, 0x16f5c55b, 0x17c5f565, 0x18862d70, 0x1966697c, 0x1a76ad8c, 0x1b96f599, 0x1cd741ab, 0x1dd785b7,
0x1ea7d5cd, 0x1d8785be, 0x1c272dab, 0x1af6dd9b, 0x19d6918a, 0x18f6557c, 0x18261972, 0x1755e167, 0x1695b95e, 0x16158d55, 0x1585654f, 0x14f54146, 0x14652140, 0x1405053a, 0x1394e934, 0x1334d12f, 0x12e4bd2a, 0x1294a525, 0x12449121, 0x1204811e, 0x11c46d1a, 0x11846116, 0x11545515, 0x11144911, 0x10f43d0f, 0x10c4310c, 0x1094290a, 0x10841d08, 0x10641907, 0x10541105, 0x10340d03, 0x10240902, 0x10140902, 0x10240502, 0x10240903, 0x10440d03, 0x10441105, 0x10641906, 0x10841d08, 0x10a42909, 0x10d4310c, 0x10f43d0d, 0x11244910, 0x11645913, 0x11946516, 0x11d47519, 0x1214851d, 0x12549920, 0x12b4ad23, 0x1314c127, 0x1374d92d, 0x13d4f131, 0x14451136, 0x14b5293d, 0x15254d44, 0x15b5714d, 0x16559953, 0x1705c55d, 0x17b5f968, 0x18963172, 0x1986697f, 0x1aa6ad8d, 0x1b96fd98, 0x1ce74daa, 0x1e078db8,
0x1e67cdcd, 0x1d7789be, 0x1c372dae, 0x1ae6e19c, 0x19e6918a, 0x18f6597f, 0x18261973, 0x1765e968, 0x16b5b55f, 0x16058d55, 0x1575694c, 0x14f54547, 0x14752541, 0x1405093b, 0x13a4f136, 0x1344d530, 0x12f4c12b, 0x12a4a925, 0x12549522, 0x1204851e, 0x11d4711a, 0x11946518, 0x11645514, 0x11244912, 0x11043d0f, 0x10d4310d, 0x10a4290a, 0x10842109, 0x10641907, 0x10541506, 0x10441104, 0x10340d03, 0x10340903, 0x10240d03, 0x10340d03, 0x10441104, 0x10541504, 0x10741d06, 0x10842107, 0x10b42909, 0x10d4350c, 0x10f4410e, 0x11344d10, 0x11745913, 0x11a46916, 0x11e47919, 0x1224891c, 0x12749921, 0x12b4ad24, 0x1304c529, 0x1364dd2e, 0x13d4f532, 0x14451139, 0x14c5313e, 0x15355144, 0x15d5754b, 0x16759d53, 0x1725c55d, 0x17d5fd68, 0x18963574, 0x19966d80, 0x1aa6b58e, 0x1bd7019b, 0x1d074dab, 0x1e0791bb,
0x1ea7d9d0, 0x1da789c0, 0x1c3735b1, 0x1b06e59d, 0x19f6998e, 0x19165980, 0x18261d75, 0x1765ed69, 0x16c5bd60, 0x16259558, 0x15856d4e, 0x15054d48, 0x14852941, 0x14250d3b, 0x13a4ed37, 0x1354d930, 0x12f4c12b, 0x12a4ad28, 0x12549923, 0x12148920, 0x11d4791c, 0x11946518, 0x11745916, 0x11344d13, 0x11044110, 0x10e4350e, 0x10b42d0c, 0x1094250a, 0x10741d07, 0x10641906, 0x10541506, 0x10441104, 0x10440d03, 0x10440d03, 0x10441104, 0x10641505, 0x10641906, 0x10841d07, 0x10a42509, 0x10c42d0a, 0x10e4390c, 0x1114450f, 0x11445111, 0x11745913, 0x11b46917, 0x11e4791b, 0x1234891d, 0x12649d21, 0x12c4b125, 0x1324c929, 0x1374dd2f, 0x13e4f934, 0x1455113a, 0x14c5353f, 0x15555546, 0x15c5794d, 0x1665a555, 0x1725cd5f, 0x17f60168, 0x18c63974, 0x19b67981, 0x1ac6bd90, 0x1bd709a0, 0x1d2751b0, 0x1e2795bb,
0x1e87d9d2, 0x1d7791c3, 0x1c373db0, 0x1b26e59e, 0x1a06a58f, 0x19265d7f, 0x18462575, 0x1775f56a, 0x16c5c161, 0x1635955a, 0x15a57151, 0x15054d49, 0x14a52d44, 0x1435113c, 0x13c4f537, 0x1354d931, 0x1304c52c, 0x12a4b127, 0x12649d24, 0x12248921, 0x11d4791b, 0x11a46d19, 0x11745d16, 0x11445113, 0x11144511, 0x10f4390f, 0x10c4310c, 0x10a4290a, 0x10942108, 0x10741908, 0x10541506, 0x10541505, 0x10441105, 0x10441104, 0x10441505, 0x10641906, 0x10741d06, 0x10842108, 0x10a42909, 0x10c4310b, 0x10e4390c, 0x1114450f, 0x11545111, 0x11745d14, 0x11a46d17, 0x11f47d1a, 0x12348d1e, 0x1294a122, 0x12c4b526, 0x1314cd2a, 0x1384e12f, 0x13f4fd34, 0x1455193a, 0x14d53541, 0x15655947, 0x15f57d4f, 0x1685a557, 0x1745cd60, 0x1806056a, 0x18e64176, 0x19c67983, 0x1ad6bd90, 0x1bf70da1, 0x1d2761b0, 0x1ea79dbb,
0x1eb7e5d0, 0x1dd7a5c3, 0x1c9745b2, 0x1b26f1a1, 0x1a16a590, 0x19466584, 0x18562976, 0x17a5f96d, 0x16e5c962, 0x16559d59, 0x15a57552, 0x1525514a, 0x14b53143, 0x1435153d, 0x13c4f938, 0x1374e132, 0x1314c92d, 0x12c4b529, 0x1274a125, 0x12348d20, 0x11f47d1d, 0x11b46d1a, 0x11846117, 0x11545515, 0x11244912, 0x10f43d0f, 0x10d4350d, 0x10b42d0b, 0x1094250a, 0x10842108, 0x10741d07, 0x10641906, 0x10541506, 0x10641506, 0x10741906, 0x10741d07, 0x10842107, 0x10a42509, 0x10b42d0a, 0x10d4350c, 0x1104410e, 0x11244911, 0x11545513, 0x11946516, 0x11c47118, 0x1214811c, 0x1244911f, 0x1294a523, 0x12e4b926, 0x1334cd2b, 0x13a4e930, 0x14050135, 0x1465193c, 0x14e53d42, 0x15755d49, 0x1605814f, 0x1695ad59, 0x1735d561, 0x1816096b, 0x18e64175, 0x19b67d85, 0x1ae6c591, 0x1c2711a1, 0x1d7765b2, 0x1e67a5c3,
0x1f27f9d0, 0x1e07adc6, 0x1ca74db2, 0x1b56f9a2, 0x1a36b590, 0x19566d85, 0x18863178, 0x17a6016d, 0x1705cd64, 0x1655a15a, 0x15d57953, 0x1545554a, 0x14c53544, 0x1455193d, 0x13e4fd39, 0x1384e533, 0x1324cd2f, 0x12c4b92a, 0x1294a126, 0x12449121, 0x1204811e, 0x11c4711b, 0x11946518, 0x11645515, 0x11344d13, 0x11144110, 0x10e4390d, 0x10c4310d, 0x10b4290a, 0x10942509, 0x10842108, 0x10741d07, 0x10741907, 0x10741907, 0x10741d07, 0x10742107, 0x10942508, 0x10b4290a, 0x10c4310c, 0x10e4390c, 0x1114410f, 0x11344d12, 0x11645914, 0x11a46916, 0x11d47519, 0x1214851d, 0x12549520, 0x12a4a924, 0x12f4bd28, 0x1344d12d, 0x13a4e931, 0x14050537, 0x1485213c, 0x14f54142, 0x15756549, 0x1615854f, 0x16b5ad5a, 0x1765dd63, 0x1826156d, 0x19064978, 0x19e68586, 0x1af6cd96, 0x1c271da3, 0x1d7771b1, 0x1ea7adc3,
0x1f4805d7, 0x1e27b5c8, 0x1cb755b5, 0x1b6705a3, 0x1a66bd93, 0x19867986, 0x1896397a, 0x17c6056f, 0x1715d165, 0x1665a55b, 0x15c58153, 0x1555614e, 0x14e53d45, 0x14651d40, 0x13f5053a, 0x1384e934, 0x1334d530, 0x12e4bd2a, 0x1294a927, 0x12549522, 0x1214891f, 0x11d4791b, 0x11a46919, 0x11745917, 0x11445114, 0x11144512, 0x10f43d0f, 0x10e4350d, 0x10b4310c, 0x10a4290b, 0x10942509, 0x10942109, 0x10842108, 0x10842108, 0x10942109, 0x10942509, 0x10b4290a, 0x10c42d0b, 0x10e4350d, 0x10f43d0e, 0x11144910, 0x11545112, 0x11746115, 0x11b46d18, 0x11f47d1a, 0x1224891e, 0x12649d21, 0x12b4ad25, 0x1304c12a, 0x1354d92d, 0x13c4f133, 0x14250937, 0x1495293e, 0x15054545, 0x1595694b, 0x16158d51, 0x16d5b55b, 0x1775e164, 0x18361d6e, 0x19065179, 0x1a169186, 0x1b06d598, 0x1c6725a7, 0x1da779b7, 0x1eb7c1c3,
0x1f6811d7, 0x1e37c1c9, 0x1d0765b7, 0x1b970da5, 0x1a86c596, 0x19a68185, 0x1896457c, 0x17d60973, 0x1725d967, 0x1685ad5d, 0x15f58955, 0x15655d4e, 0x14f54146, 0x14652541, 0x1415093b, 0x13a4ed36, 0x1354d931, 0x12f4c12c, 0x12b4ad27, 0x12649d23, 0x12148d20, 0x11e4791d, 0x11b46d1a, 0x11846118, 0x11545514, 0x11344d13, 0x11044110, 0x10f4390f, 0x10d4350d, 0x10c42d0c, 0x10b4290b, 0x10a4290a, 0x10942509, 0x10a4250a, 0x1094290a, 0x10b4290b, 0x10b42d0c, 0x10d4350d, 0x10f4390e, 0x11044510, 0x11344d12, 0x11645914, 0x11946516, 0x11d47119, 0x11f47d1b, 0x12348d20, 0x1284a122, 0x12d4b126, 0x1314c52a, 0x1354dd2f, 0x13d4f534, 0x1435113a, 0x14b52d40, 0x15354d46, 0x15b56d4d, 0x16459555, 0x16d5bd5d, 0x1795e967, 0x18662571, 0x1936597c, 0x1a269989, 0x1b56e597, 0x1c7731a9, 0x1df785ba, 0x1ef7c1c8,
0x1fd81ddb, 0x1ea7cdcf, 0x1d2769ba, 0x1bb715a9, 0x1ac6cd97, 0x19b68589, 0x18e6497e, 0x18161574, 0x1755e168, 0x16a5b560, 0x16159159, 0x15856950, 0x1515494a, 0x14852941, 0x1435113c, 0x13c4f537, 0x1364dd33, 0x1314c92d, 0x12c4b52a, 0x1284a125, 0x12349122, 0x1204851e, 0x11d4751c, 0x11946919, 0x11745d16, 0x11445114, 0x11244913, 0x11044111, 0x10e4390f, 0x10d4350d, 0x10c4310c, 0x10b42d0c, 0x10b42d0c, 0x10b42d0c, 0x10c42d0c, 0x10c4310c, 0x10d4350d, 0x10e4390e, 0x1104410f, 0x11244911, 0x11545113, 0x11745d15, 0x11a46d18, 0x11d4751a, 0x1224851d, 0x12449521, 0x12a4a524, 0x12d4b929, 0x1324cd2b, 0x1394e531, 0x13f50136, 0x1455153b, 0x14c53541, 0x15455546, 0x15d5794d, 0x16659d56, 0x1715c95f, 0x17d5f567, 0x18962d73, 0x1976617f, 0x1a66a58c, 0x1b46ed99, 0x1ca73daa, 0x1e2791bd, 0x1f47ddc9,
0x1fb825e1, 0x1ea7ddd0, 0x1d5781bd, 0x1c2721a7, 0x1ad6d999, 0x19e6918d, 0x19065581, 0x18161d76, 0x1775ed6d, 0x16c5bd61, 0x16359959, 0x15a57151, 0x1525514b, 0x14b53145, 0x1445153e, 0x13d4fd39, 0x1384e534, 0x1334d12e, 0x12d4b92b, 0x1294a526, 0x12549524, 0x12248920, 0x11d4791d, 0x11b46d1a, 0x11846118, 0x11545516, 0x11344d14, 0x11244511, 0x11043d10, 0x10e4390f, 0x10d4350e, 0x10d4310d, 0x10c4310d, 0x10d4350d, 0x10d4350e, 0x10d4350e, 0x10e4390f, 0x11044110, 0x11244510, 0x11445112, 0x11645914, 0x11946516, 0x11c47119, 0x11e47d1b, 0x12248d1f, 0x12649922, 0x12a4ad25, 0x12f4bd2a, 0x1354d52d, 0x13b4ed32, 0x13f50137, 0x14651d3d, 0x14d53d43, 0x15655d48, 0x15f58150, 0x1675a157, 0x1725d160, 0x17d60169, 0x18963575, 0x19866d81, 0x1a76b18d, 0x1b96f99d, 0x1ce74dad, 0x1e27a1be, 0x1f27edcb,
0x205841e6, 0x1f17edd6, 0x1d7789be, 0x1c3731b0, 0x1ae6e19e, 0x1a069d8f, 0x19365d83, 0x18462977, 0x1795f16c, 0x1705c963, 0x1645a15a, 0x15a57553, 0x1545594d, 0x14d53946, 0x14551d40, 0x13f5053b, 0x1394ed34, 0x1354d530, 0x12f4c12d, 0x12a4ad28, 0x12749d25, 0x12348d21, 0x11f4811e, 0x11d4711b, 0x11946919, 0x11745d17, 0x11545515, 0x11344d13, 0x11144512, 0x11044111, 0x10f43d10, 0x10e43910, 0x10e4390f, 0x10e4390e, 0x10e43910, 0x10f43d0f, 0x11044110, 0x11144511, 0x11344d13, 0x11545514, 0x11746116, 0x11a46919, 0x11d4751b, 0x1214811d, 0x12449121, 0x1284a123, 0x12c4b527, 0x1314c52b, 0x1364dd2f, 0x13c4f134, 0x14250939, 0x1485253e, 0x15054145, 0x1575654b, 0x16158553, 0x16a5ad5a, 0x1755d563, 0x17e6096a, 0x18f63d77, 0x19b67983, 0x1ab6bd8f, 0x1be705a0, 0x1d2759b2, 0x1e87adc0, 0x1fb7f1cf,
0x208859ec, 0x1f4809d9, 0x1da799c3, 0x1c673db1, 0x1b46f1a0, 0x1a26a991, 0x19566986, 0x18863179, 0x17c5fd6f, 0x1715d166, 0x1665a95d, 0x15d58556, 0x15555d4e, 0x14e54147, 0x14752542, 0x1425093d, 0x13a4f136, 0x1354d933, 0x1314c92e, 0x12c4b52a, 0x1294a127, 0x12449523, 0x12148520, 0x11d4791d, 0x11b46d1b, 0x11946518, 0x11745917, 0x11545116, 0x11244d13, 0x11144512, 0x11044112, 0x10f44110, 0x10f44110, 0x10f44111, 0x11044110, 0x11044511, 0x11144912, 0x11344d12, 0x11545514, 0x11745d16, 0x11946518, 0x11c4711b, 0x11f47d1c, 0x1224891e, 0x12549922, 0x12a4a925, 0x12d4b92a, 0x1334cd2c, 0x1384e131, 0x13d4f935, 0x1445113b, 0x14952d40, 0x15254d46, 0x15956d4d, 0x16458d53, 0x16b5b55b, 0x1775e164, 0x1816116e, 0x1906457a, 0x19e68185, 0x1ae6c993, 0x1bf711a1, 0x1d5765b2, 0x1ed7bdc3, 0x1f9805d6,
0x20a865ea, 0x1f6815dd, 0x1e27a9c8, 0x1cb74db5, 0x1b46fda3, 0x1aa6b596, 0x19867588, 0x1896397d, 0x17e60970, 0x1735d968, 0x1685b15f, 0x16158d57, 0x15756951, 0x1505494a, 0x14952d44, 0x1425113e, 0x13d4f938, 0x1374e134, 0x1324cd2f, 0x12d4b92c, 0x12a4a927, 0x12549d25, 0x12348d22, 0x11f4811f, 0x11d4751d, 0x11a46d1a, 0x11846119, 0x11645917, 0x11445115, 0x11344d14, 0x11244913, 0x11244912, 0x11144512, 0x11144512, 0x11144912, 0x11344d13, 0x11345113, 0x11545514, 0x11745d16, 0x11946118, 0x11b46d1a, 0x11d4791b, 0x1204851f, 0x12449122, 0x12649d24, 0x12c4ad27, 0x1304c12b, 0x1344d52f, 0x13a4e933, 0x14050136, 0x14551d3c, 0x14c53542, 0x15455548, 0x15b57150, 0x16559956, 0x16e5bd5d, 0x1795ed67, 0x1846216f, 0x1936557b, 0x19f69187, 0x1b26d596, 0x1c6725a5, 0x1d5771b2, 0x1f17cdc8, 0x1ff815d9,
0x210875f2, 0x1fd821e1, 0x1e27b1cb, 0x1cd761bb, 0x1bb711a6, 0x1aa6c598, 0x19a6858a, 0x18d6497f, 0x18161575, 0x1775e56b, 0x16c5bd62, 0x1625995a, 0x15b57552, 0x1525554c, 0x14b53546, 0x14551940, 0x13e5013a, 0x1384ed37, 0x1334d531, 0x12f4c52e, 0x12b4b52a, 0x1284a127, 0x12449524, 0x12148921, 0x11e47d1e, 0x11c4711b, 0x11a4691a, 0x11946119, 0x11645d18, 0x11545516, 0x11445115, 0x11445114, 0x11344d13, 0x11444d14, 0x11345114, 0x11545515, 0x11545916, 0x11745d17, 0x11946518, 0x11b46d1a, 0x11c4751b, 0x11f4811f, 0x12248d20, 0x12649923, 0x1294a927, 0x12d4b529, 0x1314c92d, 0x1374dd30, 0x13c4f135, 0x14250d3a, 0x1485213f, 0x14f53d44, 0x1575614a, 0x15f57d51, 0x1685a158, 0x1705cd62, 0x1795f568, 0x18862972, 0x19565d7c, 0x1a369d89, 0x1b36e598, 0x1c6731a7, 0x1db785b8, 0x1f47e1c9, 0x203829d9,
0x21988df7, 0x201839e4, 0x1e67d1cf, 0x1d176dbb, 0x1bf71da7, 0x1ac6d19d, 0x19d6918e, 0x19065981, 0x18462177, 0x1795f16d, 0x16e5c965, 0x16659d5c, 0x15d58156, 0x15455d4f, 0x14e54148, 0x14752544, 0x1425093d, 0x13b4f537, 0x1354e134, 0x1324cd30, 0x12d4b92c, 0x12a4a929, 0x12649d27, 0x12349123, 0x12048521, 0x11d4791e, 0x11c4711d, 0x1194691a, 0x1184651a, 0x11645d18, 0x11645918, 0x11545916, 0x11545516, 0x11545516, 0x11545916, 0x11645d17, 0x11746117, 0x11946518, 0x11b46d1a, 0x11c4711c, 0x11e47d1d, 0x12048920, 0x12349122, 0x1274a124, 0x12b4b127, 0x12f4c12b, 0x1334d52f, 0x1394e533, 0x13f4fd38, 0x1445113c, 0x14a52d40, 0x15154946, 0x1575694c, 0x15f58553, 0x1695ad5b, 0x1735d163, 0x17e6056b, 0x18a63576, 0x19766d7f, 0x1a66ad8f, 0x1b66f19d, 0x1ca741a9, 0x1e0799ba, 0x1f67f1cb, 0x20c83ddf,
0x21d8adfb, 0x208859ea, 0x1eb7e5d7, 0x1d8785c1, 0x1c2731ae, 0x1b06e9a0, 0x1a16a191, 0x19466585, 0x1856317c, 0x17b5fd6f, 0x1715d166, 0x1685ad5f, 0x15f58558, 0x15756552, 0x1505494b, 0x14953146, 0x14451940, 0x13d5013a, 0x1384e937, 0x1344d532, 0x12f4c52f, 0x12b4b52b, 0x1284a529, 0x12549925, 0x12248d23, 0x11f48121, 0x11e4791e, 0x11c4711d, 0x11a46d1c, 0x1194651a, 0x11846119, 0x11745d19, 0x11745d19, 0x11746119, 0x1184611a, 0x11846519, 0x1194691a, 0x11b46d1a, 0x11c4711c, 0x11e47d1e, 0x12048520, 0x12348d22, 0x12649924, 0x1284a927, 0x12d4b92a, 0x1314c92e, 0x1354dd30, 0x13a4f134, 0x1415053a, 0x14751d3e, 0x14c53942, 0x15355148, 0x15b5714f, 0x16459154, 0x16b5b95e, 0x1765e564, 0x18260d6d, 0x18e64176, 0x19c67984, 0x1ae6b590, 0x1ba7059e, 0x1ce74dad, 0x1e37a9c0, 0x1fd805d2, 0x212851e1,
0x2218c202, 0x20e86dee, 0x1f2805db, 0x1dd799c6, 0x1c9741b4, 0x1b46f1a3, 0x1a36ad96, 0x19667588, 0x18a63d80, 0x17f60973, 0x1735dd6b, 0x16b5b562, 0x1625915a, 0x15a57153, 0x1535554d, 0x14b53948, 0x14651d42, 0x1405093e, 0x13b4f137, 0x1354dd34, 0x1314cd31, 0x12e4bd2e, 0x12a4ad2b, 0x1264a128, 0x12449524, 0x12248922, 0x12048120, 0x11e4791e, 0x11d4751d, 0x11b46d1d, 0x11a4691b, 0x1194651a, 0x1194691a, 0x1194651a, 0x1194691a, 0x11b46d1b, 0x11c46d1c, 0x11c4751d, 0x11d47d1e, 0x12048520, 0x12248d21, 0x12549923, 0x1284a526, 0x12c4b129, 0x12f4c12c, 0x1344d130, 0x1374e533, 0x13d4f936, 0x14250d3b, 0x14952941, 0x15054145, 0x15655d4c, 0x15e57d51, 0x16559d58, 0x16f5c15e, 0x1795ed68, 0x18561970, 0x1926517b, 0x1a068986, 0x1ad6cd91, 0x1bf711a2, 0x1d2765b2, 0x1eb7b9c1, 0x1ff81dd4, 0x217861e8,
0x2288de0d, 0x212889f9, 0x1f9819df, 0x1e27b1cb, 0x1cd759b8, 0x1b9705a9, 0x1ab6c198, 0x19c6818e, 0x18d64980, 0x18161977, 0x1775e96f, 0x16d5c164, 0x1655a15d, 0x15d57d58, 0x15656151, 0x14e5454b, 0x14852945, 0x14351140, 0x13e4fd3c, 0x1384e936, 0x1344d533, 0x12f4c530, 0x12c4b92e, 0x12a4a92b, 0x12749d27, 0x12449125, 0x12348d24, 0x12148522, 0x11f47d21, 0x11d4791e, 0x11c4751e, 0x11b4711d, 0x11c4711d, 0x11c4711d, 0x11b4711c, 0x11d4751e, 0x11d4791e, 0x11f47d1f, 0x12048520, 0x12248d22, 0x12549924, 0x1284a126, 0x12a4b128, 0x12f4bd2b, 0x1324cd2d, 0x1364dd32, 0x13b4f135, 0x13f50139, 0x1455193d, 0x14c53142, 0x15354d46, 0x15956d4e, 0x16158953, 0x1695ad5a, 0x1735d162, 0x17d5f96b, 0x18962974, 0x19565d7e, 0x1a269989, 0x1b36dd98, 0x1c2729a6, 0x1d8779b5, 0x1ed7d1c8, 0x20683ddd, 0x21b885ee,
0x2348fa15, 0x21b8a202, 0x1fd825e1, 0x1e37c5cf, 0x1d176dbe, 0x1be71dab, 0x1af6d59e, 0x1a069191, 0x19065985, 0x1866257a, 0x17a5f970, 0x1705cd68, 0x1695ad61, 0x15f5895a, 0x15756d53, 0x15254d4d, 0x14c53148, 0x14551d43, 0x1405053e, 0x13b4f13a, 0x1354e135, 0x1334d133, 0x12f4c12f, 0x12c4b52c, 0x12a4a52a, 0x12649d28, 0x12549526, 0x12348d24, 0x12148522, 0x11f48122, 0x11e47d20, 0x11e47920, 0x11e47920, 0x11d4791f, 0x11e47d20, 0x11f48120, 0x12048121, 0x12148921, 0x12349122, 0x12549924, 0x1274a126, 0x12a4ad27, 0x12d4b92a, 0x1314c92d, 0x1344d530, 0x1384e534, 0x13d4f937, 0x1425113c, 0x14852940, 0x14d54144, 0x1545594a, 0x15b57550, 0x16459556, 0x16c5b95e, 0x1775e164, 0x17f6096f, 0x18d63977, 0x19967181, 0x1a66ad8e, 0x1b66f59b, 0x1cb73dab, 0x1dd78db8, 0x1f67e9cd, 0x20e851df, 0x21b89df0,
0x2369261a, 0x21d8be04, 0x201849ec, 0x1ed7ddd6, 0x1d7781c3, 0x1c572db2, 0x1b36e5a3, 0x1a26a595, 0x19666988, 0x1896397f, 0x18060575, 0x1735dd6d, 0x16b5b963, 0x1645955d, 0x15a57555, 0x15455950, 0x14d53d4a, 0x14752946, 0x14251142, 0x13d4fd3d, 0x1394ed39, 0x1354d935, 0x1324cd32, 0x12e4c12f, 0x12b4b12c, 0x1284a52a, 0x12749d28, 0x12549526, 0x12349125, 0x12148923, 0x12248922, 0x12048521, 0x12048121, 0x12048522, 0x12048521, 0x12148923, 0x12248d23, 0x12449124, 0x12549925, 0x1274a127, 0x1294a928, 0x12c4b52b, 0x12f4c52e, 0x1324d130, 0x1364dd32, 0x13c4f135, 0x1405053a, 0x1455193e, 0x14952d42, 0x15054948, 0x1565654d, 0x15f58153, 0x1675a15a, 0x1705c960, 0x17a5ed69, 0x18261970, 0x18f6497a, 0x19d68184, 0x1ab6bd90, 0x1bb7019e, 0x1ce751ae, 0x1e27a9be, 0x1fb801d4, 0x215861e4, 0x2268b9f2,
0x2409421c, 0x22a8e60b, 0x20a861f5, 0x1f27f9db, 0x1db795c6, 0x1c9745b5, 0x1b46f5a9, 0x1a76b59d, 0x1986798f, 0x18c64584, 0x1826197a, 0x1775ed6f, 0x16e5c968, 0x1665a560, 0x15f5855b, 0x15856954, 0x15054d4d, 0x14b53149, 0x14651d44, 0x14150940, 0x13c4f93c, 0x1374e538, 0x1354d534, 0x1314c931, 0x12e4bd2e, 0x12c4b12d, 0x12a4ad2a, 0x1284a128, 0x12649d27, 0x12549926, 0x12349125, 0x12349124, 0x12348d24, 0x12349124, 0x12449124, 0x12449525, 0x12549926, 0x12749d27, 0x1284a528, 0x12a4ad29, 0x12c4b52b, 0x12f4c12d, 0x1334d12e, 0x1364d932, 0x13a4ed36, 0x13e50139, 0x1435113c, 0x14852942, 0x14d53d45, 0x1535594a, 0x15b57150, 0x16259155, 0x16b5b55b, 0x1745d564, 0x17d6016c, 0x18962975, 0x19465d7c, 0x1a169188, 0x1b06d196, 0x1c1719a6, 0x1d4765b4, 0x1e67bdc3, 0x1ff821d7, 0x21b885e8, 0x22d8d1fb,
0x24b96e2a, 0x2318fa12, 0x210879fb, 0x1f480ddf, 0x1e07adcf, 0x1d0759bb, 0x1bb711ab, 0x1aa6c59e, 0x19c68d91, 0x19165586, 0x18662d7c, 0x17d5fd75, 0x1725d56d, 0x16b5b564, 0x1625915e, 0x15b57558, 0x15455951, 0x14d5414c, 0x14952946, 0x14351542, 0x13f5013e, 0x13a4f13b, 0x1374e537, 0x1344d534, 0x1314c932, 0x12e4bd2f, 0x12c4b52c, 0x12b4ad2b, 0x1284a529, 0x1274a128, 0x12549d29, 0x12649927, 0x12549927, 0x12549927, 0x12549d27, 0x12649d26, 0x1284a128, 0x1294a929, 0x12a4b12a, 0x12d4b92b, 0x12f4c12e, 0x1314c92f, 0x1354d932, 0x1384e534, 0x13c4f937, 0x1415093c, 0x14551d3e, 0x14a53145, 0x1505494a, 0x1565654d, 0x15e57d53, 0x1665a159, 0x16d5c15e, 0x1765e164, 0x18060d6e, 0x18c63977, 0x19866d82, 0x1a76a58a, 0x1b56e598, 0x1c772da5, 0x1db77db7, 0x1f17cdc9, 0x206839d9, 0x21d89dee, 0x2398ee00,
0x25399e32, 0x23b9321c, 0x21b8aa02, 0x1fd831e6, 0x1e67c9d4, 0x1d2775c5, 0x1c1729b4, 0x1b06e5a6, 0x1a26a197, 0x1956698d, 0x18c63981, 0x17f61178, 0x1765e972, 0x16c5c569, 0x1665a561, 0x15e5815a, 0x15956954, 0x15154d50, 0x14c5394a, 0x14652146, 0x14250d41, 0x13e4fd3e, 0x1394ed3a, 0x1364e137, 0x1344d535, 0x1314c932, 0x12f4c130, 0x12d4b92e, 0x12c4b52e, 0x12b4ad2c, 0x1294ad2b, 0x1294a92a, 0x1284a529, 0x1284a529, 0x1294a52a, 0x1294a92a, 0x12b4b12b, 0x12c4b52c, 0x12d4b92d, 0x1304c12e, 0x1324cd30, 0x1354d933, 0x1384e534, 0x13b4f537, 0x13f5053b, 0x1455193e, 0x14a52942, 0x14f54146, 0x1545594c, 0x15a57551, 0x16259156, 0x16b5b15d, 0x1735d563, 0x17d5f56b, 0x18662172, 0x19264d7c, 0x19c68186, 0x1ac6bd90, 0x1ba6fd9e, 0x1cd741aa, 0x1e2795bd, 0x1f67edcf, 0x20e851e1, 0x2268c1f9, 0x23b91a0d,
0x2589c644, 0x24095627, 0x2248ca0b, 0x205855ee, 0x1ed7e1d7, 0x1d8795c9, 0x1c773db8, 0x1b56f5ab, 0x1a76b99d, 0x19b68191, 0x18e65187, 0x1836217c, 0x17b5f574, 0x1735d56c, 0x1685b164, 0x1625915d, 0x15a57557, 0x15355d53, 0x1505454e, 0x14a53148, 0x14551d45, 0x14150941, 0x13c4fd3c, 0x13a4ed3b, 0x1374e137, 0x1334d535, 0x1334d133, 0x1304c531, 0x12e4c12f, 0x12d4b92f, 0x12d4b52e, 0x12c4b52d, 0x12b4b12c, 0x12b4b12c, 0x12c4b52c, 0x12d4b92e, 0x12e4b92d, 0x12f4c12f, 0x1314c930, 0x1324d131, 0x1354d933, 0x1374e535, 0x13a4f137, 0x13e5013b, 0x1435113d, 0x14752542, 0x14d53544, 0x15255149, 0x1595694f, 0x15e58153, 0x1655a55a, 0x16d5c15f, 0x1765e566, 0x17f6096d, 0x18a63176, 0x19666180, 0x1a26958a, 0x1b26d196, 0x1bf711a2, 0x1d1751b1, 0x1e87adc1, 0x1fd80dd0, 0x215871ea, 0x22f8e5fd, 0x24393e0d,
0x26da0248, 0x24d98a30, 0x22f8ee10, 0x20e871f7, 0x1f6809e1, 0x1e07adcd, 0x1cb75dbe, 0x1bb711b0, 0x1ad6cda2, 0x19f69996, 0x1936658a, 0x18963581, 0x18061179, 0x1765e571, 0x16d5c567, 0x1675a963, 0x15f5895c, 0x15856d57, 0x15455951, 0x14e5414b, 0x14852d48, 0x14451d45, 0x14050942, 0x13d4fd3e, 0x13a4f13b, 0x1384e538, 0x1354dd37, 0x1334d535, 0x1324c933, 0x1314c931, 0x12f4c131, 0x12e4c130, 0x12f4c130, 0x12e4c130, 0x12f4c130, 0x12f4c530, 0x1314c930, 0x1334cd31, 0x1334d534, 0x1354dd34, 0x1384e536, 0x13b4f53a, 0x13f5013b, 0x1425113f, 0x14752143, 0x14c53144, 0x14f54548, 0x15655d4d, 0x15d57952, 0x16359158, 0x1685b15d, 0x1725d164, 0x1795f56b, 0x18362171, 0x18d6457b, 0x19a67983, 0x1a66a98f, 0x1b56e99c, 0x1c672daa, 0x1d8779b7, 0x1ed7c9c6, 0x206835d9, 0x21d895ec, 0x23990e06, 0x25396217,
0x270a3a55, 0x25b9aa3e, 0x23691e1a, 0x215895fd, 0x1fb821e8, 0x1e57c5d6, 0x1d2771c3, 0x1c172db5, 0x1b06e5a6, 0x1a56ad9c, 0x19967990, 0x18d64d85, 0x1826217b, 0x1795f975, 0x1705d96d, 0x1695b568, 0x16259960, 0x15b57d5a, 0x15656555, 0x15255150, 0x14c53d4c, 0x14852948, 0x14451944, 0x14050942, 0x13e4fd3e, 0x13c4f13c, 0x1384e93a, 0x1364e137, 0x1344d936, 0x1344d534, 0x1324d134, 0x1324cd33, 0x1324cd33, 0x1324cd33, 0x1334d133, 0x1334d133, 0x1334d534, 0x1354d935, 0x1374e537, 0x13a4e937, 0x13c4f539, 0x13f5013c, 0x14250d40, 0x14651d41, 0x14b53145, 0x14e54148, 0x1545594b, 0x15a57151, 0x16158954, 0x1665a55a, 0x16e5c160, 0x1765e168, 0x1816096f, 0x18963577, 0x19465d7f, 0x1a168989, 0x1ae6c193, 0x1bb6fd9e, 0x1cb749ab, 0x1df791bd, 0x1f67e9cb, 0x20c845e1, 0x2268b9f9, 0x24593e0b, 0x25898a1c,
0x280a6258, 0x2619de44, 0x24093627, 0x2248b206, 0x203841f0, 0x1eb7e5d7, 0x1df78dc8, 0x1c773dbe, 0x1b86f9aa, 0x1aa6c5a0, 0x19d68996, 0x19265d8a, 0x18663181, 0x17f60d78, 0x1765e571, 0x16d5c96a, 0x1655ad64, 0x15f58d5d, 0x15757558, 0x15556152, 0x14d5494d, 0x14b53549, 0x14652948, 0x14451945, 0x14150941, 0x13d5013e, 0x13c4f53d, 0x13b4ed3b, 0x1384e538, 0x1374e539, 0x1354dd36, 0x1354d937, 0x1344dd36, 0x1354dd36, 0x1354dd36, 0x1364dd35, 0x1384e536, 0x1384e93a, 0x13b4f138, 0x13d4f93b, 0x13f5053d, 0x14350d3e, 0x14451d42, 0x14b52946, 0x14e54148, 0x15154d4a, 0x15656550, 0x15d57d55, 0x1645955a, 0x1685b55d, 0x1725d164, 0x17a5f16d, 0x18261d72, 0x18c6457a, 0x19a67183, 0x1a36a18d, 0x1b06d196, 0x1c17159e, 0x1d1761b1, 0x1e57adc1, 0x1f9805d0, 0x21286de4, 0x2318cdfb, 0x24d9561a, 0x2679c224,

#elif 0  //100%
0x3fffffd4, 0x3eefff96, 0x396eeb49, 0x355deb12, 0x321cf6d9, 0x2e9c2aaf, 0x2c1b7686, 0x2a3ade71, 0x27fa5252, 0x2649ce38, 0x24d96225, 0x2369020d, 0x2228b1fb, 0x20e859e8, 0x1fd811da, 0x1ec7c5ce, 0x1dd791be, 0x1d0751b5, 0x1c3719a9, 0x1bc6ed9e, 0x1ad6c995, 0x1a76a58f, 0x19f67986, 0x19966181, 0x19063d77, 0x18a62d77, 0x1866156f, 0x1846096a, 0x1815f568, 0x17e5ed68, 0x17b5e161, 0x17a5e162, 0x1785d963, 0x1795e163, 0x1795d961, 0x17d5e563, 0x17e5f164, 0x1815f966, 0x1846096b, 0x18b6256b, 0x18d63172, 0x19264d75, 0x19d6697e, 0x1a268984, 0x1ac6ad8a, 0x1bb6dd91, 0x1c570199, 0x1d0731a3, 0x1db769ad, 0x1e97a5b8, 0x1fb7e5c4, 0x20e82dd3, 0x21e871ea, 0x2368d1f9, 0x24992209, 0x26498a15, 0x2879fe2a, 0x2a3a8647, 0x2cab0e71, 0x2f7bbe90, 0x319c8eac, 0x351d66dd, 0x38be570d, 0x3c3f4b3f, 0x3f4fff6b,
0x3fffffb7, 0x3cfff77d, 0x381ec739, 0x343da700, 0x315cbed1, 0x2e5bf6a4, 0x2bab428a, 0x297ab262, 0x27aa3245, 0x25a9ba31, 0x24294a18, 0x2308ea07, 0x21b88df3, 0x20583de2, 0x1f27edd1, 0x1e37adc8, 0x1da771b8, 0x1c8731ae, 0x1be709a3, 0x1b16dd99, 0x1a96ad91, 0x19e68d88, 0x19866181, 0x1916457c, 0x18b62976, 0x18461570, 0x1816016b, 0x17c5ed68, 0x1795dd66, 0x1765d561, 0x1735d161, 0x1745c960, 0x1745c95d, 0x1715c961, 0x1745c95d, 0x1745d15e, 0x1785d961, 0x17b5e162, 0x1805f565, 0x18560569, 0x18861d6e, 0x18f63972, 0x19665578, 0x19d66d7c, 0x1a769584, 0x1b16bd8a, 0x1bb6e596, 0x1c87199c, 0x1d6751a9, 0x1e478db4, 0x1f77c9c0, 0x20480dce, 0x21b85ddd, 0x22e8a9ea, 0x244905ff, 0x25a96a13, 0x2779e22a, 0x297a5a45, 0x2beaea65, 0x2e5b9e83, 0x30dc4ea4, 0x33fd2ad1, 0x381e0304, 0x3bdf1334, 0x3fbfd75a,
0x3e7fffa3, 0x3bdf8f65, 0x377e6320, 0x332d52f2, 0x302c86ba, 0x2d4bbe9a, 0x2abb0e77, 0x292a7a5a, 0x26b9f240, 0x24f97227, 0x23a91213, 0x2268ba03, 0x212861ed, 0x1ff811dd, 0x1ec7cdce, 0x1e0785c0, 0x1d0745b1, 0x1bf715a6, 0x1b56e59b, 0x1ac6b992, 0x19f68d8a, 0x19766584, 0x1916457c, 0x18962d75, 0x18460d6f, 0x17f5f96c, 0x1785e566, 0x1765d562, 0x1735c561, 0x16d5b55d, 0x16d5b15c, 0x16d5ad5a, 0x16e5a95b, 0x16b5ad58, 0x16b5a958, 0x16e5b55a, 0x1715b95c, 0x1725c960, 0x1785d561, 0x17d5e964, 0x18460168, 0x1886196c, 0x18d63171, 0x19765577, 0x19f67581, 0x1ac69d88, 0x1b46c58d, 0x1bf6f997, 0x1cc729a3, 0x1db765ae, 0x1ea7a5ba, 0x1fb7e5c8, 0x210831d5, 0x222881e4, 0x23a8d9f9, 0x24d9460b, 0x26d9aa25, 0x28aa2e38, 0x2aeaba54, 0x2d4b5a7a, 0x2fbc1297, 0x32eccec2, 0x363dbef7, 0x3a6eab20, 0x3dbf834f,
0x3dbfff89, 0x3a1f2360, 0x35fe0317, 0x325d02e1, 0x2ecc3eb3, 0x2c1b6e90, 0x2a8ace68, 0x282a3e52, 0x2619c633, 0x24294a1a, 0x2308e209, 0x21b889f1, 0x204835e4, 0x1f37e9d1, 0x1e17a5c6, 0x1d775db7, 0x1c5729aa, 0x1b96f19c, 0x1ad6c192, 0x1a16958c, 0x19866d84, 0x18f6497a, 0x18862d75, 0x18260d6e, 0x17b5ed69, 0x1775dd64, 0x1735c561, 0x1705b55d, 0x16c5a958, 0x16859d56, 0x16759555, 0x16659154, 0x16558d54, 0x16559153, 0x16359152, 0x16759555, 0x1685a156, 0x16b5ad57, 0x1705b95a, 0x1765c95d, 0x17c5e161, 0x1815f567, 0x1876156c, 0x18c63571, 0x19a65578, 0x19f67d81, 0x1ac6a589, 0x1b76d590, 0x1c37099b, 0x1d073da6, 0x1de77db1, 0x1f07c1c1, 0x204805d0, 0x219859dd, 0x2308a9ef, 0x24490a03, 0x26697e1a, 0x27f9f233, 0x29da864a, 0x2c7b166b, 0x2ecbce8a, 0x321c8eb6, 0x351d66dd, 0x391e6309, 0x3c3f1334,
0x3c3fcb77, 0x396ed344, 0x34cdb30d, 0x315cbed9, 0x2e2bf6ac, 0x2b7b3a83, 0x294a9a62, 0x270a0a45, 0x25498e2a, 0x23a92213, 0x2268b5ff, 0x210865eb, 0x1fb811db, 0x1ec7c5cb, 0x1db77dc0, 0x1cb73dae, 0x1bc705a6, 0x1ae6d19a, 0x1a56a58f, 0x19c67585, 0x19064d7c, 0x18862975, 0x1826096f, 0x17a5ed67, 0x1745d561, 0x1715bd5d, 0x16d5ad59, 0x16959956, 0x16459154, 0x16358551, 0x16057d4f, 0x1605754c, 0x15f5754e, 0x15e5794f, 0x15e5754f, 0x16057d4f, 0x16258550, 0x16659150, 0x16a5a156, 0x16d5b156, 0x1735c95e, 0x1785dd61, 0x1805fd66, 0x1886196b, 0x18e63972, 0x1996617c, 0x1a668d83, 0x1ae6b58b, 0x1bb6ed96, 0x1c8721a0, 0x1d8759ad, 0x1e979db8, 0x1fa7e5c6, 0x20e831d6, 0x224881e6, 0x23e8ddff, 0x25695211, 0x2759ca2a, 0x297a5242, 0x2b4ae262, 0x2deb9683, 0x30dc4ea4, 0x343d2ad1, 0x377e0f00, 0x3a6edf20,
0x3a6f5765, 0x377e932a, 0x33ad66f7, 0x306c8ec9, 0x2d7bb69a, 0x2abb0274, 0x287a6652, 0x2699e63a, 0x24995e1e, 0x2328f209, 0x21b891f5, 0x204835e1, 0x1f07e5d1, 0x1e37a1c3, 0x1d175db5, 0x1c3725a9, 0x1b56e59b, 0x1a96b18f, 0x19c68185, 0x1936557e, 0x18a62d76, 0x1836096d, 0x17a5f16a, 0x1735d164, 0x16d5b95e, 0x1685a157, 0x16259155, 0x15f5814f, 0x15c5714f, 0x15b56549, 0x1585654a, 0x15855d48, 0x15855546, 0x15755947, 0x15755948, 0x15a56147, 0x15c5694a, 0x1605794d, 0x16458550, 0x16759553, 0x16b5ad55, 0x1715c55c, 0x1785d960, 0x1815f966, 0x18961d6d, 0x19263d76, 0x19c6697c, 0x1a669183, 0x1b56c98f, 0x1bf6f997, 0x1d0739a3, 0x1dd77db2, 0x1f07bdc1, 0x20480dcc, 0x21b85ddf, 0x2328b5f3, 0x24992205, 0x2669921e, 0x284a1638, 0x2a8aae54, 0x2d1b5a74, 0x2fec129a, 0x332cc6c5, 0x368db2ea, 0x39be6f09,
0x39bf0749, 0x368e1b1b, 0x325d32e5, 0x2f3c46ba, 0x2c7b7e8a, 0x2a3ad668, 0x27ca3e4f, 0x25f9ae31, 0x24293e1a, 0x2268ce03, 0x212869ef, 0x1fd815db, 0x1ea7c9c9, 0x1da781be, 0x1cc741ab, 0x1bb705a2, 0x1af6c996, 0x1a06998c, 0x19866582, 0x18c63d78, 0x1836156f, 0x17c5f16a, 0x1735d962, 0x16b5b95d, 0x1675a157, 0x16258952, 0x15e57950, 0x15a5694b, 0x15855d4a, 0x15655146, 0x15554d45, 0x15354545, 0x15354144, 0x15054544, 0x15354544, 0x15455144, 0x15555546, 0x15a55d49, 0x15c5714c, 0x1625814f, 0x16859552, 0x16d5ad57, 0x1745c15d, 0x1795e562, 0x18160568, 0x18b6256f, 0x19765178, 0x1a267981, 0x1aa6ad8b, 0x1bb6e596, 0x1c871da2, 0x1d6761ad, 0x1ec7a1ba, 0x1fd7e5c8, 0x21083dd8, 0x226899ed, 0x23e905ff, 0x25d96a18, 0x27c9f22e, 0x29aa864f, 0x2c7b2671, 0x2f0bde93, 0x319c96b6, 0x35ad66e1, 0x386e2709,
0x38be9334, 0x355ddf0d, 0x31dcf6d9, 0x2e5c12ac, 0x2bab4280, 0x294a9e60, 0x270a0e40, 0x2549822a, 0x23890a0d, 0x21e8a9f9, 0x205845e4, 0x1f07e9d3, 0x1e17a1c4, 0x1d1761b2, 0x1c371daa, 0x1b56e19c, 0x1a86b190, 0x19b67984, 0x1906497b, 0x18762172, 0x17e5fd6c, 0x1765d964, 0x16f5b95c, 0x1665a559, 0x16258952, 0x15e5714f, 0x1585614a, 0x15454d47, 0x15254546, 0x15053d42, 0x14d5313f, 0x14c53140, 0x14d5293e, 0x14d52d3f, 0x14b52d3e, 0x14e53140, 0x15053d41, 0x15454942, 0x15855947, 0x15b56949, 0x1615814d, 0x16559153, 0x16d5ad57, 0x1745c95e, 0x17c5e963, 0x18560968, 0x18e63572, 0x19a6617a, 0x1a869184, 0x1b46c590, 0x1c27019b, 0x1cd741a6, 0x1e1781b4, 0x1f37c9c3, 0x20781dd3, 0x21c871e2, 0x2368ddf9, 0x25494a0f, 0x2729c627, 0x292a5e45, 0x2b4afa62, 0x2deb9e8a, 0x315c6aa4, 0x343d2add, 0x372ddef7,
0x377e7b2f, 0x343d9f04, 0x30aca2d1, 0x2dbbcea4, 0x2aeb1e7a, 0x28ca7257, 0x2699e23d, 0x24995e1c, 0x22e8f20b, 0x215881ed, 0x202821e1, 0x1ec7d1cc, 0x1db789bd, 0x1cc741ae, 0x1bf709a0, 0x1af6c997, 0x1a16958b, 0x19666180, 0x18a63177, 0x18160d6b, 0x1795e565, 0x1715c560, 0x16a5a959, 0x16458955, 0x15c5714f, 0x15855d49, 0x15454d45, 0x15053d43, 0x14e5313e, 0x14c5253d, 0x1495213d, 0x1485193a, 0x1475193b, 0x1475153a, 0x1475193b, 0x14a51d3c, 0x14b5293d, 0x14e5353f, 0x15253d41, 0x15755545, 0x15c56549, 0x1605814d, 0x16759953, 0x16e5ad58, 0x1765d55f, 0x17f5f964, 0x18961d6e, 0x1956497a, 0x1a06797e, 0x1ae6b18d, 0x1bb6e596, 0x1cb721a2, 0x1da769ad, 0x1ed7b1bb, 0x1ff7fdce, 0x215851df, 0x22c8b9f1, 0x24b92607, 0x26999a23, 0x282a3242, 0x2abac25d, 0x2dbb7680, 0x306c22a8, 0x336d02c5, 0x363d9eee,
0x35fe1b20, 0x332d5ef2, 0x306c72c5, 0x2d1bae97, 0x2a8af271, 0x27ca4e4c, 0x25d9c633, 0x24293e18, 0x2288cdff, 0x210865ef, 0x1f7809d3, 0x1e77b5c8, 0x1d6769b5, 0x1c4729ab, 0x1b66ed9a, 0x1a96b192, 0x19b67984, 0x18f6497d, 0x18661d71, 0x17b5f56a, 0x1735d161, 0x16b5ad5d, 0x16459154, 0x15e5754f, 0x15755949, 0x15254d45, 0x14f53543, 0x14b5253f, 0x1475193c, 0x14651139, 0x14350d38, 0x14450536, 0x14350536, 0x14250537, 0x14350137, 0x14550d37, 0x14751539, 0x14951d3c, 0x14d52d3e, 0x15353d41, 0x15555144, 0x15a56548, 0x1625854e, 0x1695a154, 0x1715bd5b, 0x1795e161, 0x18360968, 0x18e63972, 0x19b6617c, 0x1a969588, 0x1b56d192, 0x1c570d9b, 0x1d7749ab, 0x1e6795b7, 0x1fa7ddc8, 0x210839d5, 0x2268a1e8, 0x240901ff, 0x25a97e1c, 0x282a0a38, 0x2a5a9a54, 0x2cab4274, 0x2f0c0a97, 0x32ecbec2, 0x351d66d9,
0x355dd712, 0x325d1eea, 0x2f3c32b6, 0x2c7b6e8a, 0x2a0aba68, 0x270a2247, 0x2569922a, 0x23c91a11, 0x21e8a1fd, 0x20783de4, 0x1f07e5d1, 0x1e0791c0, 0x1cf751b2, 0x1bf70da3, 0x1ae6c999, 0x1a26958a, 0x19566582, 0x18a63176, 0x17e6056c, 0x1765dd64, 0x16d5b55e, 0x16659556, 0x15f57d4f, 0x1575614a, 0x15254544, 0x14e53141, 0x1495253f, 0x1465193a, 0x14250538, 0x13f4f936, 0x13d4f535, 0x13d4f132, 0x13c4ed32, 0x13c4f132, 0x13d4f130, 0x13f4f534, 0x14150134, 0x14550d38, 0x14751939, 0x14b5293d, 0x15153d41, 0x15755145, 0x15b5714a, 0x1635894f, 0x16b5a554, 0x1715cd5f, 0x17c5f165, 0x18761d6e, 0x19664976, 0x1a068180, 0x1aa6b58a, 0x1ba6ed99, 0x1cd729a4, 0x1de76db0, 0x1f07c1c0, 0x204811d1, 0x21e86de2, 0x2388e1ff, 0x25695211, 0x2759e22c, 0x292a724c, 0x2beb0e68, 0x2e9bbe8d, 0x31dc86b6, 0x343d32d9,
0x343db300, 0x31dceee1, 0x2e9c0aac, 0x2beb427d, 0x294a8e60, 0x26b9f640, 0x24f96e25, 0x2308f20d, 0x217885f3, 0x1ff825df, 0x1ed7c5cb, 0x1d877dbe, 0x1c7735ad, 0x1ba6ed9e, 0x1a96b992, 0x19b67d86, 0x19164d7c, 0x18561d70, 0x1795ed68, 0x1715cd61, 0x1685a157, 0x16258952, 0x15b5694c, 0x15255148, 0x14c53541, 0x1495253d, 0x14550d39, 0x14150135, 0x13f4f533, 0x13c4e932, 0x13a4e531, 0x13a4e12f, 0x1394dd2e, 0x13a4d92e, 0x1384e12e, 0x13b4e530, 0x13d4ed30, 0x13f4f934, 0x14150536, 0x1475193a, 0x14b5253c, 0x15254141, 0x15955947, 0x15f5754d, 0x16659152, 0x1705b558, 0x1785dd60, 0x18160569, 0x18c63571, 0x19a6657c, 0x1aa6a188, 0x1b66d192, 0x1c871da0, 0x1d7759ad, 0x1ec7a5bb, 0x1ff7f9d0, 0x215855dd, 0x2308b9f5, 0x24993e0b, 0x2709be27, 0x28ca4e45, 0x2b4af265, 0x2e2b9e8a, 0x311c56af, 0x33acf6cd,
0x33fd52ea, 0x315cb2cd, 0x2dbbe6a4, 0x2b4b1e7a, 0x28ca7257, 0x2669d636, 0x2469521e, 0x22a8d203, 0x215871ed, 0x1fb805d8, 0x1e67a9c6, 0x1d4765b7, 0x1c0719a7, 0x1b46d999, 0x1a469d8f, 0x19766d82, 0x18a63178, 0x1806056f, 0x1745d965, 0x16b5b15d, 0x16359156, 0x15c5714f, 0x15555549, 0x15053d44, 0x1495213f, 0x14350d39, 0x14150135, 0x13d4f133, 0x13a4e530, 0x1364d92e, 0x1354d12d, 0x1354cd2a, 0x1354c92b, 0x1354cd29, 0x1364cd2b, 0x1354d52b, 0x1384d92d, 0x13b4e130, 0x13f4f532, 0x14350935, 0x14651939, 0x14e52d3d, 0x15354541, 0x15956149, 0x1615814d, 0x16b5a155, 0x1735c95d, 0x17d5f166, 0x18861d6d, 0x19565177, 0x1a268583, 0x1af6c18f, 0x1c06fd9b, 0x1d0741a6, 0x1e3789b8, 0x1fa7e1c8, 0x210835da, 0x2288a1ed, 0x24291a09, 0x26499e1e, 0x284a2640, 0x2abaca60, 0x2d1b6e80, 0x302c46a4, 0x325cdac5,
0x336d32ea, 0x306c7ac9, 0x2d1bae9a, 0x2a5b0277, 0x27fa5a4f, 0x25a9ba33, 0x23c9321a, 0x21e8be03, 0x20b855ea, 0x1f37f1d1, 0x1e1799c3, 0x1cd74db4, 0x1bc709a3, 0x1b06c996, 0x19f6898a, 0x1936557e, 0x18662175, 0x17c5f569, 0x1715cd61, 0x1695a559, 0x15f57d52, 0x1585654a, 0x15054546, 0x14b52d3f, 0x1455153a, 0x14150136, 0x13b4f132, 0x13a4dd31, 0x1364d12d, 0x1334c929, 0x1304c129, 0x1304bd27, 0x1314b929, 0x1304b928, 0x1304bd27, 0x1324c529, 0x1334c92a, 0x1364d52b, 0x13a4e12f, 0x13e4f132, 0x14250534, 0x14951d3b, 0x14d5353e, 0x15554d45, 0x15d56d4b, 0x16559150, 0x1705b559, 0x1785e161, 0x1836116a, 0x19063d74, 0x19d6717d, 0x1ad6a98a, 0x1bb6ed96, 0x1cb729a6, 0x1de779b2, 0x1f07c5c1, 0x207821d5, 0x224885eb, 0x2388f601, 0x25d97e1c, 0x27c9fe38, 0x2a3aa654, 0x2cdb5a7d, 0x2fec029e, 0x321ca2be,
0x319d02e5, 0x2f7c56c2, 0x2c7b8e97, 0x29dace6b, 0x277a2e4c, 0x25699e2a, 0x23691a0d, 0x21c8a1f5, 0x20483de2, 0x1f07ddd1, 0x1db789bd, 0x1cb731ab, 0x1b66f1a0, 0x1a86b190, 0x19b67986, 0x18e64579, 0x1806096f, 0x1785e166, 0x16b5b95d, 0x16158d54, 0x15b5714e, 0x15455148, 0x14c53141, 0x1465193b, 0x14150138, 0x13d4ed33, 0x1384dd30, 0x1334d12c, 0x1314c129, 0x12e4b525, 0x12d4b124, 0x12d4ad25, 0x12b4a522, 0x12b4a523, 0x12d4a923, 0x12d4ad24, 0x12f4b925, 0x1324c128, 0x1364cd2b, 0x13a4e12e, 0x13f4f132, 0x14350936, 0x1495253b, 0x15153d41, 0x15955947, 0x1625814d, 0x16b5a556, 0x1765c95f, 0x17f5f966, 0x18b62570, 0x1976597b, 0x1a769585, 0x1b76d191, 0x1c57199f, 0x1d875dad, 0x1ec7a9be, 0x200805d0, 0x21986de4, 0x2368d9f9, 0x24d95e18, 0x2709e233, 0x297a7a54, 0x2c1b2674, 0x2ecbde93, 0x311c72ba,
0x311cdadd, 0x2f0c46b6, 0x2c1b668d, 0x297aae65, 0x272a0a45, 0x24f97e25, 0x2328fa0b, 0x217885f7, 0x1fd81ddf, 0x1e77c5cb, 0x1d676dbd, 0x1c3725ab, 0x1b56e19b, 0x1a66a191, 0x19866984, 0x18963177, 0x17e6016b, 0x1725d163, 0x1675a559, 0x15e58153, 0x1585614b, 0x15054144, 0x1495253e, 0x1435093a, 0x13e4f133, 0x13a4e131, 0x1354cd2b, 0x1304c129, 0x12e4b126, 0x12c4a524, 0x1284a121, 0x12849d22, 0x12849921, 0x12749921, 0x12949d20, 0x12a4a122, 0x12b4a924, 0x12e4b526, 0x1324c128, 0x1364d52d, 0x13a4e52f, 0x13f4f935, 0x14751538, 0x14d52d3e, 0x15554d44, 0x15d56d4b, 0x16659152, 0x1705b55a, 0x1795e563, 0x1866156c, 0x19364577, 0x1a167d83, 0x1af6b98f, 0x1c07019c, 0x1d4749aa, 0x1e6799bb, 0x1fb7edcc, 0x210855e1, 0x22c8c9f7, 0x24d94613, 0x2709ce2e, 0x28fa5e47, 0x2bab026e, 0x2e9bae8d, 0x30ac4eaf,
0x30acbed5, 0x2ecc22af, 0x2bab4a86, 0x28aa9262, 0x26d9f240, 0x24b9621c, 0x22c8e205, 0x21386ded, 0x1f8809d8, 0x1e67a9c6, 0x1d3759b5, 0x1be715a3, 0x1b06c997, 0x19f6918a, 0x1906517e, 0x18662174, 0x1795e968, 0x16d5c15e, 0x16359955, 0x15c5714f, 0x15255147, 0x14b53541, 0x1455113b, 0x13f4f935, 0x13a4e532, 0x1354d12d, 0x1314c129, 0x12e4b127, 0x12a4a522, 0x12749921, 0x1254911e, 0x12548d1e, 0x1244851e, 0x1234891d, 0x12448d1d, 0x1264951d, 0x12749d20, 0x12a4a523, 0x12f4b526, 0x1334c527, 0x1374d92d, 0x13c4e931, 0x14350535, 0x14951d3b, 0x15253d40, 0x15855d47, 0x1635814e, 0x16b5a556, 0x1785d560, 0x18260569, 0x19063574, 0x19b67180, 0x1ac6a98b, 0x1bc6ed96, 0x1cd731a3, 0x1e1781b7, 0x1f37ddc9, 0x21083ddb, 0x2268adef, 0x24691e09, 0x2649ae2c, 0x28aa3e45, 0x2b4aea60, 0x2deb8e83, 0x2fec32a4,
0x302ca2c9, 0x2e2bf6a8, 0x2b4b3280, 0x28ca865d, 0x2669d636, 0x24294a1a, 0x2268c201, 0x209851e8, 0x1f57f1d5, 0x1e0799c1, 0x1cc749b0, 0x1ba701a2, 0x1aa6b995, 0x19c67988, 0x18e63d7c, 0x18160d6f, 0x1765dd66, 0x16a5b15c, 0x16058954, 0x1565654d, 0x14f54546, 0x1485253e, 0x14150538, 0x13c4f132, 0x1394d930, 0x1324c52b, 0x12e4b526, 0x1284a123, 0x12649521, 0x12248d1d, 0x1224851c, 0x1214811b, 0x12047d19, 0x12047d1b, 0x12147d1c, 0x1214811c, 0x1234891c, 0x12649920, 0x12b4a924, 0x12e4b926, 0x1334c929, 0x1384e12d, 0x13f4f533, 0x14751539, 0x14d52d3e, 0x15554d46, 0x1605794d, 0x16559952, 0x1715c15b, 0x17f5f565, 0x18a62970, 0x1996617b, 0x1a569588, 0x1ba6d594, 0x1c8725a2, 0x1dd76db1, 0x1f07c9c4, 0x207825d6, 0x22088dea, 0x24090a05, 0x25d99220, 0x282a2e42, 0x2a8aca60, 0x2d7b7e83, 0x2f7c02a4,
0x302c6ac2, 0x2dbbe6a4, 0x2aeb0e7a, 0x282a5a54, 0x25f9be31, 0x24093215, 0x2228b9ff, 0x20784dea, 0x1f07e5d5, 0x1db789bd, 0x1c873db1, 0x1b56eda0, 0x1a66a992, 0x19966d85, 0x18c6397b, 0x17e6056c, 0x1735cd61, 0x1665a55a, 0x15f57d54, 0x15555949, 0x14d53544, 0x1455193b, 0x13e4f937, 0x13b4e130, 0x1334cd2c, 0x12e4b526, 0x12b4a924, 0x12749920, 0x1234891e, 0x12047d1c, 0x11f47519, 0x11d47116, 0x11d46d18, 0x11e47116, 0x11e47118, 0x11f47518, 0x12248119, 0x1244891d, 0x12749921, 0x12b4a523, 0x12f4bd26, 0x1364d12a, 0x13b4e930, 0x14450936, 0x1495253a, 0x15254542, 0x15b5654a, 0x16658d51, 0x16f5b15a, 0x1785e563, 0x18761d6d, 0x19665179, 0x1a468584, 0x1b46c992, 0x1c570da0, 0x1d675dad, 0x1ec7b1c0, 0x205811d1, 0x21c87dea, 0x2388f205, 0x25897a1a, 0x27ca0e38, 0x2a3aa65a, 0x2cdb5a7a, 0x2e5bde9e,
0x2fbc62ba, 0x2cdbbea1, 0x2a3afa74, 0x27ca3a4c, 0x25a9b22a, 0x23c92215, 0x21e8a9f5, 0x202839e4, 0x1ed7cdd0, 0x1d7775bb, 0x1c4725a9, 0x1b56e19b, 0x1a26958d, 0x19265d81, 0x18662576, 0x17a5f16a, 0x1705c161, 0x16459556, 0x15a56d50, 0x15054d49, 0x14b52540, 0x14250939, 0x13b4ed33, 0x1364d52e, 0x1304bd2a, 0x12b4a926, 0x12649521, 0x1224891d, 0x1204791b, 0x11d47519, 0x11c46917, 0x11a46515, 0x11a46115, 0x11846115, 0x11a46515, 0x11b46916, 0x11d47118, 0x12147d19, 0x12548d1d, 0x12749d20, 0x12c4ad24, 0x1334c527, 0x13a4dd2e, 0x13f4f535, 0x14751539, 0x14d5353d, 0x15755549, 0x1615814d, 0x16c5ad57, 0x1785d95f, 0x1836096a, 0x19163d76, 0x1a067980, 0x1b06b98f, 0x1c06fd9b, 0x1d3749aa, 0x1e77a1b8, 0x1ff7f9cc, 0x215865e4, 0x2348d9fd, 0x24f95211, 0x2729ee36, 0x29da8652, 0x2c7b3271, 0x2e5bc693,
0x2f0c32ba, 0x2cdb9e9a, 0x2a3ade71, 0x275a2e4c, 0x24f9922c, 0x23690a11, 0x21988df9, 0x1ff829e1, 0x1e97c1cc, 0x1d3769b8, 0x1c0719a7, 0x1b06d19b, 0x19e68d8c, 0x1926517e, 0x18361574, 0x1755e568, 0x16b5b95f, 0x16258d55, 0x1585654c, 0x14f54144, 0x14751d3f, 0x1414fd37, 0x1384e132, 0x1324c92c, 0x12e4b127, 0x12849d23, 0x1244891f, 0x1204811a, 0x11c46d18, 0x11a46515, 0x11845d13, 0x11745512, 0x11645112, 0x11645512, 0x11645912, 0x11745913, 0x11b46516, 0x11e47116, 0x12148119, 0x1254911e, 0x12a4a121, 0x1304b927, 0x1354d12b, 0x13b4ed31, 0x14350536, 0x14b52d3d, 0x15454d44, 0x15f5754b, 0x16759d55, 0x1745c95f, 0x1805fd67, 0x18c63171, 0x19c66d7e, 0x1ac6a98b, 0x1bb6e996, 0x1cf73da9, 0x1e378dba, 0x1fa7e9cb, 0x215855e2, 0x22e8c1f9, 0x24b93e0f, 0x2709ce2e, 0x294a7a4f, 0x2c1b2671, 0x2e5b9e8a,
0x2ecc1ab6, 0x2c4b7e93, 0x29dac26b, 0x270a0e47, 0x24f97e27, 0x2328f60b, 0x215881f1, 0x1fa815db, 0x1e47b1cb, 0x1cd751b7, 0x1be709a2, 0x1ac6c199, 0x19d67d89, 0x18c6457c, 0x17f60d71, 0x1745d966, 0x1685ad5c, 0x15e57d53, 0x15555949, 0x14b53542, 0x1455113a, 0x13b4f134, 0x1364d92f, 0x12f4c12a, 0x12b4a525, 0x12549120, 0x1204811c, 0x11d47119, 0x11946117, 0x11645913, 0x11445111, 0x1154510f, 0x1134490e, 0x1134450e, 0x1144490f, 0x11445110, 0x11745511, 0x11b46515, 0x11d47518, 0x1214851c, 0x12649520, 0x12e4ad25, 0x1324c529, 0x1384e12e, 0x13f4fd34, 0x1495213a, 0x15154541, 0x15a56549, 0x16559151, 0x16e5bd5c, 0x17e5f163, 0x1896256f, 0x1986617c, 0x1a869d88, 0x1b76e195, 0x1cb72da3, 0x1e177db5, 0x1f57d9c4, 0x20e845dd, 0x22a8b1f3, 0x2469320d, 0x26b9c62a, 0x292a5a4a, 0x2bab066e, 0x2dbb868d,
0x2e5c0aaf, 0x2c7b668a, 0x297aae68, 0x26da0e42, 0x24b96e27, 0x22c8ee05, 0x21086df1, 0x1f7801db, 0x1e07a5c6, 0x1cd74db4, 0x1bc6fda3, 0x1a96b192, 0x19a67586, 0x18a63d7a, 0x1806056e, 0x1715cd63, 0x1665a159, 0x15c57550, 0x15354d48, 0x14a52940, 0x14350d3a, 0x13a4e933, 0x1344d12d, 0x12e4b529, 0x12849d22, 0x12448d1e, 0x11e47919, 0x11a46916, 0x11745914, 0x11544d10, 0x1134450f, 0x1114410e, 0x11043d0d, 0x11043d0e, 0x1114410d, 0x1134490e, 0x1144510f, 0x11845912, 0x11c46915, 0x12047919, 0x12548d1d, 0x12b4a521, 0x1304bd27, 0x1384d92d, 0x13e4f532, 0x14551539, 0x15053d40, 0x15856149, 0x1625894f, 0x16f5b55a, 0x1795e561, 0x1866156c, 0x1966597c, 0x1a468d88, 0x1b56d192, 0x1cb71da0, 0x1dd771b4, 0x1f07cdc6, 0x20c83ddb, 0x2268a5ef, 0x24b9220b, 0x2699ae2a, 0x292a4647, 0x2b4af268, 0x2d4b668d,
0x2e2bcea4, 0x2beb5a86, 0x28fa9265, 0x26d9f240, 0x24b95e1e, 0x22c8d605, 0x20c865ef, 0x1f57f5d6, 0x1de795c4, 0x1cc741b1, 0x1b76f1a2, 0x1a56a992, 0x19866585, 0x18862d79, 0x17b5f56c, 0x16f5c961, 0x16359958, 0x15856d51, 0x15154547, 0x1475213f, 0x14050138, 0x1384e132, 0x1304c52d, 0x12b4ad26, 0x12549522, 0x1214811c, 0x11d46d19, 0x11745d14, 0x11444d11, 0x1114410e, 0x1104390d, 0x10e4350a, 0x10d43109, 0x10e4310b, 0x10e4350a, 0x1114390c, 0x1134450e, 0x1154510f, 0x11946113, 0x11c47116, 0x1224851c, 0x12849d21, 0x12e4b524, 0x1334d129, 0x13c4ed30, 0x14350937, 0x14d5313d, 0x15555546, 0x1605814f, 0x16b5a956, 0x1785d961, 0x18360d6a, 0x19164977, 0x1a168584, 0x1b16c591, 0x1c570da2, 0x1da765b0, 0x1ef7bdc1, 0x209825db, 0x224891ed, 0x24091a09, 0x25f99e25, 0x287a3242, 0x2b1ade65, 0x2d1b5a80,
0x2d7bcea8, 0x2bab4283, 0x28ca8e5d, 0x2699e640, 0x24494a1c, 0x2268ce07, 0x21085deb, 0x1f37f1d5, 0x1db789c1, 0x1c9735ae, 0x1b66e5a0, 0x1a469d90, 0x19566182, 0x18862575, 0x1795f16a, 0x16c5bd5f, 0x16258d55, 0x1565654d, 0x14e53d45, 0x1455193d, 0x13d4f936, 0x1364dd30, 0x1314c129, 0x12a4a523, 0x12548d21, 0x11e4751b, 0x11a46516, 0x11645513, 0x11244511, 0x1104390d, 0x10f4350c, 0x10b42909, 0x10c42908, 0x10b42907, 0x10c42d09, 0x10e43109, 0x10f43d0c, 0x1134450e, 0x11745911, 0x11b46915, 0x12047919, 0x1254911e, 0x12b4a923, 0x1334c929, 0x13a4e52e, 0x14450135, 0x14a5253a, 0x15554d45, 0x15f5754b, 0x1685a154, 0x1745d15f, 0x1836056a, 0x18e63979, 0x1a067983, 0x1af6bd8f, 0x1c0709a0, 0x1d8755ae, 0x1ec7adc1, 0x20781dd6, 0x21e885ef, 0x23e90a09, 0x25a98e20, 0x282a1a40, 0x2a8aca60, 0x2cab5a77,
0x2dbbc69a, 0x2b1b2a83, 0x28aa7a5a, 0x2649da3a, 0x24093e18, 0x2248be03, 0x207851ea, 0x1ef7e5d5, 0x1da77dbe, 0x1c4731ae, 0x1b46dd9c, 0x1a16958d, 0x19165581, 0x18562176, 0x1785e568, 0x16b5b55e, 0x15f58555, 0x1545594a, 0x14c53543, 0x1435113b, 0x13d4f135, 0x1334d52f, 0x12d4b929, 0x12849d25, 0x1224891e, 0x11d4711a, 0x11945d16, 0x11445111, 0x11143d0f, 0x10d4310a, 0x10c42d09, 0x10a42508, 0x10942107, 0x10942107, 0x10942107, 0x10a42908, 0x10d43109, 0x11043d0e, 0x11444d10, 0x11945d15, 0x11e47518, 0x1234891d, 0x12a4a521, 0x1324bd26, 0x1394dd2d, 0x13f4f933, 0x14951d3a, 0x15354542, 0x15b56d4b, 0x16659955, 0x1755c55e, 0x1815fd67, 0x18d63574, 0x19c6717e, 0x1ac6b58d, 0x1bc6f99c, 0x1d1751ae, 0x1e77a9bd, 0x20480dd5, 0x219881eb, 0x23c8fa03, 0x25a97e1c, 0x27ca163d, 0x2a5aba5d, 0x2c7b4277,
0x2d4ba69a, 0x2b7b2a7d, 0x284a6a5a, 0x2649ca38, 0x24293a1a, 0x21e8b5ff, 0x20583de6, 0x1f07ddd3, 0x1d677dbd, 0x1c2725ab, 0x1b06d99c, 0x19f68d8a, 0x19164d80, 0x18361175, 0x1765e167, 0x1695a95e, 0x15e58155, 0x1555594b, 0x14b53142, 0x1435093b, 0x13a4ed34, 0x1334d12e, 0x12c4b129, 0x12649d23, 0x1214811d, 0x11c46d19, 0x11745513, 0x1134450f, 0x10f4350d, 0x10c42d09, 0x10942108, 0x10941906, 0x10841905, 0x10641504, 0x10841d05, 0x10a42107, 0x10b42908, 0x10f4390c, 0x1134450f, 0x11845913, 0x11e47117, 0x1224811b, 0x12849d21, 0x12f4b925, 0x1364d52d, 0x13d4f535, 0x14651939, 0x14f53941, 0x15b5694a, 0x16659155, 0x1715c15c, 0x17d5f166, 0x18a62d71, 0x19b66580, 0x1aa6a98b, 0x1bb6f199, 0x1cd73dad, 0x1e679dbe, 0x1ff801d3, 0x21b86dea, 0x2388ea03, 0x25a9721c, 0x27ca0e3a, 0x2a0aa65a, 0x2c4b3274,
0x2cdba6a1, 0x2abb1e80, 0x287a6654, 0x25d9c636, 0x23e93215, 0x21e8adff, 0x204839e4, 0x1ea7cdd0, 0x1d6779bd, 0x1c2721aa, 0x1b06cd9a, 0x19f6898b, 0x18e6497c, 0x18061172, 0x1755dd64, 0x1685a95b, 0x15d57d53, 0x1525554b, 0x14952d41, 0x14150d3a, 0x13a4e534, 0x1334cd2d, 0x12c4ad27, 0x12449121, 0x12047d1c, 0x11a46918, 0x11545513, 0x1104410f, 0x10d4310a, 0x10b42909, 0x10741d07, 0x10541505, 0x10541103, 0x10441104, 0x10641505, 0x10741d06, 0x10a42507, 0x10d4310b, 0x1114410e, 0x11745111, 0x11b46d16, 0x12147d19, 0x1274991f, 0x12d4b124, 0x1344cd2b, 0x13c4f132, 0x14451139, 0x15053941, 0x15856149, 0x16258d50, 0x1715b95c, 0x17c5ed65, 0x18962571, 0x1996617d, 0x1a96a18b, 0x1bb6e999, 0x1cf73dab, 0x1e4791b8, 0x1fd7fdd0, 0x21586de6, 0x2308e9fd, 0x25496a1a, 0x2779fe36, 0x2a3a9e54, 0x2beb3271,
0x2cdb969a, 0x2abb027d, 0x282a5a57, 0x25a9ba31, 0x23a92211, 0x21b8adfb, 0x205835e2, 0x1ec7c9d0, 0x1d0769be, 0x1c0719aa, 0x1ac6c997, 0x19e6818c, 0x18d6457e, 0x17e60970, 0x1725d565, 0x1665a15a, 0x15b57150, 0x15155149, 0x14952541, 0x14150537, 0x1384e132, 0x1304c52b, 0x12a4a526, 0x12248d20, 0x11e4751a, 0x11846116, 0x11445111, 0x10f43d0d, 0x10c42d0a, 0x10842107, 0x10541505, 0x10441103, 0x10240903, 0x10440902, 0x10240d02, 0x10641904, 0x10942106, 0x10c42d08, 0x1104390c, 0x11445110, 0x11946113, 0x12047918, 0x12649120, 0x12c4ad23, 0x1324c929, 0x13a4e930, 0x14350939, 0x14e5313e, 0x15755947, 0x16258550, 0x16c5b55b, 0x17a5e962, 0x18961d6f, 0x19765d7c, 0x1a769d8a, 0x1b96e597, 0x1cc731aa, 0x1e378dba, 0x1f87f5ce, 0x213865e4, 0x2308d5fd, 0x24f95e15, 0x2779f233, 0x29da9e5a, 0x2c1b0e6e,
0x2cab969a, 0x2abb067a, 0x27ca4e54, 0x25d9ae31, 0x23892615, 0x21b8a1fd, 0x1ff831e4, 0x1e67c1cc, 0x1d3761bb, 0x1c070da9, 0x1ad6c599, 0x19d68189, 0x18e63d7c, 0x17d60571, 0x1715cd62, 0x16559d5a, 0x15b57151, 0x15054549, 0x14752540, 0x13f50139, 0x1364dd32, 0x1304c52a, 0x1284a526, 0x12148921, 0x11d47519, 0x11745d15, 0x11344911, 0x10e4390d, 0x10b42909, 0x10741d07, 0x10541504, 0x10240902, 0x10240901, 0x10240902, 0x10240901, 0x10440d04, 0x10841d06, 0x10a42507, 0x10e4390b, 0x11344d0f, 0x11846114, 0x11e47918, 0x1244911c, 0x12b4a924, 0x1324c92b, 0x13a4e530, 0x14150537, 0x14c52d3e, 0x15655945, 0x1625814f, 0x16b5ad58, 0x1785e563, 0x18661d6e, 0x1966597b, 0x1a569589, 0x1b66dd96, 0x1cb731aa, 0x1e0781ba, 0x1f87e5ce, 0x21385de4, 0x22e8d1ff, 0x25195218, 0x2759ee31, 0x2a0a8e57, 0x2b4b2a6e,
0x2cdb8e90, 0x2abafa74, 0x27aa4652, 0x25a9aa33, 0x23891a13, 0x21c899fb, 0x1ff825e2, 0x1e67c1cc, 0x1d1761b8, 0x1bb70da7, 0x1a96b995, 0x19c67988, 0x18b63d7a, 0x17f6056f, 0x16f5cd64, 0x16559959, 0x15b57150, 0x15154546, 0x14551d40, 0x13d4f937, 0x1374dd32, 0x12f4bd2b, 0x12849d25, 0x12148920, 0x11c46d1b, 0x11745d16, 0x11244511, 0x10e4350d, 0x10a42509, 0x10841506, 0x10540d04, 0x10240502, 0x10140502, 0x10140501, 0x10240501, 0x10341102, 0x10741905, 0x10942507, 0x10e4350b, 0x1114490f, 0x11645d13, 0x11e47119, 0x1224891c, 0x12a4a923, 0x1324c527, 0x1394e530, 0x14150535, 0x14c5293d, 0x15455548, 0x15e57d4d, 0x16b5ad59, 0x1785e162, 0x1866156d, 0x1936517a, 0x1a268d85, 0x1b66d995, 0x1c8729a6, 0x1e077db8, 0x1f57e1c9, 0x212855e1, 0x2308cdf9, 0x24995213, 0x2759e636, 0x29da7e54, 0x2b7b0277,
0x2cdb8e8d, 0x2a3af277, 0x282a464f, 0x2569aa31, 0x23691a11, 0x21c895f7, 0x1ff829df, 0x1e67bdce, 0x1d075db7, 0x1be70da4, 0x1aa6c19a, 0x19c6798a, 0x18b63d7b, 0x17d5fd70, 0x1715c964, 0x16359958, 0x15a56d4f, 0x15054548, 0x1455193e, 0x13d4f938, 0x1354d930, 0x12e4bd2b, 0x1274a124, 0x1214851e, 0x11c46d19, 0x11645916, 0x11244510, 0x10d4350d, 0x10a42109, 0x10541506, 0x10340d03, 0x10240502, 0x10040102, 0x10140500, 0x10040102, 0x10240902, 0x10641504, 0x10a42107, 0x10e4310a, 0x1114450e, 0x11845d13, 0x11c46d18, 0x1234891d, 0x12a4a122, 0x1304c528, 0x13a4e12f, 0x14350135, 0x14b5293d, 0x15555145, 0x15f57d4f, 0x16b5ad57, 0x1785e165, 0x1866156d, 0x1916517b, 0x1a568d86, 0x1b96d995, 0x1cb72da6, 0x1dd781b7, 0x1f77e1cb, 0x212859e2, 0x22e8cdfd, 0x24d94e15, 0x2729e233, 0x29da7e54, 0x2bab026b,
0x2c7b7e93, 0x2a8afa74, 0x27fa4654, 0x25d9a22e, 0x23691e11, 0x21b895fb, 0x1fb825e2, 0x1e77bdcc, 0x1d1759b7, 0x1bb709a6, 0x1ad6b997, 0x19a67589, 0x18e63d7a, 0x17d60170, 0x1715cd63, 0x16559559, 0x15a56d4f, 0x14f54546, 0x14651d40, 0x13f4f537, 0x1354d531, 0x12d4bd2a, 0x12749d23, 0x1214851f, 0x11a46d1b, 0x11645916, 0x1134410f, 0x10d4310c, 0x10842509, 0x10441505, 0x10240d02, 0x10140501, 0x10040102, 0x10140501, 0x10140501, 0x10240904, 0x10541505, 0x10842106, 0x10d43109, 0x1124410e, 0x11645913, 0x11d47118, 0x1234891d, 0x12a4a522, 0x1314c129, 0x1384dd2f, 0x14150135, 0x1495293e, 0x15555146, 0x15e57d4f, 0x16b5ad56, 0x1785e162, 0x18460d6d, 0x19164d7a, 0x1a468d86, 0x1b56d194, 0x1c8729a7, 0x1e177db8, 0x1fa7e1cb, 0x21084ddd, 0x22a8c1fb, 0x24d94613, 0x2729d633, 0x297a7e54, 0x2b7b0e6b,
0x2c4b6690, 0x2a3af277, 0x27aa4e4f, 0x25899e31, 0x23891a11, 0x219895f9, 0x1ff82de2, 0x1e67bdcb, 0x1d1761b8, 0x1bc705aa, 0x1ac6c197, 0x19a67588, 0x18b6397d, 0x17e5fd71, 0x16e5c964, 0x16359559, 0x15956d50, 0x15054546, 0x14651d40, 0x13d4f939, 0x1354d932, 0x12e4b92b, 0x12749d24, 0x1214811f, 0x11b46d1b, 0x11645915, 0x11044110, 0x10c42d0c, 0x10842508, 0x10541504, 0x10240903, 0x10040102, 0x10040502, 0x10140102, 0x10140502, 0x10340902, 0x10641504, 0x10942507, 0x10c42d0b, 0x1124450e, 0x11745912, 0x11d47118, 0x1234891c, 0x12a4a523, 0x1314c129, 0x1384e12f, 0x14150536, 0x14a5293d, 0x15354d46, 0x15f57d4f, 0x1695a959, 0x1775d963, 0x1856156d, 0x1936497b, 0x1a268d88, 0x1b56d196, 0x1c7725a7, 0x1de77db7, 0x1f57e1c9, 0x212855df, 0x22a8c1f9, 0x24d94a15, 0x2709d631, 0x29aa7e52, 0x2b7b0668,
0x2c4b7e8d, 0x2a5af274, 0x27fa3e4f, 0x2569aa31, 0x23891e11, 0x217895fb, 0x1ff825e1, 0x1e97b5cc, 0x1d075dba, 0x1be709aa, 0x1aa6c19b, 0x19a67989, 0x18a6357d, 0x17c60170, 0x1715cd65, 0x16559559, 0x15956d50, 0x15054547, 0x14751d40, 0x13d4f939, 0x1354d532, 0x12f4b92b, 0x12749d24, 0x1214811f, 0x11b46d19, 0x11645515, 0x1104410f, 0x10b4310c, 0x10a42109, 0x10541506, 0x10340d03, 0x10040102, 0x10040100, 0x10040102, 0x10240502, 0x10240d02, 0x10641505, 0x10a42509, 0x10e4310b, 0x1144450f, 0x11745913, 0x11e47118, 0x1234891c, 0x12a4a522, 0x1304c129, 0x1394e130, 0x14150536, 0x14b5293e, 0x15355147, 0x15f57d4f, 0x16a5a956, 0x1785dd62, 0x1856156c, 0x19264d79, 0x1a469186, 0x1b46d197, 0x1c5729a4, 0x1db77db7, 0x1f77e1cc, 0x212851df, 0x22e8cdf9, 0x24b94a15, 0x2729da36, 0x297a7e54, 0x2b4b0668,
0x2cab7e8d, 0x2a8afa7a, 0x27fa4654, 0x2589aa2e, 0x23a91e13, 0x217899f9, 0x1ff825e2, 0x1e77c1cc, 0x1d3761bd, 0x1be709a7, 0x1a96b999, 0x19a67d8b, 0x18b63d7c, 0x17d60170, 0x16f5d165, 0x16459559, 0x15956952, 0x15054147, 0x14551d40, 0x13e4f938, 0x1354d931, 0x12e4b92c, 0x1274a126, 0x1214851e, 0x11c46d1b, 0x11645916, 0x11044512, 0x10e4350d, 0x1084250a, 0x10541906, 0x10340d04, 0x10140503, 0x10040101, 0x10140102, 0x10240902, 0x10340d05, 0x10741905, 0x10a42509, 0x10e4310c, 0x1134490f, 0x11845913, 0x11d47119, 0x1234891c, 0x12a4a522, 0x1314c128, 0x1384e130, 0x14150136, 0x14b5293e, 0x15554d45, 0x15f57d4e, 0x16a5a958, 0x1765dd62, 0x1866156d, 0x19165579, 0x1a268d85, 0x1b46d195, 0x1c8729a6, 0x1de77db8, 0x1f57ddcc, 0x20e859e4, 0x22e8cdfb, 0x24d94e15, 0x2709da33, 0x297a8654, 0x2bab166e,
0x2cdb9e90, 0x2aeb067a, 0x27ca4e54, 0x25a9ae31, 0x23891e15, 0x21c8a1f9, 0x1ff82de2, 0x1e47c1cc, 0x1d1761b8, 0x1c0711ad, 0x1aa6c59a, 0x19b6798b, 0x18d63d7c, 0x17d60572, 0x1725cd66, 0x1665995a, 0x15b57152, 0x15054149, 0x14551d41, 0x13e4fd3b, 0x1364e132, 0x12f4c12c, 0x1284a127, 0x12348520, 0x11c4711b, 0x11745d16, 0x11344912, 0x10e4350e, 0x10a4250a, 0x10741907, 0x10440d05, 0x10240905, 0x10140502, 0x10040503, 0x10340904, 0x10541104, 0x10741d07, 0x10a42908, 0x10f4390c, 0x11444d10, 0x11946116, 0x11e4751a, 0x12348d1e, 0x12a4a924, 0x1324c529, 0x1384e130, 0x14350537, 0x14c52d3e, 0x15355145, 0x1615814f, 0x16b5ad56, 0x1765e163, 0x1876156e, 0x19265179, 0x1a269589, 0x1b46d996, 0x1cc725a6, 0x1e1781b5, 0x1fa7e5cc, 0x210855e4, 0x22c8cdfb, 0x25195a18, 0x2759e633, 0x294a8654, 0x2bab066b,
0x2d1b9693, 0x2aeb1683, 0x282a5a57, 0x25f9ae31, 0x23c92615, 0x21b8a5fb, 0x20282de4, 0x1e97c9d0, 0x1d1769b8, 0x1c0719a9, 0x1ad6c99a, 0x19f6818d, 0x18d64980, 0x17e60d72, 0x1745d166, 0x1665a15b, 0x15c57553, 0x15254d4b, 0x14852542, 0x13f5013b, 0x1384e133, 0x1314c52d, 0x1294a526, 0x12348d21, 0x11d4751e, 0x11846118, 0x11344d13, 0x10f43910, 0x10a4290c, 0x10741d08, 0x10541506, 0x10440d05, 0x10340904, 0x10340903, 0x10340d04, 0x10541506, 0x10942108, 0x10c42d0b, 0x10f4390e, 0x11444d11, 0x11946117, 0x11e4791b, 0x1234911e, 0x12b4ad26, 0x1324c92b, 0x13a4e932, 0x14350937, 0x14b52d40, 0x15555547, 0x1605814f, 0x1695b158, 0x1795e564, 0x18661d6e, 0x1956557b, 0x1a769586, 0x1b56dd96, 0x1cb731a7, 0x1de789b7, 0x1f87e9cb, 0x210859e1, 0x22c8d1f9, 0x24f95a18, 0x2729ee33, 0x29aa8657, 0x2bab0e6e,
0x2d4bae9a, 0x2b1b0e7d, 0x284a5a57, 0x25f9be36, 0x23a92615, 0x21e8a9f9, 0x204835e4, 0x1ea7c5ce, 0x1d3771bd, 0x1c2719ab, 0x1b06c99e, 0x19f6818d, 0x18c64580, 0x18060d74, 0x1725d569, 0x1665a55e, 0x15d57954, 0x15254d4b, 0x14952542, 0x1415013c, 0x1384dd35, 0x1304c52d, 0x12b4a92a, 0x12349123, 0x11e4791e, 0x11946519, 0x11345115, 0x11143d10, 0x10d4310e, 0x10a4250a, 0x10641907, 0x10441105, 0x10341104, 0x10440d04, 0x10541106, 0x10841906, 0x1094250a, 0x10c4310c, 0x11043d10, 0x11545112, 0x11a46518, 0x11f4791b, 0x12549520, 0x12c4b126, 0x1334cd2c, 0x13b4e932, 0x14250d3a, 0x14b53141, 0x15755947, 0x1625854f, 0x16e5b15a, 0x17a5e562, 0x1886216d, 0x1966557b, 0x1a569d89, 0x1b66e59a, 0x1cb731a6, 0x1e078dba, 0x1f77f1d1, 0x212861e4, 0x2308d5ff, 0x25495e1a, 0x2729fe31, 0x29da9a54, 0x2c1b1e71,
0x2cdb9e9a, 0x2aeb167d, 0x287a5a5d, 0x25d9c638, 0x23c92615, 0x21e8b5ff, 0x205835e6, 0x1ec7d5d1, 0x1d676dbe, 0x1c0719aa, 0x1af6d199, 0x19f6898f, 0x18f64983, 0x18161176, 0x1745e16c, 0x1685a960, 0x15e58156, 0x1545514b, 0x14b52d45, 0x1415093d, 0x13a4e535, 0x1334cd30, 0x12c4ad29, 0x12549524, 0x12047d1e, 0x11a4651b, 0x11545515, 0x11144512, 0x10d4350e, 0x10a4290c, 0x10942109, 0x10641907, 0x10641506, 0x10541906, 0x10741907, 0x10842108, 0x10a42909, 0x10e4390c, 0x1114450f, 0x11645513, 0x11a46918, 0x11f4811c, 0x12749d21, 0x12e4b526, 0x1344d12d, 0x13c4f133, 0x14551139, 0x14f53543, 0x15755d49, 0x16158952, 0x16c5b95d, 0x17a5ed64, 0x18862172, 0x1996617c, 0x1a66a589, 0x1ba6ed97, 0x1cf739a6, 0x1e478dbb, 0x1fa7f9d1, 0x213869e8, 0x2328de01, 0x25496a1c, 0x27aa0236, 0x2a0a9e57, 0x2c1b2677,
0x2d4bb6a1, 0x2b4b1680, 0x287a6a62, 0x2619ca3a, 0x23e9321c, 0x2228b601, 0x20483deb, 0x1ed7ddd3, 0x1d8779c0, 0x1c5729b1, 0x1b16d99c, 0x1a069990, 0x19165583, 0x18461977, 0x1755dd6e, 0x16a5b161, 0x15f58557, 0x15555d50, 0x14b53147, 0x14351140, 0x13a4f139, 0x1324cd31, 0x12e4b52c, 0x12749927, 0x12048520, 0x11c46d1c, 0x11745d18, 0x11344914, 0x10f4390f, 0x10c4350d, 0x10a4290c, 0x10842109, 0x10841d07, 0x10841d07, 0x10842108, 0x10c4290a, 0x10c4310c, 0x11043d0e, 0x11444912, 0x11845915, 0x11d47119, 0x1224891e, 0x1294a123, 0x12f4b527, 0x1364d52e, 0x13d4f136, 0x1475153a, 0x14d53d43, 0x1585614b, 0x16459152, 0x16f5bd5e, 0x17c5f168, 0x18a62574, 0x1996697e, 0x1aa6a98c, 0x1b96f19b, 0x1cd749ab, 0x1e479dbe, 0x1ff805d1, 0x219871e8, 0x2368f203, 0x25897a20, 0x27aa1640, 0x2a5aa660, 0x2c4b2a77,
0x2d1bb6a4, 0x2aeb2686, 0x287a7a60, 0x2649ce3d, 0x24094a1e, 0x2248b9ff, 0x20984deb, 0x1ef7e9d5, 0x1d8785c3, 0x1c772db4, 0x1b46e5a2, 0x1a169d92, 0x19565988, 0x18762179, 0x1785ed6e, 0x16b5b562, 0x16158959, 0x1555614f, 0x14c53948, 0x14551542, 0x13b4f537, 0x1344d932, 0x12f4b92d, 0x1284a127, 0x12248923, 0x11e4751e, 0x11846118, 0x11545115, 0x11344511, 0x10e43510, 0x10b42d0d, 0x10a4290b, 0x1094250a, 0x10942509, 0x1094290a, 0x10d4310c, 0x10e4390d, 0x11144111, 0x11445113, 0x11946117, 0x11d47519, 0x12348d1f, 0x12b4a523, 0x12f4bd29, 0x1354d92f, 0x13e4f935, 0x14751d3d, 0x15254544, 0x15956d4c, 0x16359d55, 0x1715c15f, 0x17f5f968, 0x18a63175, 0x19a66d82, 0x1ad6b18f, 0x1be6f99e, 0x1d074dae, 0x1e979dc1, 0x200809d5, 0x21c881ed, 0x2388f607, 0x25a97e20, 0x27fa1a42, 0x2a5ac260, 0x2d4b3a77,
0x2d7bcea1, 0x2bab4a86, 0x292a8e65, 0x2649e242, 0x24294e20, 0x2288ce09, 0x20b855ed, 0x1f57f1da, 0x1dd791c4, 0x1cb73db2, 0x1b56e9a4, 0x1a56a595, 0x19666586, 0x1866297b, 0x1785f170, 0x16f5c164, 0x1635915b, 0x15956953, 0x14e5414a, 0x14651d41, 0x13f4fd3a, 0x1364dd35, 0x1314c12f, 0x12a4ad2a, 0x12549124, 0x11f47d1f, 0x11b4691b, 0x11745917, 0x11344914, 0x11044111, 0x10e4390f, 0x10d4310d, 0x10b42d0c, 0x10c42d0d, 0x10e4310d, 0x10e4390e, 0x1114410f, 0x11444d12, 0x11745915, 0x11b46919, 0x1204811c, 0x12549522, 0x12b4ad27, 0x1324c92d, 0x1394e531, 0x14250538, 0x1495253e, 0x15254946, 0x15d5714d, 0x16659d57, 0x1745d160, 0x1816056b, 0x18c63579, 0x19d67984, 0x1ae6b992, 0x1c07019f, 0x1d3759b2, 0x1e77adc3, 0x202815d6, 0x21c885eb, 0x2368fa0b, 0x25d98e23, 0x284a2642, 0x2aeaca65, 0x2cdb4a86,
0x2e5bf6a1, 0x2c1b5a8d, 0x294a9e65, 0x26b9f245, 0x24696a20, 0x22a8da0b, 0x210865f1, 0x1f5801db, 0x1e079dc8, 0x1cb745b5, 0x1ba6f5a6, 0x1a86a995, 0x19966d89, 0x18a6357b, 0x17d5f972, 0x1705c967, 0x16559d5f, 0x15957155, 0x1525454c, 0x14952542, 0x1405053d, 0x1384e536, 0x1324cd30, 0x12c4ad2a, 0x12749d26, 0x12248120, 0x11d4711b, 0x1194611a, 0x11645115, 0x11344913, 0x11144111, 0x10f4390f, 0x10e4350e, 0x10f4350e, 0x10f43d0f, 0x10f4410f, 0x11244911, 0x11745515, 0x11946118, 0x11c47119, 0x1224851f, 0x12649925, 0x12d4b528, 0x1354d12c, 0x13b4ed32, 0x1435093b, 0x14b52d40, 0x15455549, 0x15f57d50, 0x1695a55a, 0x1745d562, 0x18160d6f, 0x19064579, 0x19e68184, 0x1af6c992, 0x1c370d9f, 0x1d675db5, 0x1ed7bdc6, 0x205829db, 0x220891f1, 0x23c90e0d, 0x25f99a2c, 0x284a3a47, 0x2aeae262, 0x2d4b5e86,
0x2e9c0aaf, 0x2c4b6e90, 0x297aae6b, 0x26da0e47, 0x24d97a27, 0x2308f60d, 0x213871f5, 0x1f8809df, 0x1e37a5cb, 0x1cd74db7, 0x1b9701a7, 0x1aa6c19c, 0x19c6798b, 0x18d63d80, 0x17f60974, 0x1715d568, 0x1665a961, 0x15c57954, 0x1525514f, 0x14a52d45, 0x1425113e, 0x13b4f137, 0x1354d533, 0x12f4b52e, 0x1294a129, 0x12248d24, 0x11f47d1e, 0x11c46d1b, 0x11746118, 0x11545516, 0x11344913, 0x11344513, 0x11144511, 0x11044511, 0x11244512, 0x11344913, 0x11645114, 0x11845d17, 0x11c46d1b, 0x11f47d1d, 0x12349121, 0x12a4a524, 0x12f4c12a, 0x1364d930, 0x13f4f934, 0x1455153d, 0x14d53943, 0x15655d4a, 0x16058154, 0x16b5b15b, 0x1785e166, 0x1846156e, 0x1926517c, 0x1a068d8a, 0x1b36d197, 0x1c371da3, 0x1da76db7, 0x1ef7c5c8, 0x207839dd, 0x2208a1f3, 0x2429260d, 0x2619ae31, 0x28ca4e4f, 0x2b4af26e, 0x2d7b8686,
0x2ecc22af, 0x2c7b8693, 0x2a0aca6e, 0x272a1a4a, 0x25198a2c, 0x2349020b, 0x212889f9, 0x1fb815e6, 0x1e47b5ce, 0x1d0759bb, 0x1be711ab, 0x1ad6bd9c, 0x19f6818d, 0x18c64982, 0x18261176, 0x1755dd6d, 0x16b5b162, 0x15f58159, 0x15655d4f, 0x14c53947, 0x14351941, 0x13d4f53a, 0x1364dd35, 0x1304c530, 0x12b4ad29, 0x12649927, 0x12148521, 0x11e4751e, 0x11b4691b, 0x11845d18, 0x11645516, 0x11545114, 0x11344d13, 0x11444915, 0x11345115, 0x11745516, 0x11745d18, 0x11a4691b, 0x11e4751c, 0x12148920, 0x12649925, 0x12d4b129, 0x1324cd2d, 0x13a4e133, 0x13f4fd37, 0x14751d40, 0x15054145, 0x15a5654d, 0x16258d55, 0x16b5b95e, 0x17b5e968, 0x18662174, 0x19665d80, 0x1a66998d, 0x1b76dd9a, 0x1c872daa, 0x1db779ba, 0x1f27d5ce, 0x20c849e2, 0x2268b5f9, 0x24493613, 0x26b9ca2e, 0x28fa6652, 0x2beb0e74, 0x2deb8690,
0x2fbc3eb6, 0x2d4b9e9e, 0x2a5ad674, 0x277a2e52, 0x25899e2e, 0x23690e13, 0x21c895fd, 0x202829e8, 0x1ea7c1d0, 0x1d476dc0, 0x1c2721b2, 0x1b16d1a0, 0x1a269594, 0x19165583, 0x18662179, 0x1795ed6e, 0x16d5bd66, 0x1625915a, 0x15956954, 0x1505454b, 0x14752545, 0x1405093d, 0x13a4ed39, 0x1334d132, 0x12e4b92c, 0x1284a529, 0x12449126, 0x12148123, 0x11d4751e, 0x11b4691b, 0x11846119, 0x11645d18, 0x11645d18, 0x11745918, 0x11845d18, 0x11846519, 0x11b46d1a, 0x11d4751c, 0x1214811e, 0x12549523, 0x12a4a527, 0x12f4bd2b, 0x1354d930, 0x13b4ed35, 0x14450d3b, 0x14952d42, 0x15554d48, 0x15b57152, 0x16559d56, 0x1735cd62, 0x17e6016c, 0x18a62d76, 0x19966d83, 0x1a86a98d, 0x1ba6f19b, 0x1cd739ad, 0x1e3791be, 0x1fa7edce, 0x21285de6, 0x22e8c1ff, 0x24d94e18, 0x2699da33, 0x294a7a54, 0x2c4b267a, 0x2e9bbe93,
0x2f7c4ec2, 0x2d4bbea1, 0x2abb027a, 0x284a464f, 0x25a9b233, 0x23c9221a, 0x2208aa03, 0x202839ed, 0x1ef7d9da, 0x1d8779c3, 0x1c7731b2, 0x1b46e5a2, 0x1a56a196, 0x1976658a, 0x1886297c, 0x17b5f972, 0x1705c968, 0x1665a15d, 0x15b57556, 0x15254d4d, 0x14a52d48, 0x14451140, 0x13b4f53a, 0x1364d935, 0x1314c530, 0x12b4ad2c, 0x12749d28, 0x12448d23, 0x12047d20, 0x11d4751f, 0x11b46d1c, 0x11a4651b, 0x1194651b, 0x11b4691b, 0x11b4691c, 0x11b46d1c, 0x11d4751e, 0x12048120, 0x12448d21, 0x1284a125, 0x12d4b529, 0x1324c92d, 0x1384e132, 0x13c4f937, 0x1455193f, 0x14d53545, 0x15555d4b, 0x15f57d54, 0x16a5ad5b, 0x1765dd64, 0x17f6056e, 0x18d63d7a, 0x19b67986, 0x1ac6b991, 0x1bf701a0, 0x1cf745ae, 0x1e47a1c0, 0x1fa801d3, 0x21386dea, 0x2308de03, 0x24f9621a, 0x2729f23a, 0x29da9a5a, 0x2c4b427d, 0x2e5bde97,
0x30ac86cd, 0x2e2bdeac, 0x2aeb167d, 0x287a6660, 0x25d9c63d, 0x24093e1e, 0x2268ba07, 0x209851ef, 0x1f37e5d8, 0x1e0791c6, 0x1c9741b5, 0x1b56eda7, 0x1a86b59a, 0x19a6718c, 0x18b63d80, 0x17f60d76, 0x1735d969, 0x16a5ad60, 0x15f5855a, 0x15555d51, 0x14e5394a, 0x14651d43, 0x13e5013d, 0x13a4e537, 0x1324d133, 0x12e4b92f, 0x12a4a92b, 0x12749926, 0x12248d24, 0x12148122, 0x11f47d20, 0x11d47520, 0x11d4751e, 0x11d4711d, 0x11d47520, 0x11f47d1f, 0x12148121, 0x12348d22, 0x12749d27, 0x12a4ad29, 0x12f4c12c, 0x1354d533, 0x13a4ed36, 0x1425053a, 0x14952542, 0x15054147, 0x1585694f, 0x16358d56, 0x16d5b95f, 0x1785e568, 0x18461572, 0x19064d7d, 0x1a06858b, 0x1af6c997, 0x1c3709a6, 0x1d4759b4, 0x1ea7adc6, 0x1fd811d5, 0x21e87def, 0x2368f607, 0x25697a1e, 0x27ca0a40, 0x2a5ab265, 0x2d1b5e80, 0x2f7be69e,
0x311cb2d9, 0x2e9c12b3, 0x2b4b3286, 0x28ca7e62, 0x2699e240, 0x24495223, 0x22a8d20d, 0x210861f3, 0x1f87fddf, 0x1e37a5cc, 0x1cc751bb, 0x1bb709ad, 0x1aa6bd9c, 0x19d6858f, 0x18e64d85, 0x1846157a, 0x1755e16d, 0x16b5b566, 0x1625915d, 0x15856955, 0x1525454f, 0x14952d46, 0x14250d41, 0x13a4f53b, 0x1374dd37, 0x1324cd30, 0x12e4b52e, 0x12a4a52c, 0x12549927, 0x12348d25, 0x12148525, 0x11f48121, 0x11f48121, 0x11f48122, 0x12048121, 0x12148923, 0x12349525, 0x12749d25, 0x12a4a929, 0x12e4b92c, 0x1324c930, 0x1384e536, 0x13f4f939, 0x1445153d, 0x14b53144, 0x1545514b, 0x15b57554, 0x16659959, 0x1705c562, 0x17a5f16a, 0x18862577, 0x19365d80, 0x1a469d8c, 0x1b36d99a, 0x1c871da7, 0x1d7769b7, 0x1ef7c1c8, 0x202825dd, 0x22088df5, 0x23c9060b, 0x25d99227, 0x27fa2642, 0x2abace65, 0x2dbb7e86, 0x2f3c0aac,
0x315cced5, 0x2ecc2aba, 0x2c4b5290, 0x297a9e6b, 0x2699fe47, 0x25496a2c, 0x2308ee11, 0x213875fb, 0x1fd815e1, 0x1e67b5d1, 0x1d1765be, 0x1c2719ae, 0x1af6d1a2, 0x1a069195, 0x19365989, 0x1856257d, 0x17a5f571, 0x16e5c569, 0x1655995e, 0x15a57558, 0x1545554f, 0x14b5394a, 0x14651d45, 0x13f5013f, 0x13a4e93b, 0x1344d935, 0x1314c532, 0x12c4b52e, 0x1284a52a, 0x12649d29, 0x12549127, 0x12449124, 0x12248d25, 0x12348d25, 0x12349525, 0x12649927, 0x1274a127, 0x12a4a929, 0x12e4b92d, 0x1324c530, 0x1364dd34, 0x13b4f137, 0x1415093f, 0x14952144, 0x14d53d49, 0x15855d4f, 0x16158556, 0x1695a95e, 0x1745d566, 0x1806056d, 0x18b63979, 0x19966d85, 0x1a86a991, 0x1b76e5a0, 0x1cb731ad, 0x1dd77dba, 0x1f37d9ce, 0x209841df, 0x2268a9f7, 0x23e9260f, 0x2649ae2c, 0x28ca4e4a, 0x2abae265, 0x2e2b9e90, 0x2fec2ab3,
0x321ceee5, 0x2fbc46c2, 0x2c4b6697, 0x29aac277, 0x277a264c, 0x25498a31, 0x23490e15, 0x21b891ff, 0x20282dea, 0x1ef7c9d6, 0x1d8779c4, 0x1c4731b5, 0x1b66e9a4, 0x1a46a999, 0x19766d8c, 0x18a63581, 0x17c60175, 0x1715d96e, 0x1675ad63, 0x15f58d5c, 0x15756955, 0x1505454f, 0x14852d49, 0x14351142, 0x13d4f93d, 0x1384e537, 0x1354d535, 0x1324c532, 0x12d4b930, 0x12a4a92d, 0x1284a52b, 0x1284a129, 0x12749d27, 0x12849d29, 0x1274a129, 0x12a4a92b, 0x12b4b12c, 0x12e4b92f, 0x1324c931, 0x1374d934, 0x1394e937, 0x13f5013e, 0x14551940, 0x14c53146, 0x1535514e, 0x15b56d52, 0x1625955a, 0x16e5b961, 0x1785e56b, 0x18561d75, 0x1906457e, 0x19e67d88, 0x1ae6c194, 0x1bf6f9a2, 0x1d0745b0, 0x1e079dc4, 0x1f37edd1, 0x210851e4, 0x22a8b9f9, 0x24693e13, 0x2669ca31, 0x28ca664f, 0x2b7b0e71, 0x2e9bc693, 0x306c56b3,
0x332d1eee, 0x302c72c9, 0x2cdba69e, 0x2a3ade77, 0x27fa3e4f, 0x2589a23a, 0x23a9261c, 0x2208b203, 0x209845ef, 0x1f37e1da, 0x1dd791cb, 0x1cc73db8, 0x1bb701ad, 0x1a86bd9e, 0x19c68191, 0x18e64988, 0x1846157b, 0x1765e96f, 0x16b5c169, 0x16559d61, 0x15a57558, 0x15455553, 0x14d5394e, 0x14752547, 0x14150d42, 0x13b4f53c, 0x1384e53a, 0x1334d534, 0x1304c934, 0x12d4bd31, 0x12c4b530, 0x12b4b12d, 0x12a4ad2c, 0x12b4ad2d, 0x12b4b12d, 0x12c4b92f, 0x12f4c12f, 0x1324c930, 0x1364d935, 0x1394e538, 0x13c4f93b, 0x14151140, 0x14752545, 0x14e54549, 0x1565654f, 0x15f58157, 0x1675ad5e, 0x1735cd66, 0x17e5f971, 0x18862579, 0x19565981, 0x1a26958c, 0x1af6d199, 0x1bf70da7, 0x1d3759b7, 0x1e77a5c6, 0x1fd809d6, 0x21586ded, 0x22e8ddff, 0x24d95e1e, 0x26d9e63a, 0x294a8652, 0x2c1b3274, 0x2ecbe697, 0x319c7abe,
0x33ad5ef7, 0x311cb2d5, 0x2d7bceaf, 0x2b1b0e83, 0x284a665d, 0x2619d640, 0x24294623, 0x2288ce0b, 0x20b865f9, 0x1f77f9df, 0x1e37a1cc, 0x1d1759be, 0x1bf70db1, 0x1af6c9a4, 0x1a069596, 0x1936618c, 0x18863181, 0x17a60175, 0x1715d56e, 0x1685ad64, 0x15e5895f, 0x15756957, 0x15154d52, 0x14a5354b, 0x14551d47, 0x13f50543, 0x13d4f13d, 0x1394e13b, 0x1354d938, 0x1324cd35, 0x1314c532, 0x12f4bd32, 0x12f4bd32, 0x12f4c132, 0x1304c134, 0x1314c932, 0x1324d135, 0x1364d935, 0x1384e139, 0x13d4f93d, 0x14150940, 0x14751d45, 0x14d53548, 0x1515514e, 0x15b57154, 0x1635955d, 0x16b5bd61, 0x1755e569, 0x18260d75, 0x18e63d7d, 0x19967585, 0x1a66a191, 0x1b76e19e, 0x1c8725a9, 0x1d6771bd, 0x1ed7c9c8, 0x204819da, 0x21c885ed, 0x2388f609, 0x25d96e20, 0x275a0a3d, 0x29da9e5a, 0x2c7b5280, 0x2fbc0aa4, 0x325ca2c2,
0x343d8704, 0x31dcdadd, 0x2e5c0ab6, 0x2bab328d, 0x292a8668, 0x2699e647, 0x24695e2c, 0x22c8ea11, 0x21587a01, 0x1ff811e6, 0x1e77bdd6, 0x1d6769c4, 0x1c5725b5, 0x1b46e5a7, 0x1a66a99a, 0x19667191, 0x18c63d84, 0x1806117c, 0x1765e56f, 0x16b5bd69, 0x16359962, 0x15d5795c, 0x15455d56, 0x14d54150, 0x14952d49, 0x14551545, 0x14050141, 0x13d4f53d, 0x13a4e93b, 0x1374dd3a, 0x1354d537, 0x1334cd35, 0x1334d135, 0x1324cd35, 0x1334d135, 0x1364d937, 0x1384dd39, 0x1394ed3b, 0x13b4f93d, 0x14150940, 0x14551d43, 0x14b53147, 0x1505494c, 0x15856552, 0x15f58558, 0x1685a560, 0x16f5c966, 0x17b5f56d, 0x18461d76, 0x19365182, 0x1a16858a, 0x1ac6bd99, 0x1bc6f9a2, 0x1cb73db0, 0x1de781bd, 0x1f27d9d0, 0x20b835e1, 0x2248a1f7, 0x2409120d, 0x25a99a23, 0x27fa2245, 0x2a5aca65, 0x2d7b7683, 0x2fec3ea8, 0x32ecc6d1,
0x351dbf1b, 0x325d16f2, 0x2f3c32be, 0x2c4b6697, 0x29aab271, 0x272a0a52, 0x25698231, 0x2389061c, 0x21b89601, 0x202831ef, 0x1ef7d1df, 0x1da785c9, 0x1cb741bb, 0x1ba6fdb0, 0x1ad6c1a2, 0x19c68996, 0x1906558a, 0x18662580, 0x17d5f979, 0x1715d16c, 0x1685ad67, 0x15f58d61, 0x1585715c, 0x15455556, 0x14f53d4f, 0x1495254a, 0x14651949, 0x14250944, 0x13f4fd42, 0x13a4f13d, 0x1394e93d, 0x1374e53a, 0x1384e53b, 0x1384e53a, 0x1364e539, 0x13b4ed3d, 0x13b4f53c, 0x13e4fd3f, 0x14150d41, 0x14551d45, 0x14b53149, 0x1515454d, 0x15556151, 0x15e57d57, 0x1655995b, 0x16c5b964, 0x1775e16b, 0x17f60572, 0x18b6357b, 0x19866585, 0x1a669d8d, 0x1b36dd9c, 0x1c2715a7, 0x1d3759b5, 0x1e67a5c4, 0x1fa7f5d6, 0x212855e8, 0x22a8bdfd, 0x24493613, 0x2669be31, 0x284a524c, 0x2b1af26b, 0x2dbba690, 0x30dc7aba, 0x336d0add,
0x368df72a, 0x336d4704, 0x2fbc4ec2, 0x2c7b8e9e, 0x2a3ade7d, 0x27ca3a57, 0x25f9aa3d, 0x24092223, 0x2208b20b, 0x20c84df5, 0x1f57f5e1, 0x1e1799d1, 0x1d3759c3, 0x1bf715b5, 0x1af6d9a7, 0x1a469d9a, 0x19866590, 0x18b63986, 0x18160d7d, 0x1775e575, 0x16b5c56a, 0x1665a567, 0x15f5855f, 0x15856958, 0x15454d54, 0x14d53d50, 0x14b52d4c, 0x14651d49, 0x14250d45, 0x13f50145, 0x13d4fd41, 0x13d4f540, 0x13c4f540, 0x13b4f53e, 0x13d4f940, 0x13f50140, 0x14050542, 0x14351143, 0x14652145, 0x14a53149, 0x14e5454d, 0x1555594f, 0x15a57554, 0x1625915b, 0x1695ad61, 0x1715cd68, 0x17b5f56f, 0x18462178, 0x19065180, 0x19b68189, 0x1a96b195, 0x1b66eda0, 0x1c872dad, 0x1d8775bd, 0x1ef7c1c9, 0x1ff815df, 0x21b871ef, 0x2328e203, 0x24d95a1c, 0x26d9ee36, 0x297a7a57, 0x2bab1e71, 0x2ecbd69a, 0x31dca2be, 0x336d3ee1,
0x36de4b34, 0x33ad7f09, 0x302c96d9, 0x2dbbbeac, 0x2aeb0686, 0x28aa5e65, 0x2669ce47, 0x24494a2a, 0x22c8d211, 0x213871ff, 0x20080deb, 0x1e77bdda, 0x1d6775c6, 0x1c872dbb, 0x1b56edab, 0x1a86b5a0, 0x19b67d95, 0x18f6558c, 0x18462584, 0x17b5fd7a, 0x1725d972, 0x16b5b16a, 0x16459964, 0x15d5815f, 0x15756558, 0x15154d55, 0x14e53d50, 0x14a52d4d, 0x1475214b, 0x14351547, 0x14451145, 0x14150d43, 0x14050542, 0x14150944, 0x14150d43, 0x14351546, 0x14551946, 0x14852549, 0x14a5354a, 0x14f5454e, 0x15355550, 0x15956d56, 0x15f5895c, 0x1655a161, 0x16d5bd64, 0x1785e56b, 0x18060975, 0x18b6357d, 0x19365d84, 0x1a169190, 0x1ad6c99b, 0x1be705a7, 0x1cf745b4, 0x1e1791c1, 0x1f57ddd3, 0x204831e1, 0x21e891f5, 0x23a90609, 0x25697e20, 0x277a023d, 0x29daa65d, 0x2c4b527d, 0x2f7c02a8, 0x32acc6c9, 0x34cd72e5,
0x381e8739, 0x355dcb17, 0x315cc6ea, 0x2e5bf6b6, 0x2b7b2a8d, 0x292a8e6b, 0x2699ee52, 0x24f96e3a, 0x2308f61e, 0x21988e09, 0x205835f5, 0x1ef7dddf, 0x1dd791d0, 0x1cc749c1, 0x1bf709b7, 0x1b06d1a9, 0x1a16999b, 0x19666592, 0x18c63d88, 0x18261180, 0x1785f179, 0x16e5cd70, 0x16a5ad69, 0x16259563, 0x15c5795d, 0x1595655b, 0x15555955, 0x15054551, 0x14d5394f, 0x14b5314d, 0x1475254a, 0x14752148, 0x14751d49, 0x14652149, 0x14852149, 0x1495294b, 0x14b5314c, 0x14e53d4e, 0x15054950, 0x15455952, 0x15956d56, 0x15e5815b, 0x1665a15d, 0x16c5b565, 0x1745d96c, 0x17d60172, 0x18662578, 0x19165184, 0x19b6798b, 0x1a66b195, 0x1b66e5a0, 0x1c5725ab, 0x1d7769b7, 0x1e97adc8, 0x1fb801d8, 0x212855ea, 0x2288b9f9, 0x24292611, 0x2619a22c, 0x282a324c, 0x2a8ace68, 0x2cdb7e86, 0x2fec46af, 0x336d0ad1, 0x35ada6f7,
0x396edf54, 0x363df725, 0x321cf6f7, 0x2e9c1abe, 0x2c1b5e9e, 0x2a0ab277, 0x277a2257, 0x25498a3d, 0x23891a23, 0x2228aa0d, 0x20c859f9, 0x1fa7fdea, 0x1e47addb, 0x1d6769c9, 0x1c5725bd, 0x1b66edb0, 0x1a86b5a3, 0x19a68199, 0x1926518c, 0x18662984, 0x17e6057d, 0x1755e576, 0x16f5c96f, 0x1685a969, 0x16259164, 0x15c5795f, 0x15856959, 0x15655956, 0x15154d53, 0x14f54551, 0x14b53d52, 0x14c5354f, 0x14b5314f, 0x14b5354f, 0x14b5394e, 0x14d53d4d, 0x15054551, 0x15255153, 0x15556155, 0x15a57156, 0x15e5815d, 0x1635955f, 0x16a5b164, 0x1715cd69, 0x1785f16f, 0x18361179, 0x18b6397d, 0x1956658a, 0x1a169594, 0x1ad6c99a, 0x1bc6fda7, 0x1cc741b2, 0x1db781bd, 0x1ed7c5c9, 0x200819dd, 0x219875ef, 0x2308da05, 0x24f94a15, 0x26b9ce31, 0x28fa5a4a, 0x2b7afa6e, 0x2e2b9e93, 0x30dc72b3, 0x33ad3edd, 0x372ddf00,
0x3a6f3b65, 0x377e6339, 0x336d5304, 0x2fbc62cd, 0x2cdb96a8, 0x2a5aea8a, 0x282a5268, 0x2619ca4c, 0x2449462e, 0x22a8d21a, 0x21987203, 0x1ff825f1, 0x1ed7d1e4, 0x1d8789d3, 0x1cd749c3, 0x1bc705b4, 0x1b36d1a9, 0x1a269da0, 0x19867195, 0x18d6458c, 0x18561d83, 0x17c5f97d, 0x1735dd75, 0x16d5c56e, 0x1685ad6a, 0x16259565, 0x15f58561, 0x15a5755c, 0x1585695d, 0x15655958, 0x15355957, 0x15255154, 0x15154d53, 0x15154953, 0x15254d54, 0x15255554, 0x15656156, 0x15956d58, 0x15b5755b, 0x1605855d, 0x16459961, 0x16a5b166, 0x1705c969, 0x1775e96f, 0x17f60977, 0x18a6317c, 0x19565184, 0x19e6818c, 0x1a86b599, 0x1b56e9a2, 0x1c5725ad, 0x1d6761ba, 0x1e67a9c6, 0x1fa7e9d6, 0x20c845e4, 0x224899f9, 0x2389060d, 0x25897a20, 0x2759fe3d, 0x29aa8654, 0x2c4b2a7a, 0x2ecbde9e, 0x31dca2c2, 0x34cd86f2, 0x377e331b,
0x3b1f8f89, 0x381eab4f, 0x348d9317, 0x30acaadd, 0x2dbbc6af, 0x2b1b2a93, 0x28fa7e71, 0x26b9ee57, 0x24f9723a, 0x23690623, 0x21c8a20f, 0x207841f9, 0x1f77ede8, 0x1e67add8, 0x1d0765c9, 0x1c4725bb, 0x1b56edae, 0x1a76b9a7, 0x1a068d9c, 0x19566191, 0x18a6398a, 0x18261583, 0x1795f979, 0x1745dd76, 0x16e5c16f, 0x1675ad6a, 0x1665a167, 0x16058d62, 0x15c5815f, 0x15b5715f, 0x15a56d5c, 0x1585695b, 0x15756559, 0x15756559, 0x15856959, 0x15a5755c, 0x15d5755b, 0x15e5855f, 0x16259160, 0x1655a162, 0x16b5b167, 0x16f5c96b, 0x1755e56f, 0x17c60576, 0x1866257b, 0x18f64984, 0x19b66d89, 0x1a56a192, 0x1b36d19f, 0x1bc701a6, 0x1cb749b5, 0x1db785be, 0x1ed7c9cc, 0x1ff815db, 0x215865ed, 0x22c8c201, 0x24492a15, 0x2649a22c, 0x27fa2645, 0x2a3aa662, 0x2d1b5e83, 0x2fbc1aa1, 0x32ace2d5, 0x35fdcafb, 0x386e7b1b,
0x3dbfff90, 0x39bf1360, 0x35fddf20, 0x31dce2ee, 0x2ecc12c2, 0x2c1b5e9a, 0x297aba7d, 0x277a2660, 0x25a99e45, 0x23e9362c, 0x2268ce15, 0x21286e03, 0x200821f3, 0x1ec7c9e2, 0x1db789ce, 0x1cf751c6, 0x1bf715b8, 0x1b06ddae, 0x1a86b1a3, 0x19c68197, 0x19165991, 0x1886398b, 0x18161584, 0x17a5fd7c, 0x1755e577, 0x1705c970, 0x16b5b96e, 0x1665a96a, 0x16459566, 0x16259163, 0x15f58562, 0x15d58161, 0x15e58561, 0x15d58161, 0x15f58560, 0x15f58961, 0x16359561, 0x16659d63, 0x1665ad69, 0x16b5bd68, 0x1705cd6d, 0x1765ed74, 0x17e60177, 0x1856257e, 0x18e64586, 0x19866589, 0x19f68d91, 0x1ad6b99b, 0x1ba6f1a4, 0x1c7725b0, 0x1d1761ba, 0x1e47a5c8, 0x1f37e9d6, 0x207841e2, 0x21b88df7, 0x2348f607, 0x24d9521e, 0x26b9d638, 0x28ca5a54, 0x2b1af26e, 0x2dbb968d, 0x30dc6ab3, 0x33ad2ad9, 0x372e1b0d, 0x3a6ec72f,
0x3e1fffaa, 0x3b7f577d, 0x36de3f34, 0x32ad2afb, 0x2f7c46d1, 0x2cab8eac, 0x2a5ae286, 0x282a5a6b, 0x2619ce4c, 0x24b95a38, 0x2328f620, 0x21b89a0b, 0x204841f7, 0x1f37f5eb, 0x1e17b1da, 0x1d376dd0, 0x1c5731c0, 0x1b66fdb5, 0x1ad6cdaa, 0x1a46a1a0, 0x19967999, 0x19065590, 0x18863189, 0x18161584, 0x17c5fd7c, 0x1785e579, 0x1715d574, 0x16c5c16f, 0x1695b56c, 0x1685a969, 0x1655a168, 0x16559d66, 0x16459d66, 0x16459d66, 0x1665a167, 0x1675a566, 0x1675ad68, 0x16b5b56a, 0x16e5c96e, 0x1745d56f, 0x1785ed72, 0x17e60579, 0x18561d81, 0x18c63d83, 0x1966618a, 0x19c68590, 0x1a86b197, 0x1b56e1a3, 0x1c2711a9, 0x1cc749b5, 0x1dd785c0, 0x1ed7c5d0, 0x202815df, 0x212869ef, 0x2288bdff, 0x24291213, 0x25d98227, 0x2779fe3d, 0x297a9257, 0x2beb267a, 0x2ecbd697, 0x319c8ec2, 0x34cd72f2, 0x38be7b17, 0x3b1f1339,
0x3fffffb0, 0x3c3fbb89, 0x381e6f4f, 0x348d670d, 0x306c86e1, 0x2d7bceaf, 0x2beb1e90, 0x28fa7a7d, 0x2709f254, 0x25498e40, 0x23a9122c, 0x2248be15, 0x20c86603, 0x1ff81df1, 0x1ec7cde2, 0x1da791d5, 0x1cb759c8, 0x1be719ba, 0x1ae6e9b0, 0x1aa6c1a4, 0x19b6959b, 0x19766d92, 0x18d65190, 0x1886318a, 0x18361183, 0x17b6017c, 0x1785ed7b, 0x1775dd76, 0x1705cd71, 0x16f5c972, 0x16b5b96d, 0x16a5b56e, 0x1695b96c, 0x16b5b96c, 0x16b5bd6c, 0x16c5bd6a, 0x1705c96d, 0x1715d174, 0x1775e171, 0x17a5f577, 0x17e6097a, 0x18661d7d, 0x18863984, 0x1966558c, 0x19c68190, 0x1a269995, 0x1ad6c9a0, 0x1ba6f9aa, 0x1c872db4, 0x1d1769bb, 0x1e47a5c9, 0x1f57e5db, 0x205839e4, 0x219889f5, 0x2348e207, 0x2469461a, 0x2619a22c, 0x282a2e3d, 0x2a3ac262, 0x2cab5e83, 0x2f3c0aa1, 0x325cdac9, 0x363d9ef7, 0x39beab34, 0x3cff8349,
#else

#endif
};


SIE_EmbeddedCS ECS_Param;

static void InitEcsTbl(void)
{
    UINT32 i,j,Rgain,Ggain,Bgain,Data;
    #if 0
    for(j=0;j<65;j++)
    {
        for(i=0;i<65;i++)
        {
#if 1
            Rgain = 0x100;
            Ggain = 0x100;
            Bgain = 0x100;
#else
            Rgain = 0x100*165/100;
            Ggain = 0x100;
            Bgain = 0x100*170/100;
#endif
            Data = (Bgain & 0x3FF) | ((Ggain & 0x3FF)<<10) | ((Rgain & 0x3FF)<<20);
            EcsTbl[j][i] = Data;
        }
    }
  #endif
    ECS_Param.BitSel = ECS_D2F8;
    ECS_Param.DthrEn = DISABLE;//ENABLE;//DISABLE
    ECS_Param.DthrRst = DISABLE;
    ECS_Param.ECSDthrLv = 0;
}
#endif

void IPL_SIESetECS_FCB(UINT32 Id, SieFuncEn *FuncEn, SIE_INTE_EN *InteEn, SIE_UPDATE *Update, SIE_SUBFUNC *subs)
{
    if (IPL_CtrlGetInfor(Id, IPLCTRL_SIE_ECS_EN) == ENABLE)
    {
        InitEcsTbl();
        subs->Ecs.pecs = &ECS_Param;
        subs->Ecs.Inaddr = (UINT32)&EcsTbl[0][0];
        subs->Ecs.EcsMap = ecs65x65;

        *FuncEn |= ECSEn;
        *Update |= (SIE_ECS_ | SIE_SubFEn);
    }
    else
    {
        *FuncEn &= ~ECSEn;
        *Update |= SIE_SubFEn;
    }
}
#if 1
void IPL_SIESetDP_FCB(UINT32 Id, SieFuncEn *FuncEn, SIE_INTE_EN *InteEn, SIE_UPDATE *Update, SIE_SUBFUNC *Sub)
{
    pCAL_TAG pTag;

    pTag = GetCalData(SEC_DP,IPL_AlgGetUIInfo(IPL_SEL_PRVSENMODE));

    *FuncEn &= ~DpcEn;
    *Update |= SIE_SubFEn;

    if (pTag != NULL)
    {
        if(pTag->CAL_STATUS == _CAL_OK)
        {
            CAL_DP_FMT *pFmt;

            pFmt = (CAL_DP_FMT *)&pTag->TagData;
            Sub->Dpc.DP_TblAddr = (UINT32)&pFmt->DP_Pool;
            Sub->Dpc.TblSize = pTag->TagDataLen - sizeof(CAL_DPC_HEADER);
            Sub->Dpc.Weight = _50_Percent;

            /*
            DBG_IND("%s:%d: check DP table, TagID=0x%x, Tab size=%d, cnt=%d, loading...\r\n", __func__, __LINE__, pTag->TagID, Sub->Dpc.TblSize,  pFmt->DPCnt.PixelCnt);

            {
                int num;
                UINT32 *pDP=&pFmt->DP_Pool;

                for(num=0; num<(Sub->Dpc.TblSize/sizeof(UINT32)); num++)
                {
                    DBG_IND("%d, %d\r\n", *(pDP+num)>>16, *(pDP+num)&0xFFFF);
                }
            }

            */

            *FuncEn |= DpcEn;
            *Update |= (SIE_DPC_ | SIE_SubFEn);
        }
    }
    else
    {
        DBG_ERR("IPL_SIESetDP_FCB cal status fail\r\n");
    }
}
#endif

void IPL_SIESetBP_FCB(UINT32 Id, SieFuncEn *FuncEn, SIE_INTE_EN *InteEn, SIE_UPDATE *Update, SIE_SUBFUNC *Sub)
{
    //bp
    Sub->BP.BP1 = 10;
    Sub->BP.BP2 = 20;
    Sub->BP.BP3 = 30;
    Sub->BP.BP1_ref = FALSE;
    Sub->BP.BP2_ref = FALSE;
    Sub->BP.BP3_ref = FALSE;
    *InteEn |= (SIE__INTE_BP1|SIE__INTE_BP2|SIE__INTE_BP3);
    *Update |= (SIE_BP_ | SIE_SubFEn);
}

void IPL_SIESetDMAOutSrc_FCB(UINT32 Id, SieFuncEn *FuncEn, SIE_INTE_EN *InteEn, SIE_UPDATE *Update)
{
    if (IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CH0_RAW_EN) == ENABLE)
    {
        *FuncEn |= DMAOutCh0En;
        *Update |= (SIE_SubFEn|SIE_CH0Out_SRC);
    }

    if ((IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CH2_RAW_EN) == ENABLE) ||
        (IPL_CtrlGetInfor(Id, IPLCTRL_SIE_VA_EN) == ENABLE))
    {
        *FuncEn |= DMAOutCh2En;
        *Update |= (SIE_SubFEn|SIE_CH2Out_SRC);
    }
}
#if 0
#endif
void IPL_IPESetEthOut_FCB(UINT32 Id, IPEFUNCEN *FuncEn, IPEINTE *InteEn, IPE_UPDATE *Update, IPE_SUBFUNC *Sub)
{
    UINT32 BufSize;

    if (IPL_CtrlGetInfor(Id, IPLCTRL_IPE_ETH_EN) == ENABLE)
    {
        IPL_BufGet(Id, IPLBUF_IPEETH_1, &Sub->EdgeThreshold.EthDmaInfo.Th0Addr, &BufSize);
        IPL_BufGet(Id, IPLBUF_IPEETH_2, &Sub->EdgeThreshold.EthDmaInfo.Th1Addr, &BufSize);
        IPL_BufGet(Id, IPLBUF_IPEETH_3, &Sub->EdgeThreshold.EthDmaInfo.Th2Addr, &BufSize);

        *FuncEn |= (IPE_EDGETHREEn);
        *InteEn |= (IPE__INTE_EDGET_DMA_E);
        *Update |= (IPE_THRES_Addr|IPE_SubFEn);
    }
    else
    {
        *FuncEn &= ~(IPE_EDGETHREEn);
        *InteEn &= ~(IPE__INTE_EDGET_DMA_E);
        *Update |= (IPE_SubFEn);
    }
}

void IPL_IPESetVOut_FCB(UINT32 Id, IPEFUNCEN *FuncEn, IPEINTE *InteEn, IPE_UPDATE *Update, IPE_SUBFUNC *Sub)
{
    if (IPL_CtrlGetInfor(Id, IPLCTRL_IPE_V_EN) == ENABLE)
    {
        Sub->Vout.OutSel = v_Vch_out;
        *FuncEn |= (IPE_V_SUBEn);
        *Update |= (IPE_SubFEn);
    }
}

void IPL_IPESetCCOut_FCB(UINT32 Id, IPEFUNCEN *FuncEn, IPEINTE *InteEn, IPE_UPDATE *Update, IPE_SUBFUNC *Sub)
{
    if (IPL_CtrlGetInfor(Id, IPLCTRL_IPE_LCA_EN) == ENABLE)
    {
        *FuncEn |= (IPE_CC_SUBEn);
        *Update |= (IPE_SubFEn);
    }
}

void IPL_SIE2CCIR_FCB(UINT32 Id, SIE2__DVI* pDvi)
{
    SENSOR_INFO SenInfo;
    Sensor_GetStatus(IPL_UTI_CONV2_SEN_ID(Id), IPL_AlgGetUIInfo2(Id, IPL_SEL_PRVSENMODE), &SenInfo);

    if (SenInfo.Mode->DVI->Fmt == SENSOR_DVI_CCIR601)
    {
        pDvi->SIEDVIFmt = _CCIR601;
    }
    else if (SenInfo.Mode->DVI->Fmt == SENSOR_DVI_CCIR656)
    {
        pDvi->SIEDVIFmt = _CCIR601;
    }
    else
    {
        DBG_ERR("unsupport input = %d\r\n", SenInfo.Mode->DVI->Fmt);
    }

    if (SenInfo.Mode->DVI->Mode == SENSOR_DVI_MODE_SD)
    {
        pDvi->DVIMode = _SDMode;
    }
    else if (SenInfo.Mode->DVI->Mode == SENSOR_DVI_MODE_HD)
    {
        pDvi->DVIMode = _HDMode;
    }
    else
    {
        DBG_ERR("unsupport input = %d\r\n", SenInfo.Mode->DVI->Mode);
    }

    if (SenInfo.Mode->DVI->ActSel == SENSOR_DVI_SEL_ACTWIN)
    {
        pDvi->CCIR656ActSel = _ACTWindow;
    }
    else if (SenInfo.Mode->DVI->ActSel == SENSOR_DVI_SEL_EAV)
    {
        pDvi->CCIR656ActSel = _EAV;
    }
    else
    {
        DBG_ERR("unsupport input = %d\r\n", SenInfo.Mode->DVI->ActSel);
    }

    pDvi->FldEn = SenInfo.Mode->DVI->FldEn;
    pDvi->FldInvEn = SenInfo.Mode->DVI->FldInvEn;
    pDvi->CCIR656InSwapEn = SenInfo.Mode->DVI->InSwapEn;
    pDvi->CCIR656OutSwapEn = SenInfo.Mode->DVI->OutSwapEn;

}
#if 0
#endif
void IPL_CtrlInitIpc_SIE2In(UINT32 Id, SENSOR_INFO *SenInfo, SIE2_WINDOW *Win)
{

    Win->Act.DIV_X = SenInfo->Mode->TransHD[0].DataStart;
    Win->Act.FLD_Y = SenInfo->Mode->TransVD[0].DataStart;
    Win->Act.SizeH = SenInfo->Mode->TransHD[0].DataSize;
    Win->Act.SizeV = SenInfo->Mode->TransVD[0].DataSize;
    Win->Act.CFA = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_PRVSTPIX);
    Win->Crop.SizeH = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_PRVCROP_SIZE_H);
    Win->Crop.SizeV = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_PRVCROP_SIZE_V);
    Win->Crop.CFA = Win->Act.CFA;

    if ((Win->Act.SizeH < Win->Crop.SizeH) || (Win->Act.SizeV < Win->Crop.SizeV))
    {
        DBG_ERR("error act size (%d %d) < crop Size(%d %d)\r\n", Win->Act.SizeH, Win->Act.SizeV, Win->Crop.SizeH, Win->Crop.SizeV);
        Win->Crop.StartPix.x = 0;
        Win->Crop.StartPix.y = 0;
    }
    else
    {
        Win->Crop.StartPix.x = (Win->Act.SizeH - Win->Crop.SizeH) >> 1;
        Win->Crop.StartPix.y = (Win->Act.SizeV - Win->Crop.SizeV) >> 1;
    }
}

void IPL_CtrlInitIpc_SIE2Signal(UINT32 Id, SENSOR_INFO *SenInfo, UINT32 HDInv, UINT32 VDInv, UINT32 VDPhase, UINT32 HDPhase, UINT32 DPhase, IPP_SIE2_SIGNAL *Signal)
{
    Signal->Sie2_HDVD.HD_ini = HDInv;
    Signal->Sie2_HDVD.HD_offset = 0;
    Signal->Sie2_HDVD.HD_sync = SenInfo->Mode->TransHD[0].Sync;
    Signal->Sie2_HDVD.HD_total = SenInfo->Mode->TransHD[0].Period;

    Signal->Sie2_HDVD.VD_ini = VDInv;
    Signal->Sie2_HDVD.VD_offset = 0;
    Signal->Sie2_HDVD.VD_sync = SenInfo->Mode->TransVD[0].Sync;
    Signal->Sie2_HDVD.VD_total = SenInfo->Mode->TransVD[0].Period;

    Signal->SensorPhase.VD = VDPhase;
    Signal->SensorPhase.HD = HDPhase;
    Signal->SensorPhase.Data = DPhase;
}

void IPL_CtrlInitIpc_SIE2Ch0PPB(UINT32 Id, UINT32 *PP1Addr, UINT32 *PP2Addr)
{
    UINT32 BufSize;

    if (PP1Addr != NULL)
    {
        IPL_BufGet(Id, IPLBUF_SIERAW_CH0_1, PP1Addr, &BufSize);
    }

    if (PP2Addr != NULL)
    {
        IPL_BufGet(Id, IPLBUF_SIERAW_CH0_2, PP2Addr, &BufSize);
    }
}


#if 0
#endif
void IPL_CtrlInitIpc_SIEAct(UINT32 Id, SENSOR_INFO *SenInfo, SieACTMode *ActMode)
{
    if ((SenInfo->DataType == SENSOR_DATA_LVDS) || (SenInfo->DataType == SENSOR_DATA_MIPI))
    {
        *ActMode = Serial;
    }
    else if (SenInfo->DataType == SENSOR_DATA_PARALLEL)
    {
        if (SenInfo->SigType == SENSOR_SIGNAL_MASTER)
        {
            *ActMode = Para_M;
        }
        else if (SenInfo->SigType == SENSOR_SIGNAL_SLAVE)
        {
            *ActMode = Para_S;
        }
        else
        {
            DBG_ERR("unsupport signal type %d\r\n", SenInfo->SigType);
        }
    }
    else if (SenInfo->DataType == SENSOR_DATA_DUMMY)
    {
        *ActMode = PATGEN;
    }
    else
    {
        DBG_ERR("unsupport Data Type %d\r\n", SenInfo->DataType);
    }
}

void IPL_CtrlInitIpc_SIEBurstLength(UINT32 Id, SENSOR_INFO *SenInfo, SIE_BURST_LENG *Length)
{
    *Length = IPL_CtrlGetInfor(Id, IPLCTRL_PRVBURSTLENGTH);
}

void IPL_CtrlInitIpc_SIEIn(UINT32 Id, SENSOR_INFO *SenInfo, SIE_WINDOW *Win)
{
    UINT32 i;
    for (i = 0; i < SIE_MAX_DIV; i ++)
    {
        Win->Act.DIV_X[i] = 0;
    }

    for (i = 0; i < SenInfo->Mode->DIVNum; i ++)
    {
        Win->Act.DIV_X[i] = SenInfo->Mode->TransHD[i].DataStart;
    }

    for (i = 0; i < MAX_FLD; i ++)
    {
        Win->Act.FLD_Y[i] = 0;
    }

    for (i = 0; i < SenInfo->Mode->FieldNum; i ++)
    {
        Win->Act.FLD_Y[i] = SenInfo->Mode->TransVD[i].DataStart;
    }

    Win->Act.SizeH = SenInfo->Mode->TransHD[0].DataSize;
    Win->Act.SizeV = SenInfo->Mode->TransVD[0].DataSize;
    Win->Act.CFA = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_PRVSTPIX);

    Win->Crop.SizeH = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_PRVCROP_SIZE_H);
    Win->Crop.SizeV = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_PRVCROP_SIZE_V);
    Win->Crop.CFA = Win->Act.CFA;

    if ((Win->Act.SizeH < Win->Crop.SizeH) || (Win->Act.SizeV < Win->Crop.SizeV))
    {
        DBG_ERR("error act size (%d %d) < crop Size(%d %d)\r\n", Win->Act.SizeH, Win->Act.SizeV, Win->Crop.SizeH, Win->Crop.SizeV);
        Win->Crop.StartPix.x = 0;
        Win->Crop.StartPix.y = 0;
    }
    else
    {
        Win->Crop.StartPix.x = (Win->Act.SizeH - Win->Crop.SizeH) >> 1;
        Win->Crop.StartPix.y = (Win->Act.SizeV - Win->Crop.SizeV) >> 1;
    }
}

void IPL_CtrlInitIpc_SIESignal(UINT32 Id, SENSOR_INFO *SenInfo, UINT32 HDInv, UINT32 VDInv, UINT32 VDPhase, UINT32 HDPhase, UINT32 DPhase, IPP_SIE_SIGNAL *Signal)
{
    UINT32 i, j;
    Signal->Sie_HDVD.HD_ini = HDInv;
    Signal->Sie_HDVD.HD_offset = 0;
    Signal->Sie_HDVD.HD_sync = SenInfo->Mode->TransHD[0].Sync;
    Signal->Sie_HDVD.HD_total = SenInfo->Mode->TransHD[0].Period;

    Signal->Sie_HDVD.VD_ini = VDInv;
    Signal->Sie_HDVD.VD_offset = 0;
    Signal->Sie_HDVD.VD_sync = SenInfo->Mode->TransVD[0].Sync;
    Signal->Sie_HDVD.VD_total = SenInfo->Mode->TransVD[0].Period;

    Signal->SensorPhase.VD = VDPhase;
    Signal->SensorPhase.HD = HDPhase;
    Signal->SensorPhase.Data = DPhase;

    Signal->Sie_ReOrder.Reorder_VEn = DISABLE;

    Signal->Sie_FLD.SieFldNum = SenInfo->Mode->FieldNum - 1;
    for (i = 0; i < FieldCycle; i ++)
    {
        for (j = 0; j < MAX_FLD; j ++)
        {
            if (SenInfo->Mode->FieldTab == NULL)
            {
                Signal->Sie_FLD.FldLine[i][j] = 0;
            }
            else
            {
                Signal->Sie_FLD.FldLine[i][j] = SenInfo->Mode->FieldTab->Map[(i * MAX_FLD) + j] - 1;
            }
        }
    }

    Signal->SieDivNum = SenInfo->Mode->DIVNum - 1;
}

void IPL_CtrlInitIpc_SIECh0PPB(UINT32 Id, IPL_RAW_IMG_INFO *PPB0, UINT32 *PP1Addr, UINT32 *PP2Addr)
{
    UINT32 BufSize;

    IPL_BufGet(Id, IPLBUF_SIERAW_CH0_1, &PPB0->PixelAddr, &BufSize);

    PPB0->Width = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CH0_RAW_SIZE_H);
    PPB0->Height = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CH0_RAW_SIZE_V);
    PPB0->Bit = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CH0_PRVBIT);
    PPB0->LineOffset = IPL_UTI_RAWH_CONV2_LOFS(PPB0->Width, PPB0->Bit);
    PPB0->STPix = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_PRVSTPIX);

    if (PP1Addr != NULL)
    {
        IPL_BufGet(Id, IPLBUF_SIERAW_CH0_2, PP1Addr, &BufSize);
    }

    if (PP2Addr != NULL)
    {
        IPL_BufGet(Id, IPLBUF_SIERAW_CH0_3, PP2Addr, &BufSize);
    }
}

void IPL_CtrlInitIpc_SIECh2PPB(UINT32 Id, SIE_Dma_Out *Out, UINT32 *OutH, UINT32 *OutV)
{
    UINT32 BufSize;

    if (IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CH2_RAW_BUFNUM) == 1)
    {
        IPL_BufGet(Id, IPLBUF_SIERAW_CH2_1, &Out->PPB0_Addr, &BufSize);
    }
    else if (IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CH2_RAW_BUFNUM) == 2)
    {
        IPL_BufGet(Id, IPLBUF_SIERAW_CH2_1, &Out->PPB0_Addr, &BufSize);
        IPL_BufGet(Id, IPLBUF_SIERAW_CH2_2, &Out->PPB1_Addr, &BufSize);
    }
    *OutH = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CH2_RAW_SIZE_H);
    *OutV = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CH2_RAW_SIZE_V);
    Out->packBus = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CH2_PRVBIT);
    Out->LineOffset = IPL_UTI_RAWH_CONV2_LOFS(*OutH, Out->packBus);
}

void IPL_CtrlInitIpc_SIEVaPPB(UINT32 Id, SIE_Dma_Out *Out)
{
    UINT32 BufSize;

    if (IPL_CtrlGetInfor(Id, IPLCTRL_SIE_VA_BUFNUM) == 1)
    {
        IPL_BufGet(Id, IPLBUF_SIEVA_1, &Out->PPB0_Addr, &BufSize);
    }
    else if (IPL_CtrlGetInfor(Id, IPLCTRL_SIE_VA_BUFNUM) == 2)
    {
        IPL_BufGet(Id, IPLBUF_SIEVA_1, &Out->PPB0_Addr, &BufSize);
        IPL_BufGet(Id, IPLBUF_SIEVA_2, &Out->PPB1_Addr, &BufSize);
    }
}

void IPL_CtrlInitIpc_SIECaPPB(UINT32 Id, SIE_CH1_Dma_Out *DmaOut)
{
    UINT32 BufSize;
    if (IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CA_BUFNUM) == 1)
    {
        IPL_BufGet(Id, IPLBUF_SIECA_1, &DmaOut->PPB0_Addr, &BufSize);
    }
    else if (IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CA_BUFNUM) == 2)
    {
        IPL_BufGet(Id, IPLBUF_SIECA_1, &DmaOut->PPB0_Addr, &BufSize);
        IPL_BufGet(Id, IPLBUF_SIECA_2, &DmaOut->PPB1_Addr, &BufSize);
    }
    else
    {
        DBG_ERR("CA PPB buffer error %d\r\n", IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CA_BUFNUM));
    }
}

void IPL_CtrlInitIpc_PREInPPB(UINT32 Id, IPL_RAW_IMG_INFO *PPB0, UINT32 *PP1Addr)
{
    UINT32 BufSize;

    IPL_BufGet(Id, IPLBUF_SIERAW_CH0_1, &PPB0->PixelAddr, &BufSize);

    if (PP1Addr != NULL)
    {
        IPL_BufGet(Id, IPLBUF_SIERAW_CH0_2, PP1Addr, &BufSize);
    }

    PPB0->Width = IPL_CtrlGetInfor(Id, IPLCTRL_PRE_IN_SIZE_H);
    PPB0->Height = IPL_CtrlGetInfor(Id, IPLCTRL_PRE_IN_SIZE_V);
    PPB0->Bit = IPL_CtrlGetInfor(Id, IPLCTRL_PRE_IN_BIT);
    PPB0->LineOffset = IPL_CtrlGetInfor(Id, IPLCTRL_PRE_IN_SIZE_HLOS);
    PPB0->STPix = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_PRVSTPIX);

}

void IPL_CtrlInitIpc_DCEIn(UINT32 Id, SENSOR_INFO *SenInfo, USIZE* pRef_1x, Coordinate *pCenter_1x)
{
    if (SenInfo->DataType == SENSOR_DATA_DUMMY)
    {
        pRef_1x->w = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_PRVCROP_SIZE_H);
        pRef_1x->h = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_PRVCROP_SIZE_V);
    }
    else
    {
        pRef_1x->w = SenInfo->Mode->TransHD[0].DataSize;
        pRef_1x->h = SenInfo->Mode->TransVD[0].DataSize;
    }
    pCenter_1x->x = (pRef_1x->w >> 1);
    pCenter_1x->y = (pRef_1x->h >> 1);
}

void IPL_CtrlInitIpc_IPELcaPPB(UINT32 Id, UINT32 *PP0Addr, UINT32 *PP1Addr, UINT32 *PP2Addr, UINT32 *PP3Addr)
{
    UINT32 BufSize;

    if (PP0Addr != NULL)
    {
        IPL_BufGet(Id, IPLBUF_IPELCA_1, PP0Addr, &BufSize);
    }

    if (PP1Addr != NULL)
    {
        IPL_BufGet(Id, IPLBUF_IPELCA_2, PP1Addr, &BufSize);
    }

    if (PP2Addr != NULL)
    {
        IPL_BufGet(Id, IPLBUF_IPELCA_3, PP2Addr, &BufSize);
    }

    if (PP3Addr != NULL)
    {
        IPL_BufGet(Id, IPLBUF_IPELCA_4, PP3Addr, &BufSize);
    }
}

void IPL_CtrlInitIpc_IPEVPPB(UINT32 Id, UINT32 *PP0Addr, UINT32 *PP1Addr, UINT32 *PP2Addr, UINT32 *PP3Addr)
{
    UINT32 BufSize;

    if (PP0Addr != NULL)
    {
        IPL_BufGet(Id, IPLBUF_IPEV_1, PP0Addr, &BufSize);
    }

    if (PP1Addr != NULL)
    {
        IPL_BufGet(Id, IPLBUF_IPEV_2, PP1Addr, &BufSize);
    }

    if (PP2Addr != NULL)
    {
        IPL_BufGet(Id, IPLBUF_IPEV_3, PP2Addr, &BufSize);
    }

    if (PP3Addr != NULL)
    {
        IPL_BufGet(Id, IPLBUF_IPEV_4, PP3Addr, &BufSize);
    }
}

void IPL_CtrlInitIpc_IPEVaPPB(UINT32 Id, UINT32 *PP0Addr, UINT32 *PP1Addr)
{
    UINT32 BufSize;

    if (PP0Addr != NULL)
    {
        IPL_BufGet(Id, IPLBUF_IPEVA_1, PP0Addr, &BufSize);
    }

    if (PP1Addr != NULL)
    {
        IPL_BufGet(Id, IPLBUF_IPEVA_2, PP1Addr, &BufSize);
    }
}

void IPL_CtrlInitIpc_IFE2LcaPPB(UINT32 Id, UINT32 *PP0Addr, UINT32 *PP1Addr)
{
    UINT32 BufSize;

    if (PP0Addr != NULL)
    {
        IPL_BufGet(Id, IPLBUF_IPEIFE2LCA_1, PP0Addr, &BufSize);
    }

    if (PP1Addr != NULL)
    {
        IPL_BufGet(Id, IPLBUF_IPEIFE2LCA_2, PP1Addr, &BufSize);
    }
}

void IPL_CtrlInitIpc_IMEPxOutPPB(UINT32 Id, UINT32 PathEnIdx, IPL_YCC_IMG_INFO *Px_PPB0)
{
    UINT32 BufSize, Px;
    IPL_IMG_BUF_INFO BufInfo;
    IPL_YCC_IMG_INFO YCCInfo, YCCAddrInfo;

    UINT32 PxIdx[3][7] =
    {
        {IPLCTRL_IME_P1_FMT, IPLCTRL_IME_P1_BUF_SIZE_H, IPLCTRL_IME_P1_BUF_SIZE_V, IPLCTRL_IME_P1_OUT_SIZE_H, IPLCTRL_IME_P1_OUT_SIZE_V, IPLCTRL_IME_P1_OUT_SIZE_HLOS, IPLBUF_IMEP1_1},
        {IPLCTRL_IME_P2_FMT, IPLCTRL_IME_P2_BUF_SIZE_H, IPLCTRL_IME_P2_BUF_SIZE_V, IPLCTRL_IME_P2_OUT_SIZE_H, IPLCTRL_IME_P2_OUT_SIZE_V, IPLCTRL_IME_P2_OUT_SIZE_HLOS, IPLBUF_IMEP2_1},
        {IPLCTRL_IME_P3_FMT, IPLCTRL_IME_P3_BUF_SIZE_H, IPLCTRL_IME_P3_BUF_SIZE_V, IPLCTRL_IME_P3_OUT_SIZE_H, IPLCTRL_IME_P3_OUT_SIZE_V, IPLCTRL_IME_P3_OUT_SIZE_HLOS, IPLBUF_IMEP3_1},
    };

    if (PathEnIdx == IPLCTRL_IME_P1_EN) Px = 0;
    else if (PathEnIdx == IPLCTRL_IME_P2_EN) Px = 1;
    else if (PathEnIdx == IPLCTRL_IME_P3_EN) Px = 2;
    else
    {
        DBG_ERR("PathEnIdx error %d\r\n", PathEnIdx);
        return;
    }


    //calculate address
    YCCAddrInfo.type = IPL_CtrlGetInfor(Id, PxIdx[Px][0]);
    YCCAddrInfo.Ch[IPL_IMG_YUV_Y].Width = IPL_CtrlGetInfor(Id, PxIdx[Px][1]);
    YCCAddrInfo.Ch[IPL_IMG_YUV_Y].Height = IPL_CtrlGetInfor(Id, PxIdx[Px][2]);
    YCCAddrInfo.Ch[IPL_IMG_YUV_Y].LineOfs = IPL_CtrlGetInfor(Id, PxIdx[Px][1]);
    YCCAddrInfo.Ch[IPL_IMG_YUV_U] = IPL_UTI_Y_INFO_CONV2(YCCAddrInfo.type, YCCAddrInfo.Ch[IPL_IMG_YUV_Y]);
    YCCAddrInfo.Ch[IPL_IMG_YUV_V] = YCCAddrInfo.Ch[IPL_IMG_YUV_U];
    IPL_BufGet(Id, PxIdx[Px][6], &BufInfo.Buf[0], &BufSize);
    BufInfo.Buf[1] = 0;
    BufInfo.Buf[2] = 0;
    IPL_UTI_SET_CONT_BUFINFO(YCCAddrInfo.type, BufInfo, &YCCAddrInfo);

    //calculate ycc information
    YCCInfo.type = IPL_CtrlGetInfor(Id, PxIdx[Px][0]);
    YCCInfo.Ch[IPL_IMG_YUV_Y].Width = IPL_CtrlGetInfor(Id, PxIdx[Px][3]);
    YCCInfo.Ch[IPL_IMG_YUV_Y].Height = IPL_CtrlGetInfor(Id, PxIdx[Px][4]);
    YCCInfo.Ch[IPL_IMG_YUV_Y].LineOfs = IPL_CtrlGetInfor(Id, PxIdx[Px][5]);
    YCCInfo.Ch[IPL_IMG_YUV_U] = IPL_UTI_Y_INFO_CONV2(YCCInfo.type, YCCInfo.Ch[IPL_IMG_YUV_Y]);
    YCCInfo.Ch[IPL_IMG_YUV_V] = YCCInfo.Ch[IPL_IMG_YUV_U];

    YCCInfo.PixelAddr[IPL_IMG_YUV_Y] = YCCAddrInfo.PixelAddr[IPL_IMG_YUV_Y];
    YCCInfo.PixelAddr[IPL_IMG_YUV_U] = YCCAddrInfo.PixelAddr[IPL_IMG_YUV_U];
    YCCInfo.PixelAddr[IPL_IMG_YUV_V] = YCCAddrInfo.PixelAddr[IPL_IMG_YUV_V];

    *Px_PPB0 = YCCInfo;
}

void IPL_CtrlInitIpc_DispPxPPB(UINT32 Id, UINT32 PathEnIdx)
{
    UINT32 BufSize, Px, i;
    IPL_IMG_BUF_INFO BufInfo;
    IPL_YCC_IMG_INFO YCCInfo;

    UINT32 PxIdx[3][7] =
    {
        {IPLCTRL_IME_P1_BUFNUM, IPLCTRL_IME_P1_FMT, IPLCTRL_IME_P1_BUF_SIZE_H, IPLCTRL_IME_P1_BUF_SIZE_V, IPLBUF_IMEP1_1, IPLCTRL_IME_P1_DISP_SIZE_H, IPLCTRL_IME_P1_DISP_SIZE_V},
        {IPLCTRL_IME_P2_BUFNUM, IPLCTRL_IME_P2_FMT, IPLCTRL_IME_P2_BUF_SIZE_H, IPLCTRL_IME_P2_BUF_SIZE_V, IPLBUF_IMEP2_1, IPLCTRL_IME_P2_DISP_SIZE_H, IPLCTRL_IME_P2_DISP_SIZE_V},
        {IPLCTRL_IME_P3_BUFNUM, IPLCTRL_IME_P3_FMT, IPLCTRL_IME_P3_BUF_SIZE_H, IPLCTRL_IME_P3_BUF_SIZE_V, IPLBUF_IMEP3_1, IPLCTRL_IME_P3_DISP_SIZE_H, IPLCTRL_IME_P3_DISP_SIZE_V},
    };


    if (PathEnIdx == IPLCTRL_IME_P1_EN) Px = 0;
    else if (PathEnIdx == IPLCTRL_IME_P2_EN) Px = 1;
    else if (PathEnIdx == IPLCTRL_IME_P3_EN) Px = 2;
    else
    {
        DBG_ERR("PathEnIdx error %d\r\n", PathEnIdx);
        return;
    }

    YCCInfo.type = IPL_CtrlGetInfor(Id, PxIdx[Px][1]);
    YCCInfo.Ch[IPL_IMG_YUV_Y].Width = IPL_CtrlGetInfor(Id, PxIdx[Px][2]);
    YCCInfo.Ch[IPL_IMG_YUV_Y].LineOfs = IPL_CtrlGetInfor(Id, PxIdx[Px][2]);
    YCCInfo.Ch[IPL_IMG_YUV_Y].Height = IPL_CtrlGetInfor(Id, PxIdx[Px][3]);
    YCCInfo.Ch[IPL_IMG_YUV_U] = IPL_UTI_Y_INFO_CONV2(YCCInfo.type, YCCInfo.Ch[IPL_IMG_YUV_Y]);
    YCCInfo.Ch[IPL_IMG_YUV_V] = YCCInfo.Ch[IPL_IMG_YUV_U];


    //set dispaly buffer
    for (i = 0; i < IPL_CtrlGetInfor(Id, PxIdx[Px][0]); i ++)
    {
        IPL_BufGet(Id, (PxIdx[Px][4] + i), &BufInfo.Buf[0], &BufSize);
        BufInfo.Buf[1] = 0;
        BufInfo.Buf[2] = 0;
        IPL_UTI_SET_CONT_BUFINFO(YCCInfo.type, BufInfo, &YCCInfo);
        if (Id == IPL_ID_1)
        {
            IPL_InitDisplayBuffer(Px, i, &YCCInfo);
        }
        else if (Id == IPL_ID_2)
        {
            IPL_InitDisplayBuffer2(Px, i, &YCCInfo);
        }
        else
        {
            DBG_ERR("unsupport id %d\r\n", Id);
        }
    }

    YCCInfo.Ch[0].Width = IPL_CtrlGetInfor(Id, PxIdx[Px][5]);
    YCCInfo.Ch[0].Height = IPL_CtrlGetInfor(Id, PxIdx[Px][6]);

    if (Id == IPL_ID_1)
    {
        IPL_SetDeviceInputInfo(Px, YCCInfo.Ch[0]);
    }
    else if (Id == IPL_ID_2)
    {
        IPL_SetDeviceInputInfo2(Px, YCCInfo.Ch[0]);
    }
    else
    {
        DBG_ERR("unsupport id %d\r\n", Id);
    }
}

void IPL_CtrlInitIpc_DispCtrlEn(UINT32 Id, UINT32 PathEnIdx, UINT32 EnFlag)
{
    UINT32 Px;

    if (PathEnIdx == IPLCTRL_IME_P1_EN) Px = 0;
    else if (PathEnIdx == IPLCTRL_IME_P2_EN) Px = 1;
    else if (PathEnIdx == IPLCTRL_IME_P3_EN) Px = 2;
    else
    {
        DBG_ERR("PathEnIdx error %d\r\n", PathEnIdx);
        return;
    }

    IPL_SetPostImageProcessOnOff(Px, EnFlag);
}

#if 0
#endif

void IPL_CtrlInitIpc_SIE2In_Cap(UINT32 Id,  SIE2_UPDATE *Update, SIE2_WINDOW *Win)
{
    SENSOR_INFO SenInfo;

    Sensor_GetStatus(IPL_UTI_CONV2_SEN_ID(Id), IPL_AlgGetUIInfo2(Id, IPL_SEL_CAPSENMODE), &SenInfo);

    Win->Act.DIV_X = SenInfo.Mode->TransHD[0].DataStart;
    Win->Act.FLD_Y = SenInfo.Mode->TransVD[0].DataStart;

    Win->Act.SizeH = SenInfo.Mode->TransHD[0].DataSize;
    Win->Act.SizeV = SenInfo.Mode->TransVD[0].DataSize;
    Win->Act.CFA = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CAPSTPIX);

    Win->Crop.SizeH = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CCIR_CAP_RAW_SIZE_H);
    Win->Crop.SizeV = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CCIR_CAP_RAW_SIZE_V);
    Win->Crop.CFA = Win->Act.CFA;

    if ((Win->Act.SizeH < Win->Crop.SizeH) || (Win->Act.SizeV < Win->Crop.SizeV))
    {
        DBG_ERR("error act size (%d %d) < crop Size(%d %d)\r\n", Win->Act.SizeH, Win->Act.SizeV, Win->Crop.SizeH, Win->Crop.SizeV);
        Win->Crop.StartPix.x = 0;
        Win->Crop.StartPix.y = 0;
    }
    else
    {
        Win->Crop.StartPix.x = (Win->Act.SizeH - Win->Crop.SizeH) >> 1;
        Win->Crop.StartPix.y = (Win->Act.SizeV - Win->Crop.SizeV) >> 1;
    }
    *Update |= SIE_IOSize;
}

#if 0
#endif

void IPL_CtrlInitIpc_SIE2Signal_Cap(UINT32 Id, SIE2_UPDATE *Update, UINT32 HDInv, UINT32 VDInv, UINT32 VDPhase, UINT32 HDPhase, UINT32 DPhase, IPP_SIE2_SIGNAL *Signal)
{
    SENSOR_INFO SenInfo;

    Sensor_GetStatus(IPL_UTI_CONV2_SEN_ID(Id), IPL_AlgGetUIInfo2(Id, IPL_SEL_CAPSENMODE), &SenInfo);

    Signal->Sie2_HDVD.HD_ini = HDInv;
    Signal->Sie2_HDVD.HD_offset = 0;
    Signal->Sie2_HDVD.HD_sync = SenInfo.Mode->TransHD[0].Sync;
    Signal->Sie2_HDVD.HD_total = SenInfo.Mode->TransHD[0].Period;

    Signal->Sie2_HDVD.VD_ini = VDInv;
    Signal->Sie2_HDVD.VD_offset = 0;
    Signal->Sie2_HDVD.VD_sync = SenInfo.Mode->TransVD[0].Sync;
    Signal->Sie2_HDVD.VD_total = SenInfo.Mode->TransVD[0].Period;

    Signal->SensorPhase.VD = VDPhase;
    Signal->SensorPhase.HD = HDPhase;
    Signal->SensorPhase.Data = DPhase;

    *Update |= SIE2_INIT;
}

void IPL_CtrlInitIpc_SIE2Ch0PPB_Cap(UINT32 Id, SIE2_UPDATE *Update, SIE_Dma_Out *Out, UINT32 *OutH, UINT32 *OutV)
{
    *OutH = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CCIR_CAP_RAW_SIZE_H);
    *OutV = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CCIR_CAP_RAW_SIZE_V);
    Out->packBus = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CCIR_CAPBIT);
    Out->LineOffset = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CCIR_CAP_RAW_SIZE_HLOS);
    *Update |= SIE2_IOSize;
}


void IPL_CtrlInitIpc_SIETrigSel_Cap(UINT32 Id, SIE_UPDATE *Update, SIEPreTrigSel *TrigSel)
{
    *Update |= SIE_INIT;
    *TrigSel = Cur_FLDD;
}

void IPL_CtrlInitIpc_SIEBurstLength_Cap(UINT32 Id, SIE_UPDATE *Update, SENSOR_INFO *SenInfo, SIE_BURST_LENG *Length)
{
    *Update |= SIE_BURSTLENG;
    *Length = IPL_CtrlGetInfor(Id, IPLCTRL_CAPBURSTLENGTH);
}

void IPL_CtrlInitIpc_SIEAct_Cap(UINT32 Id, SIE_UPDATE *Update, SieACTMode *ActMode)
{
    SENSOR_INFO SenInfo;

    Sensor_GetStatus(IPL_UTI_CONV2_SEN_ID(Id), IPL_AlgGetUIInfo2(Id, IPL_SEL_CAPSENMODE), &SenInfo);

    if ((SenInfo.DataType == SENSOR_DATA_LVDS) || (SenInfo.DataType == SENSOR_DATA_MIPI))
    {
        *ActMode = Serial;
        *Update |= SIE_INIT;
    }
    else if (SenInfo.DataType == SENSOR_DATA_PARALLEL)
    {
        if (SenInfo.SigType == SENSOR_SIGNAL_MASTER)
        {
            *ActMode = Para_M;
            *Update |= SIE_INIT;
        }
        else if (SenInfo.SigType == SENSOR_SIGNAL_SLAVE)
        {
            *ActMode = Para_S;
            *Update |= SIE_INIT;
        }
        else
        {
            DBG_ERR("unsupport signal type %d\r\n", SenInfo.SigType);
        }
    }
    else if (SenInfo.DataType == SENSOR_DATA_DUMMY)
    {
        *ActMode = PATGEN;
        *Update |= SIE_INIT;
    }
    else
    {
        DBG_ERR("unsupport Data Type %d\r\n", SenInfo.DataType);
    }
}

void IPL_CtrlInitIpc_SIESignal_Cap(UINT32 Id, SIE_UPDATE *Update, UINT32 HDInv, UINT32 VDInv, UINT32 VDPhase, UINT32 HDPhase, UINT32 DPhase, IPP_SIE_SIGNAL *Signal)
{
    UINT32 i, j;
    SENSOR_INFO SenInfo;

    Sensor_GetStatus(IPL_UTI_CONV2_SEN_ID(Id), IPL_AlgGetUIInfo2(Id, IPL_SEL_CAPSENMODE), &SenInfo);

    Signal->Sie_HDVD.HD_ini = HDInv;
    Signal->Sie_HDVD.HD_offset = 0;
    Signal->Sie_HDVD.HD_sync = SenInfo.Mode->TransHD[0].Sync;
    Signal->Sie_HDVD.HD_total = SenInfo.Mode->TransHD[0].Period;

    Signal->Sie_HDVD.VD_ini = VDInv;
    Signal->Sie_HDVD.VD_offset = 0;
    Signal->Sie_HDVD.VD_sync = SenInfo.Mode->TransVD[0].Sync;
    Signal->Sie_HDVD.VD_total = SenInfo.Mode->TransVD[0].Period;

    Signal->SensorPhase.VD = VDPhase;
    Signal->SensorPhase.HD = HDPhase;
    Signal->SensorPhase.Data = DPhase;

    Signal->Sie_ReOrder.Reorder_VEn = DISABLE;
    Signal->Sie_FLD.SieFldNum = SenInfo.Mode->FieldNum - 1;
    for (i = 0; i < FieldCycle; i ++)
    {
        for (j = 0; j < MAX_FLD; j ++)
        {
            if (SenInfo.Mode->FieldTab == NULL)
            {
                Signal->Sie_FLD.FldLine[i][j] = 0;
            }
            else
            {
                Signal->Sie_FLD.FldLine[i][j] = SenInfo.Mode->FieldTab->Map[(i * MAX_FLD) + j] - 1;
            }
        }
    }

    Signal->SieDivNum = SenInfo.Mode->DIVNum - 1;
    *Update |= (SIE_FILD_|SIE_INIT);
}

void IPL_CtrlInitIpc_SIECh0PPB_Cap(UINT32 Id, SIE_UPDATE *Update, SIE_Dma_Out *Out, UINT32 *OutH, UINT32 *OutV)
{
    *OutH = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CH0_CAP_RAW_SIZE_H);
    *OutV = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CH0_CAP_RAW_SIZE_V);
    Out->packBus = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CH0_CAPBIT);
    Out->LineOffset = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CH0_CAP_RAW_SIZE_HLOS);
    *Update |= SIE_IOSize;
}

void IPL_CtrlInitIpc_SIECh2PPB_Cap(UINT32 Id,  SIE_UPDATE *Update, SIE_Dma_Out *Out, UINT32 *OutH, UINT32 *OutV)
{
    *OutH = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CH2_CAP_RAW_SIZE_H);
    *OutV = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CH2_CAP_RAW_SIZE_V);
    Out->packBus = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CH2_CAPBIT);
    Out->LineOffset = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CH2_CAP_RAW_SIZE_HLOS);
    *Update |= SIE_IOSize;
}
void IPL_CtrlInitIpc_SIEIn_Cap(UINT32 Id,  SIE_UPDATE *Update, SIE_WINDOW *Win)
{
    UINT32 i;
    SENSOR_INFO SenInfo;

    Sensor_GetStatus(IPL_UTI_CONV2_SEN_ID(Id), IPL_AlgGetUIInfo2(Id, IPL_SEL_CAPSENMODE), &SenInfo);

    for (i = 0; i < SIE_MAX_DIV; i ++)
    {
        Win->Act.DIV_X[i] = 0;
    }

    for (i = 0; i < SenInfo.Mode->DIVNum; i ++)
    {
        Win->Act.DIV_X[i] = SenInfo.Mode->TransHD[i].DataStart;
    }

    for (i = 0; i < MAX_FLD; i ++)
    {
        Win->Act.FLD_Y[i] = 0;
    }

    for (i = 0; i < SenInfo.Mode->FieldNum; i ++)
    {
        Win->Act.FLD_Y[i] = SenInfo.Mode->TransVD[i].DataStart;
    }

    Win->Act.SizeH = SenInfo.Mode->TransHD[0].DataSize;
    Win->Act.SizeV = SenInfo.Mode->TransVD[0].DataSize;
    Win->Act.CFA = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CAPSTPIX);

    Win->Crop.SizeH = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CAPCROP_SIZE_H);
    Win->Crop.SizeV = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CAPCROP_SIZE_V);
    Win->Crop.CFA = Win->Act.CFA;

    if ((Win->Act.SizeH < Win->Crop.SizeH) || (Win->Act.SizeV < Win->Crop.SizeV))
    {
        DBG_ERR("error act size (%d %d) < crop Size(%d %d)\r\n", Win->Act.SizeH, Win->Act.SizeV, Win->Crop.SizeH, Win->Crop.SizeV);
        Win->Crop.StartPix.x = 0;
        Win->Crop.StartPix.y = 0;
    }
    else
    {
        Win->Crop.StartPix.x = (Win->Act.SizeH - Win->Crop.SizeH) >> 1;
        Win->Crop.StartPix.y = (Win->Act.SizeV - Win->Crop.SizeV) >> 1;
    }
    *Update |= SIE_IOSize;
}

void IPL_CtrlInitIpc_SIEOB_Cap(UINT32 Id,  SIE_UPDATE *Update, SieFuncEn *FuncEn, SIE_INTE_EN *InteEn, SIE_OBAVG *OBAvg, SIE_OBSUB *OBSub)
{
    SENSOR_INFO SenInfo;

    Sensor_GetStatus(IPL_UTI_CONV2_SEN_ID(Id), IPL_AlgGetUIInfo2(Id, IPL_SEL_CAPSENMODE), &SenInfo);

    if (IPL_CtrlGetInfor(Id, IPLCTRL_CAPAUTO_OB_EN) == DISABLE)
    {
        //OBSub->Offset = 0xC0;
        //OBSub->Offset = 0xF8;  //lydia @0416
        OBSub->Offset = IMX322_OB_OFFSET;//0xE8;
        OBSub->DtGain = 0x20;
        *FuncEn |= OBSubSelEn;
        *Update |= (SIE_OBOFS_ | SIE_SubFEn);

    }
    else
    {
        OBAvg->StartPix.x = SenInfo.Mode->OB.TopWin[0];
        OBAvg->StartPix.y = SenInfo.Mode->OB.TopWin[1];
        OBAvg->SizeH = (SenInfo.Mode->OB.TopWin[2] - SenInfo.Mode->OB.TopWin[0]);
        OBAvg->SizeV = (SenInfo.Mode->OB.TopWin[3] - SenInfo.Mode->OB.TopWin[1]);
        OBAvg->AvgActThres = 0x80;
        OBSub->Offset = 0;
        OBSub->DtGain = 0x20;
        *FuncEn |= (OBSubSelEn | OBAvgEn);
        *Update |= (SIE_OBOFS_ | SIE_OBAVG_ | SIE_SubFEn);
    }
}

void IPL_CtrlInitIpc_SIEGamma_Cap(UINT32 Id,  SIE_UPDATE *Update, SieFuncEn *FuncEn, SIE_GAMMA **pGamma)
{
    *Update |= SIE_GAMMA_;
    *FuncEn |= GammaEn;

    *pGamma = &SieRawEncTab;
}

void IPL_CtrlInitIpc_SIERawEnc_Cap(UINT32 Id,  SIE_UPDATE *Update, SieFuncEn *FuncEn, SIE_RAWENC *RawEnc, UINT32 MaxBufSize, UINT32 Ratio)
{
    *Update |= SIE_INIT;
    *FuncEn |= RawEncEn;

    RawEnc->CompMaxSize = MaxBufSize;
    RawEnc->CompRate = Ratio;
}

#if 0
#endif
void IPL_CtrlInitPrvPProcInfo(UINT32 Id, IPL_POST_PROC_FUNC_EN FuncEn)
{
    IPL_PPROC_INFO Info = {0};

    if (FuncEn & IPL_FUNC_DISP)
    {
        IPL_CtrlInitIpc_DispCtrlEn(Id, IPLCTRL_IME_P1_EN, ENABLE);
        IPL_CtrlInitIpc_DispCtrlEn(Id, IPLCTRL_IME_P2_EN, ENABLE);
        IPL_CtrlInitIpc_DispCtrlEn(Id, IPLCTRL_IME_P3_EN, ENABLE);
        IPL_Display_Resume();
    }
    else
    {
        IPL_Display_Pause();
    }

    if ((FuncEn & IPL_FUNC_IMGEFFECT_WDR) && (IPL_CtrlGetInfor(Id, IPLCTRL_PRVFLOW) == ICF_FLOW_B))
    {
        IPL_BufGet(Id, IPLBUF_IMGEFFECT_WDR, &Info.bufaddr, &Info.bufsize);
        Info.ExtData[0] = IPL_CtrlGetHalSetIdPProc(Id);
        Info.IsLockfp = IPL_PPostHDR_IsLock;
        Info.PProcfp = IPL_PPostHDR_Proc;
        IPL_PProc_LoadFunc2(Id, &Info);
    }


    if (FuncEn & IPL_FUNC_PHOTOFRAME)
    {
        PhotoFrame_Open();
        IPL_BufGet(Id, IPLBUF_PHOTOFRAME, &Info.bufaddr, &Info.bufsize);
        Info.IsLockfp = IPL_PPostPF_IsLock;
        Info.PProcfp = IPL_PPostPF_Proc;
        IPL_PProc_LoadFunc2(Id, &Info);
        {
            UINT32 i,j, data,temp;

            for(j=0;j<240;j++)
            {
                temp = (255-j);
                data = temp | (temp<<8) | (temp<<16) | (temp<<24);
                for(i=0;i<320;i+=4)
                    *(UINT32 *)(Info.bufaddr + j*320 +i) = data;
            }
        }
    }

    if (FuncEn & IPL_FUNC_STAMP)
    {
        IPL_BufGet(Id, IPLBUF_STAMP, &Info.bufaddr, &Info.bufsize);
        Info.IsLockfp = IPL_PPostDS_IsLock;
        Info.PProcfp = IPL_PPostDS_Proc;
        IPL_PProc_LoadFunc2(Id, &Info);
    }

    if (FuncEn & IPL_FUNC_RSC)
    {
        IPL_CtrlSetInfor(Id, IPLCTRL_RSC_EN, ENABLE);
        IPL_CtrlSetInfor(Id, IPLCTRL_RSC_RATIO, 10);
    }
    else
    {
        IPL_CtrlSetInfor(Id, IPLCTRL_RSC_EN, DISABLE);
        IPL_CtrlSetInfor(Id, IPLCTRL_RSC_RATIO, 0);
    }

}


#if 0
#endif
void IPL_CtrlInitCapIpcInfo(IPL_GET_CAP_RAW_DATA *CapInfo, IPC_SIE_Info *Info, IPLCTRL_CAP_EXT_INFO *ExtInfo)
{
    static UINT32 RawEncFirstFlag = TRUE;
    UINT32 Ch0HSize, Ch0VSize;
    IPL_HAL_READ readBit = {0};
    SENSOR_INFO SenInfo;
    SIE_UPDATE tmpUpdate;
    SIE_WINDOW tmpWin;
    IPC_QINFO QInfo;

    Sensor_GetStatus(IPL_UTI_CONV2_SEN_ID(CapInfo->Id), IPL_AlgGetUIInfo2(CapInfo->Id, IPL_SEL_CAPSENMODE), &SenInfo);

    if (IPLCTRL_CAP_FLOW_INVID == IPL_CtrlGetInfor(CapInfo->Id, IPLCTRL_CAPFLOW))
    {
        //read sie original settings
        readBit.sieRead = SIE_R_SubFEn;
        IPH_ENG_Read(CapInfo->Id, IPL_HAL_SIE, IPL_CtrlGetHalSetId(CapInfo->Id), readBit, (void *)&Info->psie->pSubFunc->sieFuncEn);
        readBit.sieRead = SIE_R_IO;
        IPH_ENG_Read(CapInfo->Id, IPL_HAL_SIE, IPL_CtrlGetHalSetId(CapInfo->Id), readBit, (void *)Info->psie);
        readBit.sieRead = SIE_R_Out;
        IPH_ENG_Read(CapInfo->Id, IPL_HAL_SIE, IPL_CtrlGetHalSetId(CapInfo->Id), readBit, (void *)Info->psie);

        readBit.sieRead = SIE_R_InSize;
        IPH_ENG_Read(CapInfo->Id, IPL_HAL_SIE, IPL_CtrlGetHalSetId(CapInfo->Id), readBit, (void *)&Info->psie->IMG_Window);

        //read pre dram in information(special case)
        QInfo = IPL_CTRLQuery(ICF_PREIO_RDY);

        /**************** save last sie information ****************/
        ExtInfo->Param[0] = Info->psie->Ch0.Out.PPB0_Addr;
        ExtInfo->Param[1] = Info->psie->Ch0.Out.PPB1_Addr;
        ExtInfo->Param[2] = Info->psie->Ch0.Out.LineOffset;
        ExtInfo->Param[3] = IPL_CtrlGetInfor(CapInfo->Id, IPLCTRL_PRVBURSTLENGTH);
        ExtInfo->Param[4] = Info->psie->IMG_Window.Crop.StartPix.x;
        ExtInfo->Param[5] = Info->psie->IMG_Window.Crop.StartPix.y;
        ExtInfo->Param[6] = Info->psie->IMG_Window.Crop.SizeH;
        ExtInfo->Param[7] = Info->psie->IMG_Window.Crop.SizeV;
        ExtInfo->Param[8] = QInfo.PreDmaIn_Rdy.InDma.PixelAddr;
        ExtInfo->Param[9] = QInfo.PreDmaIn_Rdy.PPB1_Addr;
        /**************** load new sie information ****************/
        IPL_CtrlInitIpc_SIEBurstLength_Cap(CapInfo->Id, &Info->sieUpdate, &SenInfo, &Info->psie->BurstLeng_Ch0);
        IPL_CtrlInitIpc_SIEIn_Cap(CapInfo->Id, &tmpUpdate, &tmpWin);
        Info->psie->IMG_Window.Crop.StartPix.x = tmpWin.Crop.StartPix.x;
        Info->psie->IMG_Window.Crop.StartPix.y = tmpWin.Crop.StartPix.y;
        Info->psie->IMG_Window.Crop.SizeH = tmpWin.Crop.SizeH;
        Info->psie->IMG_Window.Crop.SizeV = tmpWin.Crop.SizeV;

        IPL_CtrlInitIpc_SIECh0PPB_Cap(CapInfo->Id, &Info->sieUpdate, &Info->psie->Ch0.Out, &Ch0HSize, &Ch0VSize);
        Info->psie->Ch0.Src = NonScaled_Img;
        Info->sieUpdate |= SIE_CH0Out_SRC;
    }
    else if (IPLCTRL_CAP_FLOW_SIM == IPL_CtrlGetInfor(CapInfo->Id, IPLCTRL_CAPFLOW))
    {
    }
    else if (IPLCTRL_CAP_FLOW_CCIR == IPL_CtrlGetInfor(CapInfo->Id, IPLCTRL_CAPFLOW))
    {
        if (CapInfo->OutCh0En == ENABLE)
        {
            Info->psie2->Ch0.Out.PPB0_Addr = CapInfo->BufAddrCh0;
            Info->psie2->Ch0.Out.PPB1_Addr = CapInfo->BufAddrCh0;
            Info->sie2Update |= SIE2_OutAddr_Ch0;
        }
    }
    else
    {
        IPL_CtrlInitIpc_SIEBurstLength_Cap(CapInfo->Id, &Info->sieUpdate, &SenInfo, &Info->psie->BurstLeng_Ch0);

        if (IPLCTRL_CAP_FLOW_EBURST == IPL_CtrlGetInfor(CapInfo->Id, IPLCTRL_CAPFLOW))
        {
            /**************** load cap task information ****************/
            ExtInfo->Param[0] = CapInfo->res[0];

            if (ExtInfo->Param[0] == 0)
            {
                RawEncFirstFlag = TRUE;
            }
            else if (ExtInfo->Param[0] == 1)
            {
                IPL_CtrlInitIpc_SIEGamma_Cap(CapInfo->Id, &Info->sieUpdate, &Info->psie->pSubFunc->sieFuncEn, &Info->psie->pSubFunc->pGamma);
                IPL_CtrlInitIpc_SIERawEnc_Cap(CapInfo->Id, &Info->sieUpdate, &Info->psie->pSubFunc->sieFuncEn,
                                                &Info->psie->pSubFunc->RawEnc, CapInfo->CompressMaxSize, CapInfo->CompressRatio);

                //only update gamma at first time
                if (RawEncFirstFlag == FALSE)
                {
                    Info->sieUpdate &= ~SIE_GAMMA_;
                }
                RawEncFirstFlag = FALSE;
            }
        }

        IPL_SIESetECS_FCB(CapInfo->Id, &Info->psie->pSubFunc->sieFuncEn, &Info->psie->pSubFunc->InteEn, &Info->sieUpdate, Info->psie->pSubFunc);


        IPL_CtrlInitIpc_SIETrigSel_Cap(CapInfo->Id, &Info->sieUpdate, &Info->psie->TrigSel);
        //SC2033PM
        //#if (_SENSORLIB_ == _SENSORLIB_CMOS_SC2033PM_)
        IPL_CtrlInitIpc_SIESignal_Cap(CapInfo->Id, &Info->sieUpdate, TRUE, TRUE, _RISING, _RISING, _RISING, &Info->psie->Sie_Signal);
        //#else
        //IPL_CtrlInitIpc_SIESignal_Cap(CapInfo->Id, &Info->sieUpdate, FALSE, FALSE, _RISING, _RISING, _RISING, &Info->psie->Sie_Signal);
        //#endif

        IPL_CtrlInitIpc_SIEAct_Cap(CapInfo->Id, &Info->sieUpdate, &Info->psie->ActMode);
        IPL_CtrlInitIpc_SIECh0PPB_Cap(CapInfo->Id, &Info->sieUpdate, &Info->psie->Ch0.Out, &Ch0HSize, &Ch0VSize);
        IPL_CtrlInitIpc_SIECh2PPB_Cap(CapInfo->Id, &Info->sieUpdate, &Info->psie->Ch2.Out, &Info->psie->DmaOutSizeH, &Info->psie->DmaOutSizeV);
        IPL_CtrlInitIpc_SIEIn_Cap(CapInfo->Id, &Info->sieUpdate, &Info->psie->IMG_Window);
        Info->psie->Ch0.Src = NonScaled_Img;
        Info->psie->Ch2.Src = CH2_Scaled_Img;
        if ((Info->psie->IMG_Window.Crop.SizeH != Ch0HSize) || (Info->psie->IMG_Window.Crop.SizeV != Ch0VSize))
        {
            DBG_ERR("error ch0 output size (%d %d) < crop Size(%d %d)\r\n", Ch0HSize, Ch0VSize, Info->psie->IMG_Window.Crop.SizeH, Info->psie->IMG_Window.Crop.SizeV);
        }
        IPL_CtrlInitIpc_SIEOB_Cap(CapInfo->Id, &Info->sieUpdate, &Info->psie->pSubFunc->sieFuncEn, &Info->psie->pSubFunc->InteEn, &Info->psie->pSubFunc->OBAvg, &Info->psie->pSubFunc->OBSub);

        Info->psie->pSubFunc->InteEn = SIE__INTE_FLDEND;
        Info->sieUpdate |= (SIE_CH0Out_SRC|SIE_CH2Out_SRC|SIE_SubFEn);
    }

    if (CapInfo->OutCh0En == ENABLE)
    {
        Info->psie->Ch0.Out.PPB0_Addr = CapInfo->BufAddrCh0;
        Info->psie->Ch0.Out.PPB1_Addr = CapInfo->BufAddrCh0;
        Info->psie->pSubFunc->sieFuncEn |= DMAOutCh0En;
        Info->sieUpdate |= SIE_OutAddr_Ch0;
    }

    if (CapInfo->OutCh2En == ENABLE)
    {
        Info->psie->Ch2.Out.PPB0_Addr = CapInfo->BufAddrCh2;
        Info->psie->Ch2.Out.PPB1_Addr = CapInfo->BufAddrCh2;
        Info->psie->pSubFunc->sieFuncEn |= DMAOutCh2En;
        Info->sieUpdate |= SIE_OutAddr_Ch2;
    }
}

void IPL_CtrlInitCapIpcInfo_CCIR(IPL_GET_CAP_RAW_DATA *CapInfo, IPC_SIE_Info *Info, IPLCTRL_CAP_EXT_INFO *ExtInfo)
{
    UINT32 Height = 0;
    if ((IPLCTRL_CAP_FLOW_CCIR == IPL_CtrlGetInfor(CapInfo->Id, IPLCTRL_CAPFLOW)) ||
        (IPLCTRL_CAP_FLOW_DUALSENSOR == IPL_CtrlGetInfor(CapInfo->Id, IPLCTRL_CAPFLOW)))
    {
        IPL_CtrlInitIpc_SIE2In_Cap(CapInfo->Id, &Info->sie2Update, &Info->psie2->IMG_Window);
        IPL_CtrlInitIpc_SIE2Signal_Cap(CapInfo->Id, &Info->sie2Update, TRUE, TRUE, _FALLING, _FALLING, _RISING, &Info->psie2->Sie2_Signal);
        IPL_CtrlInitIpc_SIE2Ch0PPB_Cap(CapInfo->Id, &Info->sie2Update, &Info->psie2->Ch0.Out, &Info->psie2->DmaOutSizeH, &Height);
        IPL_SIE2CCIR_FCB(CapInfo->Id, &Info->psie2->pSubFunc->CCIR);
        Info->psie2->Ch0.Src = NonScaled_Img;

        Info->psie2->pSubFunc->InteEn |= SIE2__INTE_FLDEND;
        Info->psie2->pSubFunc->sie2FuncEn |= DviEn_;
        Info->sie2Update |= (SIE2_SubFEn|SIE2_CH0Out_SRC|SIE2_DVI_);

        if (CapInfo->OutCh0En == ENABLE)
        {
            Info->psie2->pSubFunc->sie2FuncEn |= DMAOutCh0En_;
            Info->psie2->Ch0.Out.PPB0_Addr = CapInfo->BufAddrCh0;
            Info->psie2->Ch0.Out.PPB1_Addr = CapInfo->BufAddrCh0;
            Info->sie2Update |= SIE2_OutAddr_Ch0;
        }
    }
    else
    {
        DBG_ERR("flow error\r\n");
    }
}

void IPL_CtrlInitPrvIpcInfo(IPL_PROC_ID Id, IPC_INFO *IpcInfo, IPL_ISR_OBJ_INFO *IsrInfo, IPL_CHGMODE_DATA *ChgMode)
{
    UINT32 i;

    if (IPL_CtrlGetInfor(Id, IPLCTRL_PRVFLOW) == ICF_FLOW_A)
    {
        IPL_CtrlInitIpcInfoFlowA(Id, IpcInfo);
    }
    else if (IPL_CtrlGetInfor(Id, IPLCTRL_PRVFLOW) == ICF_FLOW_B)
    {
        IPL_CtrlInitIpcInfoFlowB(Id, IpcInfo);
    }
    else if (IPL_CtrlGetInfor(Id, IPLCTRL_PRVFLOW) == ICF_FLOW_C)
    {
        IPL_CtrlInitIpcInfoFlowC(Id, IpcInfo);
    }
    else if (IPL_CtrlGetInfor(Id, IPLCTRL_PRVFLOW) == ICF_FLOW_D)
    {
        IPL_CtrlInitIpcInfoFlowD(Id, IpcInfo);
    }
    else
    {
        DBG_ERR("unsupport IPL flow %d\r\n",IPL_CtrlGetInfor(Id, IPLCTRL_PRVFLOW));
    }

    IsrInfo->EventTab[Id].FP[IPL_ISR_SIE] = IPL_IsrSIECB;
    IsrInfo->EventTab[Id].FP[IPL_ISR_IFE] = NULL;
    IsrInfo->EventTab[Id].FP[IPL_ISR_IPE] = IPL_IsrIPECB;
    IsrInfo->EventTab[Id].FP[IPL_ISR_IME] = IPL_IsrIMECB;
    IsrInfo->EventTab[Id].FP[IPL_ISR_PRE] = NULL;
    IsrInfo->EventTab[Id].FP[IPL_ISR_IFE2] = NULL;
    IsrInfo->EventTab[Id].FP[IPL_ISR_DCE] = NULL;
    IsrInfo->EventTab[Id].FP[IPL_ISR_RDE] = NULL;
    for (i = 0; i < IPL_ISR_MAX_CNT; i ++)
    {
        IsrInfo->CB_FP[Id].FP[i] = ChgMode->ISR_CB_FP[i];
    }
}

void IPL_CtrlInitPrvIpcInfo_CCIR(IPL_PROC_ID Id, IPC_INFO *IpcInfo, IPL_ISR_OBJ_INFO *IsrInfo, IPL_CHGMODE_DATA *ChgMode)
{
    UINT32 i;

    if (IPL_CtrlGetInfor(Id, IPLCTRL_PRVFLOW) == ICF_FLOW_D)
    {
        IPL_CtrlInitIpcInfoFlowD_CCIR(Id, IpcInfo);
    }
    else
    {
        DBG_ERR("unsupport IPL flow %d\r\n",IPL_CtrlGetInfor(Id, IPLCTRL_PRVFLOW));
    }

    IsrInfo->EventTab[Id].FP[IPL_ISR_SIE] = NULL;
    IsrInfo->EventTab[Id].FP[IPL_ISR_IFE] = NULL;
    IsrInfo->EventTab[Id].FP[IPL_ISR_IPE] = NULL;
    IsrInfo->EventTab[Id].FP[IPL_ISR_IME] = NULL;
    IsrInfo->EventTab[Id].FP[IPL_ISR_PRE] = NULL;
    IsrInfo->EventTab[Id].FP[IPL_ISR_IFE2] = NULL;
    IsrInfo->EventTab[Id].FP[IPL_ISR_DCE] = NULL;
    IsrInfo->EventTab[Id].FP[IPL_ISR_RDE] = NULL;
    for (i = 0; i < IPL_ISR_MAX_CNT; i ++)
    {
        IsrInfo->CB_FP[Id].FP[i] = NULL;
    }
}

#if 0
#endif
UINT32 IPL_CtrlGetSIECABufInfo(IPLCTRL_CA_TYPE type, UINT32 WinXNum, UINT32 WinYNum)
{
    UINT32 Ratio = 0;
    if (type == IPLCTRL_CA_TYPE_32BIT)
    {
        Ratio = 4;
    }
    else if (type == IPLCTRL_CA_TYPE_64BIT)
    {
        Ratio = 8;
    }
    else
    {
        DBG_ERR("unsupport CA type %d\r\n", type);
    }
    return (WinXNum * WinYNum * Ratio);
}

UINT32 IPL_CtrlGetSIEVABufInfo(void)
{
    return (16 * 16 * 2 * 4);

}

UINT32 IPL_CtrlGetIPEVABufInfo(void)
{
    return (16 * 16 * 3 * 4);
}

void IPL_GetImePathORGInfo(UINT32 Id, IPL_IME_PATH PathId, IPL_IME_PATH_INFO *Info)
{
    if (Info == NULL)
    {
        DBG_ERR("input fail\r\n");
        return;
    }

    if (PathId == IPL_IME_PATH1)
    {
        Info->OutputEn = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P1_EN);
        Info->ImgSizeH = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P1_ORG_SIZE_H);
        Info->ImgSizeV = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P1_ORG_SIZE_V);
        Info->ImgSizeLOfs = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P1_ORG_SIZE_HLOS);
        Info->ImgFmt = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P1_FMT);
    }
    else if (PathId == IPL_IME_PATH2)
    {
        Info->OutputEn = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P2_EN);
        Info->ImgSizeH = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P2_ORG_SIZE_H);
        Info->ImgSizeV = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P2_ORG_SIZE_V);
        Info->ImgSizeLOfs = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P2_ORG_SIZE_HLOS);
        Info->ImgFmt = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P2_FMT);
    }
    else if (PathId == IPL_IME_PATH3)
    {
        Info->OutputEn = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P3_EN);
        Info->ImgSizeH = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P3_ORG_SIZE_H);
        Info->ImgSizeV = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P3_ORG_SIZE_V);
        Info->ImgSizeLOfs = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P3_ORG_SIZE_HLOS);
        Info->ImgFmt = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P3_FMT);
    }
    else
    {
        DBG_ERR("path id fail %d\r\n", PathId);
    }
}

void IPL_GetImePathInfo(UINT32 Id, IPL_IME_PATH PathId, IPL_IME_PATH_INFO *Info)
{
    if (Info == NULL)
    {
        DBG_ERR("input fail\r\n");
        return;
    }

    if (PathId == IPL_IME_PATH1)
    {
        Info->OutputEn = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P1_EN);
        Info->ImgSizeH = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P1_OUT_SIZE_H);
        Info->ImgSizeV = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P1_OUT_SIZE_V);
        Info->ImgSizeLOfs = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P1_OUT_SIZE_HLOS);
        Info->ImgFmt = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P1_FMT);
    }
    else if (PathId == IPL_IME_PATH2)
    {
        Info->OutputEn = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P2_EN);
        Info->ImgSizeH = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P2_OUT_SIZE_H);
        Info->ImgSizeV = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P2_OUT_SIZE_V);
        Info->ImgSizeLOfs = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P2_OUT_SIZE_HLOS);
        Info->ImgFmt = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P2_FMT);
    }
    else if (PathId == IPL_IME_PATH3)
    {
        Info->OutputEn = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P3_EN);
        Info->ImgSizeH = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P3_OUT_SIZE_H);
        Info->ImgSizeV = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P3_OUT_SIZE_V);
        Info->ImgSizeLOfs = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P3_OUT_SIZE_HLOS);
        Info->ImgFmt = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P3_FMT);
    }
    else
    {
        DBG_ERR("path id fail %d\r\n", PathId);
    }
}

BOOL IPL_ChkImePathInfo(UINT32 Id, IPL_IME_PATH PathId, IPL_IME_PATH_INFO *Info)
{
    IPL_YCC_IMG_INFO orgInfo = {0}, newInfo = {0};
    UINT32 orgYSize, orgUVSize, newYSize, newUVSize;

    if (Info == NULL)
    {
        DBG_ERR("input fail\r\n");
        return FALSE;
    }

    if (PathId == IPL_IME_PATH1)
    {
        if (Info->OutputEn == DISABLE)
        {
            return TRUE;
        }
        //buf
        orgInfo.type = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P1_FMT);
        orgInfo.Ch[IPL_IMG_YUV_Y].Width = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P1_BUF_SIZE_H);
        orgInfo.Ch[IPL_IMG_YUV_Y].LineOfs = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P1_BUF_SIZE_H);
        orgInfo.Ch[IPL_IMG_YUV_Y].Height = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P1_BUF_SIZE_V);
        orgInfo.Ch[IPL_IMG_YUV_UV] = IPL_UTI_Y_INFO_CONV2(orgInfo.type, orgInfo.Ch[IPL_IMG_YUV_Y]);

        //new
        newInfo.type = Info->ImgFmt;
        newInfo.Ch[IPL_IMG_YUV_Y].Width = Info->ImgSizeH;
        newInfo.Ch[IPL_IMG_YUV_Y].LineOfs = Info->ImgSizeLOfs;
        newInfo.Ch[IPL_IMG_YUV_Y].Height = Info->ImgSizeV;
        newInfo.Ch[IPL_IMG_YUV_UV] = IPL_UTI_Y_INFO_CONV2(newInfo.type, newInfo.Ch[IPL_IMG_YUV_Y]);
    }
    else if (PathId == IPL_IME_PATH2)
    {
        if (Info->OutputEn == DISABLE)
        {
            return TRUE;
        }
        //buf
        orgInfo.type = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P2_FMT);
        orgInfo.Ch[IPL_IMG_YUV_Y].Width = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P2_BUF_SIZE_H);
        orgInfo.Ch[IPL_IMG_YUV_Y].LineOfs = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P2_BUF_SIZE_H);
        orgInfo.Ch[IPL_IMG_YUV_Y].Height = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P2_BUF_SIZE_V);
        orgInfo.Ch[IPL_IMG_YUV_UV] = IPL_UTI_Y_INFO_CONV2(orgInfo.type, orgInfo.Ch[IPL_IMG_YUV_Y]);

        //new
        newInfo.type = Info->ImgFmt;
        newInfo.Ch[IPL_IMG_YUV_Y].Width = Info->ImgSizeH;
        newInfo.Ch[IPL_IMG_YUV_Y].LineOfs = Info->ImgSizeLOfs;
        newInfo.Ch[IPL_IMG_YUV_Y].Height = Info->ImgSizeV;
        newInfo.Ch[IPL_IMG_YUV_UV] = IPL_UTI_Y_INFO_CONV2(newInfo.type, newInfo.Ch[IPL_IMG_YUV_Y]);
    }
    else if (PathId == IPL_IME_PATH3)
    {
        if (Info->OutputEn == DISABLE)
        {
            return TRUE;
        }
        //org
        orgInfo.type = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P3_FMT);
        orgInfo.Ch[IPL_IMG_YUV_Y].Width = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P3_BUF_SIZE_H);
        orgInfo.Ch[IPL_IMG_YUV_Y].LineOfs = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P3_BUF_SIZE_H);
        orgInfo.Ch[IPL_IMG_YUV_Y].Height = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P3_BUF_SIZE_V);
        orgInfo.Ch[IPL_IMG_YUV_UV] = IPL_UTI_Y_INFO_CONV2(orgInfo.type, orgInfo.Ch[IPL_IMG_YUV_Y]);

        //new
        newInfo.type = Info->ImgFmt;
        newInfo.Ch[IPL_IMG_YUV_Y].Width = Info->ImgSizeH;
        newInfo.Ch[IPL_IMG_YUV_Y].LineOfs = Info->ImgSizeLOfs;
        newInfo.Ch[IPL_IMG_YUV_Y].Height = Info->ImgSizeV;
        newInfo.Ch[IPL_IMG_YUV_UV] = IPL_UTI_Y_INFO_CONV2(newInfo.type, newInfo.Ch[IPL_IMG_YUV_Y]);
    }
    else
    {
        DBG_ERR("path id fail %d\r\n", PathId);
        return FALSE;
    }

    orgYSize = (orgInfo.Ch[IPL_IMG_YUV_Y].LineOfs * orgInfo.Ch[IPL_IMG_YUV_Y].Height);
    orgUVSize = (orgInfo.Ch[IPL_IMG_YUV_UV].LineOfs * orgInfo.Ch[IPL_IMG_YUV_UV].Height);

    newYSize = (newInfo.Ch[IPL_IMG_YUV_Y].LineOfs * newInfo.Ch[IPL_IMG_YUV_Y].Height);
    newUVSize = (newInfo.Ch[IPL_IMG_YUV_UV].LineOfs * newInfo.Ch[IPL_IMG_YUV_UV].Height);


    if ((orgYSize >= newYSize) && (orgUVSize >= newUVSize))
    {
        return TRUE;
    }
    DBG_ERR("buffer overflow Y(org 0x%.8x > new 0x%.8x)\r\n", orgYSize, newYSize);
    DBG_ERR("buffer overflow UV(org 0x%.8x > new 0x%.8x)\r\n", orgUVSize, newUVSize);
    return FALSE;
}

void IPL_SetImePathInfo(UINT32 Id, IPL_IME_PATH PathId, IPL_IME_PATH_INFO *Info)
{
    IPL_YCC_CH_INFO SizeInfo;
    UINT32 Width, Height, LineOfs;

    if (Info == NULL)
    {
        DBG_ERR("input fail\r\n");
        return;
    }
    if (PathId == IPL_IME_PATH1)
    {
        if (Info->OutputEn == ENABLE)
        {
            IPL_CtrlSetInfor(Id, IPLCTRL_IME_P1_ORG_SIZE_H, Info->ImgSizeH);
            IPL_CtrlSetInfor(Id, IPLCTRL_IME_P1_ORG_SIZE_V, Info->ImgSizeV);
            IPL_CtrlSetInfor(Id, IPLCTRL_IME_P1_ORG_SIZE_HLOS, Info->ImgSizeLOfs);
            IPL_CtrlSetInfor(Id, IPLCTRL_IME_P1_FMT, Info->ImgFmt);

            Width = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P1_ORG_SIZE_H);
            LineOfs = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P1_ORG_SIZE_HLOS);
            Height = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P1_ORG_SIZE_V);

            if (IPL_CtrlGetInfor(Id, IPLCTRL_DIS_EN) == ENABLE)
            {
                Width = IPL_UTI_DIS_ADJ_HSIZE(Width, IPL_CtrlGetInfor(Id, IPLCTRL_DIS_RATIO), 16);
                LineOfs = IPL_UTI_DIS_ADJ_HSIZE(LineOfs, IPL_CtrlGetInfor(Id, IPLCTRL_DIS_RATIO), 16);
                Height = IPL_UTI_DIS_ADJ_VSIZE(Height, IPL_CtrlGetInfor(Id, IPLCTRL_DIS_RATIO), 4);
            }
            IPL_CtrlSetInfor(Id, IPLCTRL_IME_P1_OUT_SIZE_H, Width);
            IPL_CtrlSetInfor(Id, IPLCTRL_IME_P1_OUT_SIZE_HLOS, LineOfs);
            IPL_CtrlSetInfor(Id, IPLCTRL_IME_P1_OUT_SIZE_V, Height);


            Width = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P1_ORG_SIZE_H);
            LineOfs = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P1_OUT_SIZE_HLOS);
            Height = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P1_ORG_SIZE_V);
            IPL_CtrlSetInfor(Id, IPLCTRL_IME_P1_DISP_SIZE_H, Width);
            IPL_CtrlSetInfor(Id, IPLCTRL_IME_P1_DISP_SIZE_HLOS, LineOfs);
            IPL_CtrlSetInfor(Id, IPLCTRL_IME_P1_DISP_SIZE_V, Height);

            SizeInfo.Width = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P1_DISP_SIZE_H);
            SizeInfo.Height = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P1_DISP_SIZE_V);
            IPL_SetDeviceInputInfo(0, SizeInfo);
        }
        IPL_CtrlSetInfor(Id, IPLCTRL_IME_P1_EN, Info->OutputEn);
    }
    else if (PathId == IPL_IME_PATH2)
    {
        if (Info->OutputEn == ENABLE)
        {
            IPL_CtrlSetInfor(Id, IPLCTRL_IME_P2_ORG_SIZE_H, Info->ImgSizeH);
            IPL_CtrlSetInfor(Id, IPLCTRL_IME_P2_ORG_SIZE_V, Info->ImgSizeV);
            IPL_CtrlSetInfor(Id, IPLCTRL_IME_P2_ORG_SIZE_HLOS, Info->ImgSizeLOfs);
            IPL_CtrlSetInfor(Id, IPLCTRL_IME_P2_FMT, Info->ImgFmt);

            Width = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P2_ORG_SIZE_H);
            LineOfs = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P2_ORG_SIZE_HLOS);
            Height = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P2_ORG_SIZE_V);

            if (IPL_CtrlGetInfor(Id, IPLCTRL_DIS_EN) == ENABLE)
            {
                Width = IPL_UTI_DIS_ADJ_HSIZE(Width, IPL_CtrlGetInfor(Id, IPLCTRL_DIS_RATIO), 16);
                LineOfs = IPL_UTI_DIS_ADJ_HSIZE(LineOfs, IPL_CtrlGetInfor(Id, IPLCTRL_DIS_RATIO), 16);
                Height = IPL_UTI_DIS_ADJ_VSIZE(Height, IPL_CtrlGetInfor(Id, IPLCTRL_DIS_RATIO), 4);
            }
            IPL_CtrlSetInfor(Id, IPLCTRL_IME_P2_OUT_SIZE_H, Width);
            IPL_CtrlSetInfor(Id, IPLCTRL_IME_P2_OUT_SIZE_HLOS, LineOfs);
            IPL_CtrlSetInfor(Id, IPLCTRL_IME_P2_OUT_SIZE_V, Height);


            Width = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P2_ORG_SIZE_H);
            LineOfs = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P2_OUT_SIZE_HLOS);
            Height = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P2_ORG_SIZE_V);
            IPL_CtrlSetInfor(Id, IPLCTRL_IME_P2_DISP_SIZE_H, Width);
            IPL_CtrlSetInfor(Id, IPLCTRL_IME_P2_DISP_SIZE_HLOS, LineOfs);
            IPL_CtrlSetInfor(Id, IPLCTRL_IME_P2_DISP_SIZE_V, Height);

            SizeInfo.Width = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P2_DISP_SIZE_H);
            SizeInfo.Height = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P2_DISP_SIZE_V);
            IPL_SetDeviceInputInfo(1, SizeInfo);
        }
        IPL_CtrlSetInfor(Id, IPLCTRL_IME_P2_EN, Info->OutputEn);
    }
    else if (PathId == IPL_IME_PATH3)
    {
        if (Info->OutputEn == ENABLE)
        {
            IPL_CtrlSetInfor(Id, IPLCTRL_IME_P3_ORG_SIZE_H, Info->ImgSizeH);
            IPL_CtrlSetInfor(Id, IPLCTRL_IME_P3_ORG_SIZE_V, Info->ImgSizeV);
            IPL_CtrlSetInfor(Id, IPLCTRL_IME_P3_ORG_SIZE_HLOS, Info->ImgSizeLOfs);
            IPL_CtrlSetInfor(Id, IPLCTRL_IME_P3_FMT, Info->ImgFmt);

            Width = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P3_ORG_SIZE_H);
            LineOfs = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P3_ORG_SIZE_HLOS);
            Height = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P3_ORG_SIZE_V);

            if (IPL_CtrlGetInfor(Id, IPLCTRL_DIS_EN) == ENABLE)
            {
                Width = IPL_UTI_DIS_ADJ_HSIZE(Width, IPL_CtrlGetInfor(Id, IPLCTRL_DIS_RATIO), 16);
                LineOfs = IPL_UTI_DIS_ADJ_HSIZE(LineOfs, IPL_CtrlGetInfor(Id, IPLCTRL_DIS_RATIO), 16);
                Height = IPL_UTI_DIS_ADJ_VSIZE(Height, IPL_CtrlGetInfor(Id, IPLCTRL_DIS_RATIO), 4);
            }
            IPL_CtrlSetInfor(Id, IPLCTRL_IME_P3_OUT_SIZE_H, Width);
            IPL_CtrlSetInfor(Id, IPLCTRL_IME_P3_OUT_SIZE_HLOS, LineOfs);
            IPL_CtrlSetInfor(Id, IPLCTRL_IME_P3_OUT_SIZE_V, Height);


            Width = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P3_ORG_SIZE_H);
            LineOfs = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P3_OUT_SIZE_HLOS);
            Height = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P3_ORG_SIZE_V);
            IPL_CtrlSetInfor(Id, IPLCTRL_IME_P3_DISP_SIZE_H, Width);
            IPL_CtrlSetInfor(Id, IPLCTRL_IME_P3_DISP_SIZE_HLOS, LineOfs);
            IPL_CtrlSetInfor(Id, IPLCTRL_IME_P3_DISP_SIZE_V, Height);

            SizeInfo.Width = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P3_DISP_SIZE_H);
            SizeInfo.Height = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P3_DISP_SIZE_V);
            IPL_SetDeviceInputInfo(2, SizeInfo);
        }
        IPL_CtrlSetInfor(Id, IPLCTRL_IME_P3_EN, Info->OutputEn);
    }
    else
    {
        DBG_ERR("path id fail %d\r\n", PathId);
    }
}

void IPL_CtrlPrvSetDZoomInfo(UINT32 Id)
{
    SENSOR_INFO Info;
    UINT32 Width, Height;

    //initial sensor parameter
    Sensor_GetStatus(IPL_UTI_CONV2_SEN_ID(Id), IPL_AlgGetUIInfo2(Id, IPL_SEL_PRVSENMODE), &Info);

    //SIE crop
    IPL_DzoomGetSIECropSize(Id, IPL_DzoomGetIndex(Id), &Width, &Height);

    Width = IPL_UTI_SENCROPRATIO_ADJ_HSIZE(IPL_CtrlGetInfor(Id, IPLCTRL_SEN_PRVCROPRATIO), IPL_UTI_CONV_SEN_RATIO(Info.Mode->Ratio), Width, 4);
    Height = IPL_UTI_SENCROPRATIO_ADJ_VSIZE(IPL_CtrlGetInfor(Id, IPLCTRL_SEN_PRVCROPRATIO), IPL_UTI_CONV_SEN_RATIO(Info.Mode->Ratio), Height, 4);

    IPL_CtrlSetInfor(Id, IPLCTRL_SIE_PRVCROP_SIZE_H, Width);
    IPL_CtrlSetInfor(Id, IPLCTRL_SIE_PRVCROP_SIZE_V, Height);

    //SIE ch0
    IPL_DzoomGetSIEOutSize(Id, IPL_DzoomGetIndex(Id), &Width, &Height);

    Width = IPL_UTI_SENCROPRATIO_ADJ_HSIZE(IPL_CtrlGetInfor(Id, IPLCTRL_SEN_PRVCROPRATIO), IPL_UTI_CONV_SEN_RATIO(Info.Mode->Ratio), Width, 4);
    Height = IPL_UTI_SENCROPRATIO_ADJ_VSIZE(IPL_CtrlGetInfor(Id, IPLCTRL_SEN_PRVCROPRATIO), IPL_UTI_CONV_SEN_RATIO(Info.Mode->Ratio), Height, 4);

    IPL_CtrlSetInfor(Id, IPLCTRL_SIE_CH0_RAW_SIZE_H, Width);
    IPL_CtrlSetInfor(Id, IPLCTRL_SIE_CH0_PRVBIT, IPL_UTI_CONV_ALGINFO_RAW_BIT(IPL_AlgGetUIInfo2(Id, IPL_SEL_RAW_BITDEPTH_PRV)));
    IPL_CtrlSetInfor(Id, IPLCTRL_SIE_CH0_RAW_SIZE_HLOS, IPL_UTI_RAWH_CONV2_LOFS(Width, IPL_UTI_CONV_ALGINFO_RAW_BIT(IPL_AlgGetUIInfo2(Id, IPL_SEL_RAW_BITDEPTH_PRV))));
    IPL_CtrlSetInfor(Id, IPLCTRL_SIE_CH0_RAW_SIZE_V, Height);

    //SIE ch2
    IPL_CtrlSetInfor(Id, IPLCTRL_SIE_CH2_RAW_SIZE_H, 0);
    IPL_CtrlSetInfor(Id, IPLCTRL_SIE_CH2_PRVBIT, 0);
    IPL_CtrlSetInfor(Id, IPLCTRL_SIE_CH2_RAW_SIZE_HLOS, 0);
    IPL_CtrlSetInfor(Id, IPLCTRL_SIE_CH2_RAW_SIZE_V, 0);

    //PRE IN
    IPL_DzoomGetPREInSize(Id, IPL_DzoomGetIndex(Id), &Width, &Height);

    Width = IPL_UTI_SENCROPRATIO_ADJ_HSIZE(IPL_CtrlGetInfor(Id, IPLCTRL_SEN_PRVCROPRATIO), IPL_UTI_CONV_SEN_RATIO(Info.Mode->Ratio), Width, 4);
    Height = IPL_UTI_SENCROPRATIO_ADJ_VSIZE(IPL_CtrlGetInfor(Id, IPLCTRL_SEN_PRVCROPRATIO), IPL_UTI_CONV_SEN_RATIO(Info.Mode->Ratio), Height, 4);

    IPL_CtrlSetInfor(Id, IPLCTRL_PRE_IN_SIZE_H, Width);
    IPL_CtrlSetInfor(Id, IPLCTRL_PRE_IN_SIZE_HLOS, IPL_UTI_RAWH_CONV2_LOFS(Width, IPL_UTI_CONV_ALGINFO_RAW_BIT(IPL_AlgGetUIInfo2(Id, IPL_SEL_RAW_BITDEPTH_PRV))));
    IPL_CtrlSetInfor(Id, IPLCTRL_PRE_IN_SIZE_V, Height);
}

void IPL_CtrlPrvGetDZoomInfo(UINT32 Id, IPC_Dzoom_Info *Info)
{
    SENSOR_INFO SenInfo;

    //initial sensor parameter
    Sensor_GetStatus(IPL_UTI_CONV2_SEN_ID(Id), IPL_AlgGetUIInfo2(Id, IPL_SEL_PRVSENMODE), &SenInfo);

    Info->Idx = IPL_CtrlGetHalSetId(Id);
    Info->sieCropHini = (SenInfo.Mode->TransHD->DataSize - IPL_CtrlGetInfor(Id, IPLCTRL_SIE_PRVCROP_SIZE_H)) >> 1;
    Info->sieCropVini = (SenInfo.Mode->TransVD->DataSize - IPL_CtrlGetInfor(Id, IPLCTRL_SIE_PRVCROP_SIZE_V)) >> 1;
    Info->sieCropH = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_PRVCROP_SIZE_H);
    Info->sieCropV = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_PRVCROP_SIZE_V);
    Info->sieOutH = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CH0_RAW_SIZE_H);
    Info->sieOutV = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CH0_RAW_SIZE_V);
    Info->sieOutLineOfs = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CH0_RAW_SIZE_HLOS);
    Info->preInH = IPL_CtrlGetInfor(Id, IPLCTRL_PRE_IN_SIZE_H);
    Info->preInV = IPL_CtrlGetInfor(Id, IPLCTRL_PRE_IN_SIZE_V);
    Info->preInLoneOfs = IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CH0_RAW_SIZE_HLOS);
    Info->bChgCAParam = (BOOL)IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CA_EN);
}

#if 0
#endif

void IPL_CtrlInitPrvExtBufInfo(UINT32 Id, IPL_CHGMODE_DATA *ChgMode, IPLBUF_ENG2DRAMINFO *BufInfo)
{
    PPOST_HDR_INFO HdrInfo = {0};

    BufInfo->IEffectWDREn = DISABLE;
    if ((ChgMode->FuncEn & IPL_FUNC_IMGEFFECT_WDR) && (IPL_CtrlGetInfor(Id, IPLCTRL_PRVFLOW) == ICF_FLOW_B))
    {
        BufInfo->IEffectWDREn = ENABLE;

        HdrInfo.InImg.Width = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P2_BUF_SIZE_H);
        HdrInfo.InImg.LineOfs = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P2_BUF_SIZE_H);
        HdrInfo.InImg.Height = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P2_BUF_SIZE_V);
        HdrInfo.InImgtype = IPL_CtrlGetInfor(Id, IPLCTRL_IME_P2_FMT);
        HdrInfo.refImg.Width = IPL_CtrlGetInfor(Id, IPLCTRL_IPE_V_SIZE_H);
        HdrInfo.refImg.LineOfs = IPL_CtrlGetInfor(Id, IPLCTRL_IPE_V_SIZE_HLOS);
        HdrInfo.refImg.Height = IPL_CtrlGetInfor(Id, IPLCTRL_IPE_V_SIZE_V);
        BufInfo->IEffectWDRBufSize = IPL_PPostHDR_GetMaxWorkBufSize(&HdrInfo);
    }

    BufInfo->StampEn = DISABLE;
    if (ChgMode->FuncEn & IPL_FUNC_STAMP)
    {
        BufInfo->StampEn = ENABLE;
        BufInfo->StampBufSize = DataStamp_GetMaxWorkBufSize();
    }

    BufInfo->AlbumEn = DISABLE;
    if (ChgMode->FuncEn & IPL_FUNC_ALBUM)
    {
        BufInfo->AlbumEn = ENABLE;
    }
    if (ChgMode->FuncEn & IPL_FUNC_PHOTOFRAME)
    {
        BufInfo->PhotoFrameEn = ENABLE;
        BufInfo->PhotoFrameBufSize = (320*240*2);
    }
}

void IPL_CtrlInitCapBufInfo(UINT32 Id, IPL_CHGMODE_DATA *ChgMode, IPLBUF_ENG2DRAMINFO *BufInfo)
{
}

void IPL_CtrlInitPrvBufInfo(UINT32 Id, IPL_CHGMODE_DATA *ChgMode, IPLBUF_ENG2DRAMINFO *BufInfo)
{
    if (IPL_CtrlGetInfor(Id, IPLCTRL_PRVFLOW) == ICF_FLOW_A)
    {
        IPL_CtrlInitBufInfoFlowA(Id, BufInfo);
        BufInfo->Id = Id;
    }
    else if (IPL_CtrlGetInfor(Id, IPLCTRL_PRVFLOW) == ICF_FLOW_B)
    {
        IPL_CtrlInitBufInfoFlowB(Id, BufInfo);
        BufInfo->Id = Id;
    }
    else if (IPL_CtrlGetInfor(Id, IPLCTRL_PRVFLOW) == ICF_FLOW_C)
    {
        IPL_CtrlInitBufInfoFlowC(Id, BufInfo);
        BufInfo->Id = Id;
    }
    else if (IPL_CtrlGetInfor(Id, IPLCTRL_PRVFLOW) == ICF_FLOW_D)
    {
        IPL_CtrlInitBufInfoFlowD(Id, BufInfo);
        BufInfo->Id = Id;
    }
    else
    {
        DBG_ERR("unsupport IPL flow %d\r\n",IPL_CtrlGetInfor(Id, IPLCTRL_PRVFLOW));
    }
}

void IPL_CtrlInitPrvBufInfo_CCIR(UINT32 Id, IPL_CHGMODE_DATA *ChgMode, IPLBUF_ENG2DRAMINFO *BufInfo)
{
    if (IPL_CtrlGetInfor(Id, IPLCTRL_PRVFLOW) == ICF_FLOW_D)
    {
        IPL_CtrlInitBufInfoFlowD_CCIR(Id, BufInfo);
        BufInfo->Id = Id;
    }
    else
    {
        DBG_ERR("unsupport IPL flow %d\r\n",IPL_CtrlGetInfor(Id, IPLCTRL_PRVFLOW));
    }
}
#if 0
#endif
void IPL_CtrlCapInit(UINT32 Id, UINT32 EventId, IPLCTRL_INFO *CtrlInfo)
{
    UINT32 Width, Height, BitNum;

    IPL_CtrlSetInfor(Id, IPLCTRL_CAPBURSTLENGTH, _BURST_64WORD);
    if (EventId == IPL_FLOW_NOR_GETRAW)
    {
        IPL_CtrlSetInfor(Id, IPLCTRL_CAPFLOW, IPLCTRL_CAP_FLOW_NORMAL);
    }
    else if (EventId == IPL_FLOW_HDR_GETRAW)
    {
        IPL_CtrlSetInfor(Id, IPLCTRL_CAPFLOW, IPLCTRL_CAP_FLOW_HDR);
    }
    else if (EventId == IPL_FLOW_VID_GETRAW)
    {
        IPL_CtrlSetInfor(Id, IPLCTRL_CAPBURSTLENGTH, _BURST_128WORD);
        IPL_CtrlSetInfor(Id, IPLCTRL_CAPFLOW, IPLCTRL_CAP_FLOW_INVID);
    }
    else if (EventId == IPL_FLOW_HS_GETRAW)
    {
        IPL_CtrlSetInfor(Id, IPLCTRL_CAPFLOW, IPLCTRL_CAP_FLOW_HS);
    }
    else if (EventId == IPL_FLOW_3D_GETRAW)
    {
        IPL_CtrlSetInfor(Id, IPLCTRL_CAPFLOW, IPLCTRL_CAP_FLOW_3D);
    }
    else if (EventId == IPL_FLOW_EB_GETRAW)
    {
        IPL_CtrlSetInfor(Id, IPLCTRL_CAPFLOW, IPLCTRL_CAP_FLOW_EBURST);
    }
    else if (EventId == IPL_FLOW_AEB_GETRAW)
    {
        IPL_CtrlSetInfor(Id, IPLCTRL_CAPFLOW, IPLCTRL_CAP_FLOW_AEB);
    }
    else if (EventId == IPL_FLOW_AWB_GETRAW)
    {
        IPL_CtrlSetInfor(Id, IPLCTRL_CAPFLOW, IPLCTRL_CAP_FLOW_AWB);
    }
    else if (EventId == IPL_FLOW_MFHDR_GETRAW)
    {
        IPL_CtrlSetInfor(Id, IPLCTRL_CAPFLOW, IPLCTRL_CAP_FLOW_MFHDR);
    }
    else if (EventId == IPL_FLOW_MFANTISHAKE_GETRAW)
    {
        IPL_CtrlSetInfor(Id, IPLCTRL_CAPFLOW, IPLCTRL_CAP_FLOW_MFANTISHAKE);
    }
    else if (EventId == IPL_FLOW_DUALSENSOR_GETRAW)
    {
        IPL_CtrlSetInfor(Id, IPLCTRL_CAPFLOW, IPLCTRL_CAP_FLOW_DUALSENSOR);
    }
    else
    {
        IPL_CtrlSetInfor(Id, IPLCTRL_CAPFLOW, IPLCTRL_CAP_FLOW_NONE);
        DBG_ERR("unsupport EventId flow %d\r\n",EventId);
    }

    IPL_CtrlSetInfor(Id, IPLCTRL_SEN_CAPCROPRATIO, CtrlInfo->ChgMode->CropRatio);

    IPL_CtrlSetInfor(Id, IPLCTRL_CAPAUTO_OB_EN, DISABLE);
    IPL_CtrlSetInfor(Id, IPLCTRL_CAPDF_EN, DISABLE);
    IPL_CtrlSetInfor(Id, IPLCTRL_SIE_CH2_CAP_SUBRATIO, 100);
    IPL_CtrlSetInfor(Id, IPLCTRL_SIE_CAPSTPIX, IPL_UTI_CONV_SEN_STPIX(CtrlInfo->Info->Mode->StPix));

    IPL_CtrlSetInfor(Id, IPLCTRL_CAP_PRI_V_EN, IQS_CAPPRI_IsRetinexEn());
    IPL_CtrlSetInfor(Id, IPLCTRL_CAP_PRI_V_SUBRATIO, IQS_CAPPRI_GetRetinexRefImgRatio());

    IPL_CtrlSetInfor(Id, IPLCTRL_CAP_PRI_CC_EN, IQS_CAPPRI_IsChromaAdaptEn());
    IPL_CtrlSetInfor(Id, IPLCTRL_CAP_PRI_CC_SUBRATIO, IQS_CAPPRI_GetLCARefImgRatio());

    IPL_CtrlSetInfor(Id, IPLCTRL_CAP_QV_V_EN, IQS_CAPQV_IsRetinexEn());
    IPL_CtrlSetInfor(Id, IPLCTRL_CAP_QV_V_SUBRATIO, IQS_CAPQV_GetRetinexRefImgRatio());

    IPL_CtrlSetInfor(Id, IPLCTRL_CAP_QV_CC_EN, IQS_CAPQV_IsChromaAdaptEn());
    IPL_CtrlSetInfor(Id, IPLCTRL_CAP_QV_CC_SUBRATIO, IQS_CAPQV_GetLCARefImgRatio());

    IPL_DzoomGetSIECropSize(Id, IPL_DzoomGetIndex(Id), &Width, &Height);

    Width = IPL_UTI_SENCROPRATIO_ADJ_HSIZE(IPL_CtrlGetInfor(Id, IPLCTRL_SEN_CAPCROPRATIO), IPL_UTI_CONV_SEN_RATIO(CtrlInfo->Info->Mode->Ratio), Width, 4);
    Height = IPL_UTI_SENCROPRATIO_ADJ_VSIZE(IPL_CtrlGetInfor(Id, IPLCTRL_SEN_CAPCROPRATIO), IPL_UTI_CONV_SEN_RATIO(CtrlInfo->Info->Mode->Ratio), Height, 4);

    IPL_CtrlSetInfor(Id, IPLCTRL_SIE_CAPCROP_SIZE_H, Width);
    IPL_CtrlSetInfor(Id, IPLCTRL_SIE_CAPCROP_SIZE_V, Height);

    if (EventId == IPL_FLOW_VID_GETRAW)
    {
        IPL_DzoomGetSIECropSize(Id, IPL_DzoomGetIndex(Id), &Width, &Height);
    }
    else
    {
        IPL_DzoomGetSIEOutSize(Id, IPL_DzoomGetIndex(Id), &Width, &Height);
    }

    Width = IPL_UTI_SENCROPRATIO_ADJ_HSIZE(IPL_CtrlGetInfor(Id, IPLCTRL_SEN_CAPCROPRATIO), IPL_UTI_CONV_SEN_RATIO(CtrlInfo->Info->Mode->Ratio), Width, 4);
    Height = IPL_UTI_SENCROPRATIO_ADJ_VSIZE(IPL_CtrlGetInfor(Id, IPLCTRL_SEN_CAPCROPRATIO), IPL_UTI_CONV_SEN_RATIO(CtrlInfo->Info->Mode->Ratio), Height, 4);

    IPL_CtrlSetInfor(Id, IPLCTRL_SIE_CH0_RAW_BUFNUM, 1);
    IPL_CtrlSetInfor(Id, IPLCTRL_SIE_CH0_CAP_RAW_SIZE_H, Width);

    if (EventId == IPL_FLOW_EB_GETRAW)
    {
        BitNum = IPL_RAW_BIT_12;
    }
    else
    {
        BitNum = IPL_UTI_CONV_ALGINFO_RAW_BIT(IPL_AlgGetUIInfo2(Id, IPL_SEL_RAW_BITDEPTH_CAP));
    }

    IPL_CtrlSetInfor(Id, IPLCTRL_SIE_CH0_CAPBIT, BitNum);
    IPL_CtrlSetInfor(Id, IPLCTRL_SIE_CH0_CAP_RAW_SIZE_HLOS, IPL_UTI_RAWH_CONV2_LOFS(Width, BitNum));
    IPL_CtrlSetInfor(Id, IPLCTRL_SIE_CH0_CAP_RAW_SIZE_V, Height);

    if (EventId == IPL_FLOW_VID_GETRAW)
    {
        IPL_DzoomGetSIECropSize(Id, IPL_DzoomGetIndex(Id), &Width, &Height);
    }
    else
    {
        IPL_DzoomGetSIEOutSize(Id, IPL_DzoomGetIndex(Id), &Width, &Height);
    }

    Width = IPL_UTI_SIESUB_ADJ_HSIZE(Width, IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CH2_CAP_SUBRATIO), 4);
    Height = IPL_UTI_SIESUB_ADJ_VSIZE(Height, IPL_CtrlGetInfor(Id, IPLCTRL_SIE_CH2_CAP_SUBRATIO), 4);
    Width = IPL_UTI_SENCROPRATIO_ADJ_HSIZE(IPL_CtrlGetInfor(Id, IPLCTRL_SEN_CAPCROPRATIO), IPL_UTI_CONV_SEN_RATIO(CtrlInfo->Info->Mode->Ratio), Width, 4);
    Height = IPL_UTI_SENCROPRATIO_ADJ_VSIZE(IPL_CtrlGetInfor(Id, IPLCTRL_SEN_CAPCROPRATIO), IPL_UTI_CONV_SEN_RATIO(CtrlInfo->Info->Mode->Ratio), Height, 4);

    IPL_CtrlSetInfor(Id, IPLCTRL_SIE_CH2_RAW_BUFNUM, 1);
    IPL_CtrlSetInfor(Id, IPLCTRL_SIE_CH2_CAP_RAW_SIZE_H, Width);
    IPL_CtrlSetInfor(Id, IPLCTRL_SIE_CH2_CAPBIT, BitNum);
    IPL_CtrlSetInfor(Id, IPLCTRL_SIE_CH2_CAP_RAW_SIZE_HLOS, IPL_UTI_RAWH_CONV2_LOFS(Width, BitNum));
    IPL_CtrlSetInfor(Id, IPLCTRL_SIE_CH2_CAP_RAW_SIZE_V, Height);

    if (EventId == IPL_FLOW_VID_GETRAW)
    {
        return;
    }
}

void IPL_CtrlCapInit_CCIR(UINT32 Id, UINT32 EventId, IPLCTRL_INFO *CtrlInfo)
{
    UINT32 Width, Height, BitNum;

    if (EventId == IPL_FLOW_CCIR_GETRAW)
    {
        IPL_CtrlSetInfor(Id, IPLCTRL_CAPFLOW, IPLCTRL_CAP_FLOW_CCIR);
    }
    else if (EventId == IPL_FLOW_DUALSENSOR_GETRAW)
    {
        IPL_CtrlSetInfor(Id, IPLCTRL_CAPFLOW, IPLCTRL_CAP_FLOW_DUALSENSOR);
    }
    else
    {
        DBG_ERR("unsupport flow\r\n");
    }
    IPL_DzoomGetSIEOutSize(Id, IPL_DzoomGetIndex(Id), &Width, &Height);


    BitNum = IPL_UTI_CONV_ALGINFO_RAW_BIT(IPL_AlgGetUIInfo2(Id, IPL_SEL_RAW_BITDEPTH_CAP));

    IPL_CtrlSetInfor(Id, IPLCTRL_SIE_CCIR_CAP_RAW_SIZE_H, Width);
    IPL_CtrlSetInfor(Id, IPLCTRL_SIE_CCIR_CAPBIT, BitNum);
    IPL_CtrlSetInfor(Id, IPLCTRL_SIE_CCIR_CAP_RAW_SIZE_HLOS, IPL_UTI_RAWH_CONV2_LOFS(Width, BitNum));
    IPL_CtrlSetInfor(Id, IPLCTRL_SIE_CCIR_CAP_RAW_SIZE_V, Height);
}

void IPL_CtrlPrvInit(UINT32 Id, IPLCTRL_INFO *CtrlInfo)
{
    IPL_CtrlSetInfor(Id, IPLCTRL_PRVBURSTLENGTH, _BURST_64WORD);
    if (IPL_CtrlGetInfor(Id, IPLCTRL_PRVFLOW) == ICF_FLOW_A)
    {
        IPL_CtrlPrvInitFlowA(Id, CtrlInfo);
    }
    else if (IPL_CtrlGetInfor(Id, IPLCTRL_PRVFLOW) == ICF_FLOW_B)
    {
        IPL_CtrlPrvInitFlowB(Id, CtrlInfo);
    }
    else if (IPL_CtrlGetInfor(Id, IPLCTRL_PRVFLOW) == ICF_FLOW_C)
    {
        IPL_CtrlPrvInitFlowC(Id, CtrlInfo);
    }
    else if (IPL_CtrlGetInfor(Id, IPLCTRL_PRVFLOW) == ICF_FLOW_D)
    {
        IPL_CtrlPrvInitFlowD(Id, CtrlInfo);
    }
    else
    {
        DBG_ERR("unsupport IPL flow %d\r\n",IPL_CtrlGetInfor(Id, IPLCTRL_PRVFLOW));
    }
}

void IPL_CtrlPrvInit_CCIR(UINT32 Id, IPLCTRL_INFO *CtrlInfo)
{
    if (IPL_CtrlGetInfor(Id, IPLCTRL_PRVFLOW) == ICF_FLOW_D)
    {
        IPL_CtrlPrvInitFlowD_CCIR(Id, CtrlInfo);
    }
    else
    {
        DBG_ERR("unsupport IPL flow %d\r\n",IPL_CtrlGetInfor(Id, IPLCTRL_PRVFLOW));
    }
}

#if 0
#endif

IPL_HAL_PARASET IPL_CtrlGetHalSetId(UINT32 Id)
{

    IPL_MODE Mode;

    Mode = IPL_CtrlGetInfor(Id, IPLCTRL_CUR_MODE);

    if ((IPLCTRL_CAP_FLOW_INVID == IPL_CtrlGetInfor(Id, IPLCTRL_CAPFLOW)) && (Mode == IPL_MODE_CAP))
    {
        if (IPL_CtrlGetInfor(Id, IPLCTRL_PRVFLOW) == ICF_FLOW_A)
        {
            return IPL_CtrlGetHalSetIdFlowA(Id);
        }
        else if (IPL_CtrlGetInfor(Id, IPLCTRL_PRVFLOW) == ICF_FLOW_B)
        {
            return IPL_CtrlGetHalSetIdFlowB(Id);
        }
        else if (IPL_CtrlGetInfor(Id, IPLCTRL_PRVFLOW) == ICF_FLOW_C)
        {
            return IPL_CtrlGetHalSetIdFlowC(Id);
        }
        else if (IPL_CtrlGetInfor(Id, IPLCTRL_PRVFLOW) == ICF_FLOW_D)
        {
            return IPL_CtrlGetHalSetIdFlowD(Id);
        }
        else
        {
            DBG_ERR("unsupport IPL flow %d\r\n",IPL_CtrlGetInfor(Id, IPLCTRL_PRVFLOW));
            return IPL_HAL_PAR4;
        }
    }
    else
    {
        if (Mode == IPL_MODE_CAP)
        {
            return IPL_HAL_PAR4;
        }
        else
        {
            if (IPL_CtrlGetInfor(Id, IPLCTRL_PRVFLOW) == ICF_FLOW_A)
            {
                return IPL_CtrlGetHalSetIdFlowA(Id);
            }
            else if (IPL_CtrlGetInfor(Id, IPLCTRL_PRVFLOW) == ICF_FLOW_B)
            {
                return IPL_CtrlGetHalSetIdFlowB(Id);
            }
            else if (IPL_CtrlGetInfor(Id, IPLCTRL_PRVFLOW) == ICF_FLOW_C)
            {
                return IPL_CtrlGetHalSetIdFlowC(Id);
            }
            else if (IPL_CtrlGetInfor(Id, IPLCTRL_PRVFLOW) == ICF_FLOW_D)
            {
                return IPL_CtrlGetHalSetIdFlowD(Id);
            }
            else
            {
                DBG_ERR("unsupport IPL flow %d\r\n",IPL_CtrlGetInfor(Id, IPLCTRL_PRVFLOW));
                return IPL_HAL_PAR4;
            }
        }
    }
}

IPL_HAL_PARASET IPL_CtrlGetHalSetIdPProc(UINT32 Id)
{
    IPL_MODE Mode;

    Mode = IPL_CtrlGetInfor(Id, IPLCTRL_CUR_MODE);

    if ((Mode != IPL_MODE_CAP) && (Mode != IPL_MODE_OFF) && (IPL_CtrlGetInfor(Id, IPLCTRL_PRVFLOW) == ICF_FLOW_B))
    {
        return IPL_CtrlGetHalSetIdPProcFlowB();
    }
    else
    {
        DBG_ERR("unsupport IPL flow %d\r\n",IPL_CtrlGetInfor(Id, IPLCTRL_PRVFLOW));
        return IPL_HAL_PAR4;
    }
}
